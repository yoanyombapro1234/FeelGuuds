// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: proto/merchant_service.proto

package merchant_service_proto_v1

import (
	bytes "bytes"
	context "context"
	fmt "fmt"
	io "io"
	math "math"
	math_bits "math/bits"

	proto "github.com/gogo/protobuf/proto"
	_ "github.com/infobloxopen/protoc-gen-gorm/options"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// represents the type of merchant account
type MerchantAccountType int32

const (
	MerchantAccountType_Individual       MerchantAccountType = 0
	MerchantAccountType_Company          MerchantAccountType = 1
	MerchantAccountType_NonProfit        MerchantAccountType = 2
	MerchantAccountType_GovernmentEntity MerchantAccountType = 3
)

var MerchantAccountType_name = map[int32]string{
	0: "Individual",
	1: "Company",
	2: "NonProfit",
	3: "GovernmentEntity",
}

var MerchantAccountType_value = map[string]int32{
	"Individual":       0,
	"Company":          1,
	"NonProfit":        2,
	"GovernmentEntity": 3,
}

func (x MerchantAccountType) String() string {
	return proto.EnumName(MerchantAccountType_name, int32(x))
}

func (MerchantAccountType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_5279745a034d8594, []int{0}
}

// Represents the state of the merchant account
type MerchantAccountState int32

const (
	MerchantAccountState_ActiveAndOnboarded          MerchantAccountState = 0
	MerchantAccountState_PendingOnboardingCompletion MerchantAccountState = 1
	MerchantAccountState_Inactive                    MerchantAccountState = 2
)

var MerchantAccountState_name = map[int32]string{
	0: "ActiveAndOnboarded",
	1: "PendingOnboardingCompletion",
	2: "Inactive",
}

var MerchantAccountState_value = map[string]int32{
	"ActiveAndOnboarded":          0,
	"PendingOnboardingCompletion": 1,
	"Inactive":                    2,
}

func (x MerchantAccountState) String() string {
	return proto.EnumName(MerchantAccountState_name, int32(x))
}

func (MerchantAccountState) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_5279745a034d8594, []int{1}
}

// Represents the manner in which merchant accounts will deliver their service offerings to customers
type FulfillmentOptions int32

const (
	FulfillmentOptions_SHIP_ITEMS         FulfillmentOptions = 0
	FulfillmentOptions_ALLOW_PICKUP       FulfillmentOptions = 1
	FulfillmentOptions_ALLOW_DELIVERY     FulfillmentOptions = 2
	FulfillmentOptions_ALLOW_SELF_SERVICE FulfillmentOptions = 3
)

var FulfillmentOptions_name = map[int32]string{
	0: "SHIP_ITEMS",
	1: "ALLOW_PICKUP",
	2: "ALLOW_DELIVERY",
	3: "ALLOW_SELF_SERVICE",
}

var FulfillmentOptions_value = map[string]int32{
	"SHIP_ITEMS":         0,
	"ALLOW_PICKUP":       1,
	"ALLOW_DELIVERY":     2,
	"ALLOW_SELF_SERVICE": 3,
}

func (x FulfillmentOptions) String() string {
	return proto.EnumName(FulfillmentOptions_name, int32(x))
}

func (FulfillmentOptions) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_5279745a034d8594, []int{2}
}

// represents the stage in the onboarding flow the merchant account is in
type OnboardingStatus int32

const (
	OnboardingStatus_OnboardingNotStarted OnboardingStatus = 0
	OnboardingStatus_FeelGuudOnboarding   OnboardingStatus = 1
	OnboardingStatus_StripeOnboarding     OnboardingStatus = 2
	OnboardingStatus_CatalogueOnboarding  OnboardingStatus = 3
	OnboardingStatus_BCorpOnboarding      OnboardingStatus = 4
)

var OnboardingStatus_name = map[int32]string{
	0: "OnboardingNotStarted",
	1: "FeelGuudOnboarding",
	2: "StripeOnboarding",
	3: "CatalogueOnboarding",
	4: "BCorpOnboarding",
}

var OnboardingStatus_value = map[string]int32{
	"OnboardingNotStarted": 0,
	"FeelGuudOnboarding":   1,
	"StripeOnboarding":     2,
	"CatalogueOnboarding":  3,
	"BCorpOnboarding":      4,
}

func (x OnboardingStatus) String() string {
	return proto.EnumName(OnboardingStatus_name, int32(x))
}

func (OnboardingStatus) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_5279745a034d8594, []int{3}
}

// set of causes a merchant may opt to support
type Causes int32

const (
	Causes_VOTING_RIGHTS          Causes = 0
	Causes_CLIMATE_JUSTICE        Causes = 1
	Causes_HEALTHCARE             Causes = 2
	Causes_REFUGEE_CRISIS         Causes = 3
	Causes_RACIAL_JUSTICE         Causes = 4
	Causes_INCOME_GAP             Causes = 5
	Causes_GUN_VIOLENCE           Causes = 6
	Causes_HUNGER_FOOD_INSECURITY Causes = 7
	Causes_EQUALITY               Causes = 8
	Causes_LBGTQ                  Causes = 9
	Causes_EDUCATION              Causes = 10
	Causes_FORCED_CHILD_LABOR     Causes = 11
	Causes_CHILD_ABUSE_NEGLECT    Causes = 12
	Causes_CIVIL_RIGHTS           Causes = 13
	Causes_POVERTY                Causes = 14
)

var Causes_name = map[int32]string{
	0:  "VOTING_RIGHTS",
	1:  "CLIMATE_JUSTICE",
	2:  "HEALTHCARE",
	3:  "REFUGEE_CRISIS",
	4:  "RACIAL_JUSTICE",
	5:  "INCOME_GAP",
	6:  "GUN_VIOLENCE",
	7:  "HUNGER_FOOD_INSECURITY",
	8:  "EQUALITY",
	9:  "LBGTQ",
	10: "EDUCATION",
	11: "FORCED_CHILD_LABOR",
	12: "CHILD_ABUSE_NEGLECT",
	13: "CIVIL_RIGHTS",
	14: "POVERTY",
}

var Causes_value = map[string]int32{
	"VOTING_RIGHTS":          0,
	"CLIMATE_JUSTICE":        1,
	"HEALTHCARE":             2,
	"REFUGEE_CRISIS":         3,
	"RACIAL_JUSTICE":         4,
	"INCOME_GAP":             5,
	"GUN_VIOLENCE":           6,
	"HUNGER_FOOD_INSECURITY": 7,
	"EQUALITY":               8,
	"LBGTQ":                  9,
	"EDUCATION":              10,
	"FORCED_CHILD_LABOR":     11,
	"CHILD_ABUSE_NEGLECT":    12,
	"CIVIL_RIGHTS":           13,
	"POVERTY":                14,
}

func (x Causes) String() string {
	return proto.EnumName(Causes_name, int32(x))
}

func (Causes) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_5279745a034d8594, []int{4}
}

// Credit card type
type Settings_PaymentDetails_CreditCardBrand int32

const (
	Settings_PaymentDetails_VISA       Settings_PaymentDetails_CreditCardBrand = 0
	Settings_PaymentDetails_MASTERCARD Settings_PaymentDetails_CreditCardBrand = 1
	Settings_PaymentDetails_DISCOVER   Settings_PaymentDetails_CreditCardBrand = 2
)

var Settings_PaymentDetails_CreditCardBrand_name = map[int32]string{
	0: "VISA",
	1: "MASTERCARD",
	2: "DISCOVER",
}

var Settings_PaymentDetails_CreditCardBrand_value = map[string]int32{
	"VISA":       0,
	"MASTERCARD": 1,
	"DISCOVER":   2,
}

func (x Settings_PaymentDetails_CreditCardBrand) String() string {
	return proto.EnumName(Settings_PaymentDetails_CreditCardBrand_name, int32(x))
}

func (Settings_PaymentDetails_CreditCardBrand) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_5279745a034d8594, []int{1, 0, 0}
}

// currency in which this business aims to transact
type Settings_PaymentDetails_CurrencyCode int32

const (
	Settings_PaymentDetails_USD Settings_PaymentDetails_CurrencyCode = 0
	Settings_PaymentDetails_GBP Settings_PaymentDetails_CurrencyCode = 1
)

var Settings_PaymentDetails_CurrencyCode_name = map[int32]string{
	0: "USD",
	1: "GBP",
}

var Settings_PaymentDetails_CurrencyCode_value = map[string]int32{
	"USD": 0,
	"GBP": 1,
}

func (x Settings_PaymentDetails_CurrencyCode) String() string {
	return proto.EnumName(Settings_PaymentDetails_CurrencyCode_name, int32(x))
}

func (Settings_PaymentDetails_CurrencyCode) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_5279745a034d8594, []int{1, 0, 1}
}

// Represents the set of supported digital wallets
type Settings_PaymentDetails_DigitalWallets int32

const (
	Settings_PaymentDetails_ANDROID_PAY Settings_PaymentDetails_DigitalWallets = 0
	Settings_PaymentDetails_APPLE_PAY   Settings_PaymentDetails_DigitalWallets = 1
	Settings_PaymentDetails_GOOGLE_PAY  Settings_PaymentDetails_DigitalWallets = 2
	Settings_PaymentDetails_SHOPIFY_PAY Settings_PaymentDetails_DigitalWallets = 3
)

var Settings_PaymentDetails_DigitalWallets_name = map[int32]string{
	0: "ANDROID_PAY",
	1: "APPLE_PAY",
	2: "GOOGLE_PAY",
	3: "SHOPIFY_PAY",
}

var Settings_PaymentDetails_DigitalWallets_value = map[string]int32{
	"ANDROID_PAY": 0,
	"APPLE_PAY":   1,
	"GOOGLE_PAY":  2,
	"SHOPIFY_PAY": 3,
}

func (x Settings_PaymentDetails_DigitalWallets) String() string {
	return proto.EnumName(Settings_PaymentDetails_DigitalWallets_name, int32(x))
}

func (Settings_PaymentDetails_DigitalWallets) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_5279745a034d8594, []int{1, 0, 2}
}

// Represents the types of services/items the merchant account will sell to customers
type ItemSold_ItemsType int32

const (
	ItemSold_PHYSICAL_ITEMS ItemSold_ItemsType = 0
	ItemSold_MENU_ITEMS     ItemSold_ItemsType = 1
	ItemSold_DONATIONS      ItemSold_ItemsType = 2
	ItemSold_TICKETS        ItemSold_ItemsType = 3
	ItemSold_MEMBERSHIPS    ItemSold_ItemsType = 4
	ItemSold_SERVICES       ItemSold_ItemsType = 5
)

var ItemSold_ItemsType_name = map[int32]string{
	0: "PHYSICAL_ITEMS",
	1: "MENU_ITEMS",
	2: "DONATIONS",
	3: "TICKETS",
	4: "MEMBERSHIPS",
	5: "SERVICES",
}

var ItemSold_ItemsType_value = map[string]int32{
	"PHYSICAL_ITEMS": 0,
	"MENU_ITEMS":     1,
	"DONATIONS":      2,
	"TICKETS":        3,
	"MEMBERSHIPS":    4,
	"SERVICES":       5,
}

func (x ItemSold_ItemsType) String() string {
	return proto.EnumName(ItemSold_ItemsType_name, int32(x))
}

func (ItemSold_ItemsType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_5279745a034d8594, []int{2, 0}
}

type Policy_PolicyType int32

const (
	Policy_SHIPPING_POLICY Policy_PolicyType = 0
	Policy_RETURN_POLICY   Policy_PolicyType = 1
)

var Policy_PolicyType_name = map[int32]string{
	0: "SHIPPING_POLICY",
	1: "RETURN_POLICY",
}

var Policy_PolicyType_value = map[string]int32{
	"SHIPPING_POLICY": 0,
	"RETURN_POLICY":   1,
}

func (x Policy_PolicyType) String() string {
	return proto.EnumName(Policy_PolicyType_name, int32(x))
}

func (Policy_PolicyType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_5279745a034d8594, []int{6, 0}
}

type ShippingPolicy_PostalService int32

const (
	ShippingPolicy_USPS      ShippingPolicy_PostalService = 0
	ShippingPolicy_FEDEX     ShippingPolicy_PostalService = 1
	ShippingPolicy_DHL       ShippingPolicy_PostalService = 2
	ShippingPolicy_UPS       ShippingPolicy_PostalService = 3
	ShippingPolicy_BLUE_DART ShippingPolicy_PostalService = 4
)

var ShippingPolicy_PostalService_name = map[int32]string{
	0: "USPS",
	1: "FEDEX",
	2: "DHL",
	3: "UPS",
	4: "BLUE_DART",
}

var ShippingPolicy_PostalService_value = map[string]int32{
	"USPS":      0,
	"FEDEX":     1,
	"DHL":       2,
	"UPS":       3,
	"BLUE_DART": 4,
}

func (x ShippingPolicy_PostalService) String() string {
	return proto.EnumName(ShippingPolicy_PostalService_name, int32(x))
}

func (ShippingPolicy_PostalService) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_5279745a034d8594, []int{8, 0}
}

// MerchantAccount represents a business account in the context of feelguuds
type MerchantAccount struct {
	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	// set of owners who are responsible for this merchant account
	Owners []*Owner `protobuf:"bytes,2,rep,name=owners,proto3" json:"owners,omitempty"`
	// business name of the merchant account
	BusinessName string `protobuf:"bytes,3,opt,name=business_name,json=businessName,proto3" json:"business_name,omitempty"`
	// business email of the merchant account
	BusinessEmail string `protobuf:"bytes,4,opt,name=business_email,json=businessEmail,proto3" json:"business_email,omitempty"`
	// employer identification number
	EmployerId uint64 `protobuf:"varint,5,opt,name=employer_id,json=employerId,proto3" json:"employer_id,omitempty"`
	// estimated annual revenue pre-tax of the merchant account
	EstimateAnnualRevenue string `protobuf:"bytes,6,opt,name=estimate_annual_revenue,json=estimateAnnualRevenue,proto3" json:"estimate_annual_revenue,omitempty"`
	// merchant account address
	Address *Address `protobuf:"bytes,7,opt,name=address,proto3" json:"address,omitempty"`
	// types of item this merchant is selling
	ItemsOrServicesSold []*ItemSold `protobuf:"bytes,8,rep,name=items_or_services_sold,json=itemsOrServicesSold,proto3" json:"items_or_services_sold,omitempty"`
	// ways in which the merchant aims to fulfill purchases
	FulfillmentOptions []FulfillmentOptions `protobuf:"varint,9,rep,packed,name=fulfillment_options,json=fulfillmentOptions,proto3,enum=merchant_service_proto_v1.FulfillmentOptions" json:"fulfillment_options,omitempty"`
	// shop settings
	ShopSettings *Settings `protobuf:"bytes,10,opt,name=ShopSettings,proto3" json:"ShopSettings,omitempty"`
	// set of supported causes the merchant adheres to
	SupportedCauses []Causes `protobuf:"varint,11,rep,packed,name=supported_causes,json=supportedCauses,proto3,enum=merchant_service_proto_v1.Causes" json:"supported_causes,omitempty"`
	// merchant account bio
	Bio string `protobuf:"bytes,12,opt,name=bio,proto3" json:"bio,omitempty"`
	// merchant account headline
	Headline string `protobuf:"bytes,13,opt,name=headline,proto3" json:"headline,omitempty"`
	// merchant account phone number
	PhoneNumber string `protobuf:"bytes,14,opt,name=phone_number,json=phoneNumber,proto3" json:"phone_number,omitempty"`
	// set of tags associated with a merchant
	Tags []*Tags `protobuf:"bytes,15,rep,name=tags,proto3" json:"tags,omitempty"`
	// stripe connect account id
	StripeConnectedAccountId uint32 `protobuf:"varint,16,opt,name=stripe_connected_account_id,json=stripeConnectedAccountId,proto3" json:"stripe_connected_account_id,omitempty"`
	// id of the associated payment account this merchant account is tied to
	PaymentsAccountId uint64 `protobuf:"varint,17,opt,name=payments_account_id,json=paymentsAccountId,proto3" json:"payments_account_id,omitempty"`
	// id of the merchant account from the context of the auth service
	AuthnAccountId uint64 `protobuf:"varint,18,opt,name=authn_account_id,json=authnAccountId,proto3" json:"authn_account_id,omitempty"`
	// merchant account onboarding step
	OnboardingState OnboardingStatus `protobuf:"varint,19,opt,name=onboarding_state,json=onboardingState,proto3,enum=merchant_service_proto_v1.OnboardingStatus" json:"onboarding_state,omitempty"`
	// merchant account state
	AccountState MerchantAccountState `protobuf:"varint,20,opt,name=account_state,json=accountState,proto3,enum=merchant_service_proto_v1.MerchantAccountState" json:"account_state,omitempty"`
	// type of merchant account
	AccountType MerchantAccountType `protobuf:"varint,21,opt,name=account_type,json=accountType,proto3,enum=merchant_service_proto_v1.MerchantAccountType" json:"account_type,omitempty"`
	// merchant account password
	Password             string   `protobuf:"bytes,22,opt,name=password,proto3" json:"password,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MerchantAccount) Reset()         { *m = MerchantAccount{} }
func (m *MerchantAccount) String() string { return proto.CompactTextString(m) }
func (*MerchantAccount) ProtoMessage()    {}
func (*MerchantAccount) Descriptor() ([]byte, []int) {
	return fileDescriptor_5279745a034d8594, []int{0}
}
func (m *MerchantAccount) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MerchantAccount) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MerchantAccount.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MerchantAccount) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MerchantAccount.Merge(m, src)
}
func (m *MerchantAccount) XXX_Size() int {
	return m.Size()
}
func (m *MerchantAccount) XXX_DiscardUnknown() {
	xxx_messageInfo_MerchantAccount.DiscardUnknown(m)
}

var xxx_messageInfo_MerchantAccount proto.InternalMessageInfo

func (m *MerchantAccount) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *MerchantAccount) GetOwners() []*Owner {
	if m != nil {
		return m.Owners
	}
	return nil
}

func (m *MerchantAccount) GetBusinessName() string {
	if m != nil {
		return m.BusinessName
	}
	return ""
}

func (m *MerchantAccount) GetBusinessEmail() string {
	if m != nil {
		return m.BusinessEmail
	}
	return ""
}

func (m *MerchantAccount) GetEmployerId() uint64 {
	if m != nil {
		return m.EmployerId
	}
	return 0
}

func (m *MerchantAccount) GetEstimateAnnualRevenue() string {
	if m != nil {
		return m.EstimateAnnualRevenue
	}
	return ""
}

func (m *MerchantAccount) GetAddress() *Address {
	if m != nil {
		return m.Address
	}
	return nil
}

func (m *MerchantAccount) GetItemsOrServicesSold() []*ItemSold {
	if m != nil {
		return m.ItemsOrServicesSold
	}
	return nil
}

func (m *MerchantAccount) GetFulfillmentOptions() []FulfillmentOptions {
	if m != nil {
		return m.FulfillmentOptions
	}
	return nil
}

func (m *MerchantAccount) GetShopSettings() *Settings {
	if m != nil {
		return m.ShopSettings
	}
	return nil
}

func (m *MerchantAccount) GetSupportedCauses() []Causes {
	if m != nil {
		return m.SupportedCauses
	}
	return nil
}

func (m *MerchantAccount) GetBio() string {
	if m != nil {
		return m.Bio
	}
	return ""
}

func (m *MerchantAccount) GetHeadline() string {
	if m != nil {
		return m.Headline
	}
	return ""
}

func (m *MerchantAccount) GetPhoneNumber() string {
	if m != nil {
		return m.PhoneNumber
	}
	return ""
}

func (m *MerchantAccount) GetTags() []*Tags {
	if m != nil {
		return m.Tags
	}
	return nil
}

func (m *MerchantAccount) GetStripeConnectedAccountId() uint32 {
	if m != nil {
		return m.StripeConnectedAccountId
	}
	return 0
}

func (m *MerchantAccount) GetPaymentsAccountId() uint64 {
	if m != nil {
		return m.PaymentsAccountId
	}
	return 0
}

func (m *MerchantAccount) GetAuthnAccountId() uint64 {
	if m != nil {
		return m.AuthnAccountId
	}
	return 0
}

func (m *MerchantAccount) GetOnboardingState() OnboardingStatus {
	if m != nil {
		return m.OnboardingState
	}
	return OnboardingStatus_OnboardingNotStarted
}

func (m *MerchantAccount) GetAccountState() MerchantAccountState {
	if m != nil {
		return m.AccountState
	}
	return MerchantAccountState_ActiveAndOnboarded
}

func (m *MerchantAccount) GetAccountType() MerchantAccountType {
	if m != nil {
		return m.AccountType
	}
	return MerchantAccountType_Individual
}

func (m *MerchantAccount) GetPassword() string {
	if m != nil {
		return m.Password
	}
	return ""
}

// Represents all configurable settings for a given merchant account
type Settings struct {
	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	// merchant account payment details
	PaymentDetails *Settings_PaymentDetails `protobuf:"bytes,2,opt,name=payment_details,json=paymentDetails,proto3" json:"payment_details,omitempty"`
	// set of policies a merchant account can define on it's shop profile
	ShopPolicy []*Policy `protobuf:"bytes,3,rep,name=ShopPolicy,proto3" json:"ShopPolicy,omitempty"`
	// set of policies a merchant account can define with respect to privacy on it's shop profile
	PrivacyPolicy []*Policy `protobuf:"bytes,4,rep,name=PrivacyPolicy,proto3" json:"PrivacyPolicy,omitempty"`
	// set of return policies a merchant account can define with respect to issuing refunds on its shop profile
	ReturnPolicy *ReturnPolicy `protobuf:"bytes,5,opt,name=ReturnPolicy,proto3" json:"ReturnPolicy,omitempty"`
	// set of shipping policies a merchant account can define on to its shop profile
	ShippingPolicy       *ShippingPolicy `protobuf:"bytes,6,opt,name=ShippingPolicy,proto3" json:"ShippingPolicy,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *Settings) Reset()         { *m = Settings{} }
func (m *Settings) String() string { return proto.CompactTextString(m) }
func (*Settings) ProtoMessage()    {}
func (*Settings) Descriptor() ([]byte, []int) {
	return fileDescriptor_5279745a034d8594, []int{1}
}
func (m *Settings) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Settings) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Settings.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Settings) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Settings.Merge(m, src)
}
func (m *Settings) XXX_Size() int {
	return m.Size()
}
func (m *Settings) XXX_DiscardUnknown() {
	xxx_messageInfo_Settings.DiscardUnknown(m)
}

var xxx_messageInfo_Settings proto.InternalMessageInfo

func (m *Settings) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Settings) GetPaymentDetails() *Settings_PaymentDetails {
	if m != nil {
		return m.PaymentDetails
	}
	return nil
}

func (m *Settings) GetShopPolicy() []*Policy {
	if m != nil {
		return m.ShopPolicy
	}
	return nil
}

func (m *Settings) GetPrivacyPolicy() []*Policy {
	if m != nil {
		return m.PrivacyPolicy
	}
	return nil
}

func (m *Settings) GetReturnPolicy() *ReturnPolicy {
	if m != nil {
		return m.ReturnPolicy
	}
	return nil
}

func (m *Settings) GetShippingPolicy() *ShippingPolicy {
	if m != nil {
		return m.ShippingPolicy
	}
	return nil
}

// Represents the various details associated with a payment type
type Settings_PaymentDetails struct {
	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	// set of acceptable credit card types
	AcceptableCreditCardTypes []Settings_PaymentDetails_CreditCardBrand `protobuf:"varint,2,rep,packed,name=acceptable_credit_card_types,json=acceptableCreditCardTypes,proto3,enum=merchant_service_proto_v1.Settings_PaymentDetails_CreditCardBrand" json:"acceptable_credit_card_types,omitempty"`
	// primary currency this business aims to transact in
	PrimaryCurrencyCode Settings_PaymentDetails_CurrencyCode `protobuf:"varint,3,opt,name=primary_currency_code,json=primaryCurrencyCode,proto3,enum=merchant_service_proto_v1.Settings_PaymentDetails_CurrencyCode" json:"primary_currency_code,omitempty"`
	// set of currencies the merchant can support
	EnabledCurrencyCodes []Settings_PaymentDetails_CurrencyCode `protobuf:"varint,4,rep,packed,name=enabled_currency_codes,json=enabledCurrencyCodes,proto3,enum=merchant_service_proto_v1.Settings_PaymentDetails_CurrencyCode" json:"enabled_currency_codes,omitempty"`
	// set of supported digital wallets
	SupportedDigitalWallets []Settings_PaymentDetails_DigitalWallets `protobuf:"varint,5,rep,packed,name=supported_digital_wallets,json=supportedDigitalWallets,proto3,enum=merchant_service_proto_v1.Settings_PaymentDetails_DigitalWallets" json:"supported_digital_wallets,omitempty"`
	XXX_NoUnkeyedLiteral    struct{}                                 `json:"-"`
	XXX_unrecognized        []byte                                   `json:"-"`
	XXX_sizecache           int32                                    `json:"-"`
}

func (m *Settings_PaymentDetails) Reset()         { *m = Settings_PaymentDetails{} }
func (m *Settings_PaymentDetails) String() string { return proto.CompactTextString(m) }
func (*Settings_PaymentDetails) ProtoMessage()    {}
func (*Settings_PaymentDetails) Descriptor() ([]byte, []int) {
	return fileDescriptor_5279745a034d8594, []int{1, 0}
}
func (m *Settings_PaymentDetails) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Settings_PaymentDetails) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Settings_PaymentDetails.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Settings_PaymentDetails) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Settings_PaymentDetails.Merge(m, src)
}
func (m *Settings_PaymentDetails) XXX_Size() int {
	return m.Size()
}
func (m *Settings_PaymentDetails) XXX_DiscardUnknown() {
	xxx_messageInfo_Settings_PaymentDetails.DiscardUnknown(m)
}

var xxx_messageInfo_Settings_PaymentDetails proto.InternalMessageInfo

func (m *Settings_PaymentDetails) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Settings_PaymentDetails) GetAcceptableCreditCardTypes() []Settings_PaymentDetails_CreditCardBrand {
	if m != nil {
		return m.AcceptableCreditCardTypes
	}
	return nil
}

func (m *Settings_PaymentDetails) GetPrimaryCurrencyCode() Settings_PaymentDetails_CurrencyCode {
	if m != nil {
		return m.PrimaryCurrencyCode
	}
	return Settings_PaymentDetails_USD
}

func (m *Settings_PaymentDetails) GetEnabledCurrencyCodes() []Settings_PaymentDetails_CurrencyCode {
	if m != nil {
		return m.EnabledCurrencyCodes
	}
	return nil
}

func (m *Settings_PaymentDetails) GetSupportedDigitalWallets() []Settings_PaymentDetails_DigitalWallets {
	if m != nil {
		return m.SupportedDigitalWallets
	}
	return nil
}

// Represents the types of items a merchant account sells
type ItemSold struct {
	Id                   uint64             `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Type                 ItemSold_ItemsType `protobuf:"varint,2,opt,name=type,proto3,enum=merchant_service_proto_v1.ItemSold_ItemsType" json:"type,omitempty"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *ItemSold) Reset()         { *m = ItemSold{} }
func (m *ItemSold) String() string { return proto.CompactTextString(m) }
func (*ItemSold) ProtoMessage()    {}
func (*ItemSold) Descriptor() ([]byte, []int) {
	return fileDescriptor_5279745a034d8594, []int{2}
}
func (m *ItemSold) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ItemSold) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ItemSold.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ItemSold) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ItemSold.Merge(m, src)
}
func (m *ItemSold) XXX_Size() int {
	return m.Size()
}
func (m *ItemSold) XXX_DiscardUnknown() {
	xxx_messageInfo_ItemSold.DiscardUnknown(m)
}

var xxx_messageInfo_ItemSold proto.InternalMessageInfo

func (m *ItemSold) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *ItemSold) GetType() ItemSold_ItemsType {
	if m != nil {
		return m.Type
	}
	return ItemSold_PHYSICAL_ITEMS
}

// business address
type Address struct {
	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	// the address field
	Address string `protobuf:"bytes,2,opt,name=Address,proto3" json:"Address,omitempty"`
	// the unit if the address is an apartment
	Unit string `protobuf:"bytes,3,opt,name=Unit,proto3" json:"Unit,omitempty"`
	// the address zipcode
	ZipCode string `protobuf:"bytes,4,opt,name=ZipCode,proto3" json:"ZipCode,omitempty"`
	// the city
	City string `protobuf:"bytes,5,opt,name=City,proto3" json:"City,omitempty"`
	// the state/municipality
	State string `protobuf:"bytes,6,opt,name=State,proto3" json:"State,omitempty"`
	// longitude
	Longitude string `protobuf:"bytes,7,opt,name=longitude,proto3" json:"longitude,omitempty"`
	// latittude
	Lattitude            string   `protobuf:"bytes,8,opt,name=lattitude,proto3" json:"lattitude,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Address) Reset()         { *m = Address{} }
func (m *Address) String() string { return proto.CompactTextString(m) }
func (*Address) ProtoMessage()    {}
func (*Address) Descriptor() ([]byte, []int) {
	return fileDescriptor_5279745a034d8594, []int{3}
}
func (m *Address) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Address) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Address.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Address) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Address.Merge(m, src)
}
func (m *Address) XXX_Size() int {
	return m.Size()
}
func (m *Address) XXX_DiscardUnknown() {
	xxx_messageInfo_Address.DiscardUnknown(m)
}

var xxx_messageInfo_Address proto.InternalMessageInfo

func (m *Address) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Address) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *Address) GetUnit() string {
	if m != nil {
		return m.Unit
	}
	return ""
}

func (m *Address) GetZipCode() string {
	if m != nil {
		return m.ZipCode
	}
	return ""
}

func (m *Address) GetCity() string {
	if m != nil {
		return m.City
	}
	return ""
}

func (m *Address) GetState() string {
	if m != nil {
		return m.State
	}
	return ""
}

func (m *Address) GetLongitude() string {
	if m != nil {
		return m.Longitude
	}
	return ""
}

func (m *Address) GetLattitude() string {
	if m != nil {
		return m.Lattitude
	}
	return ""
}

// Represents the merchant account owner
type Owner struct {
	Id                   uint64   `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	FirstName            string   `protobuf:"bytes,2,opt,name=FirstName,proto3" json:"FirstName,omitempty"`
	LastName             string   `protobuf:"bytes,3,opt,name=LastName,proto3" json:"LastName,omitempty"`
	Email                string   `protobuf:"bytes,4,opt,name=Email,proto3" json:"Email,omitempty"`
	Country              string   `protobuf:"bytes,5,opt,name=Country,proto3" json:"Country,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Owner) Reset()         { *m = Owner{} }
func (m *Owner) String() string { return proto.CompactTextString(m) }
func (*Owner) ProtoMessage()    {}
func (*Owner) Descriptor() ([]byte, []int) {
	return fileDescriptor_5279745a034d8594, []int{4}
}
func (m *Owner) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Owner) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Owner.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Owner) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Owner.Merge(m, src)
}
func (m *Owner) XXX_Size() int {
	return m.Size()
}
func (m *Owner) XXX_DiscardUnknown() {
	xxx_messageInfo_Owner.DiscardUnknown(m)
}

var xxx_messageInfo_Owner proto.InternalMessageInfo

func (m *Owner) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Owner) GetFirstName() string {
	if m != nil {
		return m.FirstName
	}
	return ""
}

func (m *Owner) GetLastName() string {
	if m != nil {
		return m.LastName
	}
	return ""
}

func (m *Owner) GetEmail() string {
	if m != nil {
		return m.Email
	}
	return ""
}

func (m *Owner) GetCountry() string {
	if m != nil {
		return m.Country
	}
	return ""
}

// represents a sample tag
type Tags struct {
	Id                   uint64   `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	TagName              string   `protobuf:"bytes,2,opt,name=tag_name,json=tagName,proto3" json:"tag_name,omitempty"`
	TagDescription       string   `protobuf:"bytes,3,opt,name=tag_description,json=tagDescription,proto3" json:"tag_description,omitempty"`
	Metadata             []string `protobuf:"bytes,4,rep,name=metadata,proto3" json:"metadata,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Tags) Reset()         { *m = Tags{} }
func (m *Tags) String() string { return proto.CompactTextString(m) }
func (*Tags) ProtoMessage()    {}
func (*Tags) Descriptor() ([]byte, []int) {
	return fileDescriptor_5279745a034d8594, []int{5}
}
func (m *Tags) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Tags) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Tags.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Tags) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Tags.Merge(m, src)
}
func (m *Tags) XXX_Size() int {
	return m.Size()
}
func (m *Tags) XXX_DiscardUnknown() {
	xxx_messageInfo_Tags.DiscardUnknown(m)
}

var xxx_messageInfo_Tags proto.InternalMessageInfo

func (m *Tags) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Tags) GetTagName() string {
	if m != nil {
		return m.TagName
	}
	return ""
}

func (m *Tags) GetTagDescription() string {
	if m != nil {
		return m.TagDescription
	}
	return ""
}

func (m *Tags) GetMetadata() []string {
	if m != nil {
		return m.Metadata
	}
	return nil
}

// Represents various policies a merchant account can declare for various use cases
type Policy struct {
	Id                   uint64   `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Body                 string   `protobuf:"bytes,2,opt,name=Body,proto3" json:"Body,omitempty"`
	Handle               string   `protobuf:"bytes,3,opt,name=Handle,proto3" json:"Handle,omitempty"`
	Title                string   `protobuf:"bytes,4,opt,name=Title,proto3" json:"Title,omitempty"`
	Tags                 []*Tags  `protobuf:"bytes,5,rep,name=tags,proto3" json:"tags,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Policy) Reset()         { *m = Policy{} }
func (m *Policy) String() string { return proto.CompactTextString(m) }
func (*Policy) ProtoMessage()    {}
func (*Policy) Descriptor() ([]byte, []int) {
	return fileDescriptor_5279745a034d8594, []int{6}
}
func (m *Policy) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Policy) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Policy.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Policy) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Policy.Merge(m, src)
}
func (m *Policy) XXX_Size() int {
	return m.Size()
}
func (m *Policy) XXX_DiscardUnknown() {
	xxx_messageInfo_Policy.DiscardUnknown(m)
}

var xxx_messageInfo_Policy proto.InternalMessageInfo

func (m *Policy) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Policy) GetBody() string {
	if m != nil {
		return m.Body
	}
	return ""
}

func (m *Policy) GetHandle() string {
	if m != nil {
		return m.Handle
	}
	return ""
}

func (m *Policy) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *Policy) GetTags() []*Tags {
	if m != nil {
		return m.Tags
	}
	return nil
}

// ReturnPolicy represent a sample shop return policy
type ReturnPolicy struct {
	Id                                      uint64   `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	PolicyMeta                              *Policy  `protobuf:"bytes,2,opt,name=policy_meta,json=policyMeta,proto3" json:"policy_meta,omitempty"`
	ContactWithinDaysOfDelivery             uint32   `protobuf:"varint,3,opt,name=contact_within_days_of_delivery,json=contactWithinDaysOfDelivery,proto3" json:"contact_within_days_of_delivery,omitempty"`
	ShipWithDaysOfDelivery                  uint32   `protobuf:"varint,4,opt,name=ship_with_days_of_delivery,json=shipWithDaysOfDelivery,proto3" json:"ship_with_days_of_delivery,omitempty"`
	RequestCancellationWithinDaysOfDelivery uint32   `protobuf:"varint,5,opt,name=request_cancellation_within_days_of_delivery,json=requestCancellationWithinDaysOfDelivery,proto3" json:"request_cancellation_within_days_of_delivery,omitempty"`
	ItemsNotToBeReturned                    []string `protobuf:"bytes,6,rep,name=items_not_to_be_returned,json=itemsNotToBeReturned,proto3" json:"items_not_to_be_returned,omitempty"`
	ConditionsOfReturn                      []string `protobuf:"bytes,7,rep,name=conditions_of_return,json=conditionsOfReturn,proto3" json:"conditions_of_return,omitempty"`
	Details                                 string   `protobuf:"bytes,8,opt,name=details,proto3" json:"details,omitempty"`
	XXX_NoUnkeyedLiteral                    struct{} `json:"-"`
	XXX_unrecognized                        []byte   `json:"-"`
	XXX_sizecache                           int32    `json:"-"`
}

func (m *ReturnPolicy) Reset()         { *m = ReturnPolicy{} }
func (m *ReturnPolicy) String() string { return proto.CompactTextString(m) }
func (*ReturnPolicy) ProtoMessage()    {}
func (*ReturnPolicy) Descriptor() ([]byte, []int) {
	return fileDescriptor_5279745a034d8594, []int{7}
}
func (m *ReturnPolicy) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ReturnPolicy) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ReturnPolicy.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ReturnPolicy) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReturnPolicy.Merge(m, src)
}
func (m *ReturnPolicy) XXX_Size() int {
	return m.Size()
}
func (m *ReturnPolicy) XXX_DiscardUnknown() {
	xxx_messageInfo_ReturnPolicy.DiscardUnknown(m)
}

var xxx_messageInfo_ReturnPolicy proto.InternalMessageInfo

func (m *ReturnPolicy) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *ReturnPolicy) GetPolicyMeta() *Policy {
	if m != nil {
		return m.PolicyMeta
	}
	return nil
}

func (m *ReturnPolicy) GetContactWithinDaysOfDelivery() uint32 {
	if m != nil {
		return m.ContactWithinDaysOfDelivery
	}
	return 0
}

func (m *ReturnPolicy) GetShipWithDaysOfDelivery() uint32 {
	if m != nil {
		return m.ShipWithDaysOfDelivery
	}
	return 0
}

func (m *ReturnPolicy) GetRequestCancellationWithinDaysOfDelivery() uint32 {
	if m != nil {
		return m.RequestCancellationWithinDaysOfDelivery
	}
	return 0
}

func (m *ReturnPolicy) GetItemsNotToBeReturned() []string {
	if m != nil {
		return m.ItemsNotToBeReturned
	}
	return nil
}

func (m *ReturnPolicy) GetConditionsOfReturn() []string {
	if m != nil {
		return m.ConditionsOfReturn
	}
	return nil
}

func (m *ReturnPolicy) GetDetails() string {
	if m != nil {
		return m.Details
	}
	return ""
}

// ShippingPolicy represents a sample shop shipping policy
type ShippingPolicy struct {
	Id                   uint64                       `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	PolicyMeta           *Policy                      `protobuf:"bytes,2,opt,name=policy_meta,json=policyMeta,proto3" json:"policy_meta,omitempty"`
	PostalService        ShippingPolicy_PostalService `protobuf:"varint,3,opt,name=postal_service,json=postalService,proto3,enum=merchant_service_proto_v1.ShippingPolicy_PostalService" json:"postal_service,omitempty"`
	DaysOrderShipsIn     uint32                       `protobuf:"varint,4,opt,name=days_order_ships_in,json=daysOrderShipsIn,proto3" json:"days_order_ships_in,omitempty"`
	Details              string                       `protobuf:"bytes,5,opt,name=details,proto3" json:"details,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                     `json:"-"`
	XXX_unrecognized     []byte                       `json:"-"`
	XXX_sizecache        int32                        `json:"-"`
}

func (m *ShippingPolicy) Reset()         { *m = ShippingPolicy{} }
func (m *ShippingPolicy) String() string { return proto.CompactTextString(m) }
func (*ShippingPolicy) ProtoMessage()    {}
func (*ShippingPolicy) Descriptor() ([]byte, []int) {
	return fileDescriptor_5279745a034d8594, []int{8}
}
func (m *ShippingPolicy) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ShippingPolicy) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ShippingPolicy.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ShippingPolicy) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ShippingPolicy.Merge(m, src)
}
func (m *ShippingPolicy) XXX_Size() int {
	return m.Size()
}
func (m *ShippingPolicy) XXX_DiscardUnknown() {
	xxx_messageInfo_ShippingPolicy.DiscardUnknown(m)
}

var xxx_messageInfo_ShippingPolicy proto.InternalMessageInfo

func (m *ShippingPolicy) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *ShippingPolicy) GetPolicyMeta() *Policy {
	if m != nil {
		return m.PolicyMeta
	}
	return nil
}

func (m *ShippingPolicy) GetPostalService() ShippingPolicy_PostalService {
	if m != nil {
		return m.PostalService
	}
	return ShippingPolicy_USPS
}

func (m *ShippingPolicy) GetDaysOrderShipsIn() uint32 {
	if m != nil {
		return m.DaysOrderShipsIn
	}
	return 0
}

func (m *ShippingPolicy) GetDetails() string {
	if m != nil {
		return m.Details
	}
	return ""
}

type CreateAccountRequest struct {
	Account              *MerchantAccount `protobuf:"bytes,1,opt,name=account,proto3" json:"account,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *CreateAccountRequest) Reset()         { *m = CreateAccountRequest{} }
func (m *CreateAccountRequest) String() string { return proto.CompactTextString(m) }
func (*CreateAccountRequest) ProtoMessage()    {}
func (*CreateAccountRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_5279745a034d8594, []int{9}
}
func (m *CreateAccountRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CreateAccountRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CreateAccountRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CreateAccountRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateAccountRequest.Merge(m, src)
}
func (m *CreateAccountRequest) XXX_Size() int {
	return m.Size()
}
func (m *CreateAccountRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateAccountRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CreateAccountRequest proto.InternalMessageInfo

func (m *CreateAccountRequest) GetAccount() *MerchantAccount {
	if m != nil {
		return m.Account
	}
	return nil
}

type CreateAccountResponse struct {
	AccountId            uint64   `protobuf:"varint,1,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
	JwtToken             string   `protobuf:"bytes,2,opt,name=JwtToken,proto3" json:"JwtToken,omitempty"`
	StripeUrl            string   `protobuf:"bytes,3,opt,name=StripeUrl,proto3" json:"StripeUrl,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CreateAccountResponse) Reset()         { *m = CreateAccountResponse{} }
func (m *CreateAccountResponse) String() string { return proto.CompactTextString(m) }
func (*CreateAccountResponse) ProtoMessage()    {}
func (*CreateAccountResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_5279745a034d8594, []int{10}
}
func (m *CreateAccountResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CreateAccountResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CreateAccountResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CreateAccountResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateAccountResponse.Merge(m, src)
}
func (m *CreateAccountResponse) XXX_Size() int {
	return m.Size()
}
func (m *CreateAccountResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateAccountResponse.DiscardUnknown(m)
}

var xxx_messageInfo_CreateAccountResponse proto.InternalMessageInfo

func (m *CreateAccountResponse) GetAccountId() uint64 {
	if m != nil {
		return m.AccountId
	}
	return 0
}

func (m *CreateAccountResponse) GetJwtToken() string {
	if m != nil {
		return m.JwtToken
	}
	return ""
}

func (m *CreateAccountResponse) GetStripeUrl() string {
	if m != nil {
		return m.StripeUrl
	}
	return ""
}

type DeleteAccountRequest struct {
	AccountId            uint64   `protobuf:"varint,1,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DeleteAccountRequest) Reset()         { *m = DeleteAccountRequest{} }
func (m *DeleteAccountRequest) String() string { return proto.CompactTextString(m) }
func (*DeleteAccountRequest) ProtoMessage()    {}
func (*DeleteAccountRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_5279745a034d8594, []int{11}
}
func (m *DeleteAccountRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DeleteAccountRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DeleteAccountRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DeleteAccountRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeleteAccountRequest.Merge(m, src)
}
func (m *DeleteAccountRequest) XXX_Size() int {
	return m.Size()
}
func (m *DeleteAccountRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_DeleteAccountRequest.DiscardUnknown(m)
}

var xxx_messageInfo_DeleteAccountRequest proto.InternalMessageInfo

func (m *DeleteAccountRequest) GetAccountId() uint64 {
	if m != nil {
		return m.AccountId
	}
	return 0
}

type DeleteAccountResponse struct {
	IsDeleted            bool     `protobuf:"varint,1,opt,name=is_deleted,json=isDeleted,proto3" json:"is_deleted,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DeleteAccountResponse) Reset()         { *m = DeleteAccountResponse{} }
func (m *DeleteAccountResponse) String() string { return proto.CompactTextString(m) }
func (*DeleteAccountResponse) ProtoMessage()    {}
func (*DeleteAccountResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_5279745a034d8594, []int{12}
}
func (m *DeleteAccountResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DeleteAccountResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DeleteAccountResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DeleteAccountResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeleteAccountResponse.Merge(m, src)
}
func (m *DeleteAccountResponse) XXX_Size() int {
	return m.Size()
}
func (m *DeleteAccountResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_DeleteAccountResponse.DiscardUnknown(m)
}

var xxx_messageInfo_DeleteAccountResponse proto.InternalMessageInfo

func (m *DeleteAccountResponse) GetIsDeleted() bool {
	if m != nil {
		return m.IsDeleted
	}
	return false
}

type UpdateAccountRequest struct {
	AccountId            uint64           `protobuf:"varint,1,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
	Account              *MerchantAccount `protobuf:"bytes,2,opt,name=account,proto3" json:"account,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *UpdateAccountRequest) Reset()         { *m = UpdateAccountRequest{} }
func (m *UpdateAccountRequest) String() string { return proto.CompactTextString(m) }
func (*UpdateAccountRequest) ProtoMessage()    {}
func (*UpdateAccountRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_5279745a034d8594, []int{13}
}
func (m *UpdateAccountRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpdateAccountRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpdateAccountRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpdateAccountRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateAccountRequest.Merge(m, src)
}
func (m *UpdateAccountRequest) XXX_Size() int {
	return m.Size()
}
func (m *UpdateAccountRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateAccountRequest.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateAccountRequest proto.InternalMessageInfo

func (m *UpdateAccountRequest) GetAccountId() uint64 {
	if m != nil {
		return m.AccountId
	}
	return 0
}

func (m *UpdateAccountRequest) GetAccount() *MerchantAccount {
	if m != nil {
		return m.Account
	}
	return nil
}

type UpdateAccountResponse struct {
	Account              *MerchantAccount `protobuf:"bytes,1,opt,name=account,proto3" json:"account,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *UpdateAccountResponse) Reset()         { *m = UpdateAccountResponse{} }
func (m *UpdateAccountResponse) String() string { return proto.CompactTextString(m) }
func (*UpdateAccountResponse) ProtoMessage()    {}
func (*UpdateAccountResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_5279745a034d8594, []int{14}
}
func (m *UpdateAccountResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpdateAccountResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpdateAccountResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpdateAccountResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateAccountResponse.Merge(m, src)
}
func (m *UpdateAccountResponse) XXX_Size() int {
	return m.Size()
}
func (m *UpdateAccountResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateAccountResponse.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateAccountResponse proto.InternalMessageInfo

func (m *UpdateAccountResponse) GetAccount() *MerchantAccount {
	if m != nil {
		return m.Account
	}
	return nil
}

type GetAccountRequest struct {
	AccountId            uint64   `protobuf:"varint,1,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetAccountRequest) Reset()         { *m = GetAccountRequest{} }
func (m *GetAccountRequest) String() string { return proto.CompactTextString(m) }
func (*GetAccountRequest) ProtoMessage()    {}
func (*GetAccountRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_5279745a034d8594, []int{15}
}
func (m *GetAccountRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetAccountRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetAccountRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetAccountRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetAccountRequest.Merge(m, src)
}
func (m *GetAccountRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetAccountRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetAccountRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetAccountRequest proto.InternalMessageInfo

func (m *GetAccountRequest) GetAccountId() uint64 {
	if m != nil {
		return m.AccountId
	}
	return 0
}

type GetAccountResponse struct {
	Account              *MerchantAccount `protobuf:"bytes,1,opt,name=account,proto3" json:"account,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *GetAccountResponse) Reset()         { *m = GetAccountResponse{} }
func (m *GetAccountResponse) String() string { return proto.CompactTextString(m) }
func (*GetAccountResponse) ProtoMessage()    {}
func (*GetAccountResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_5279745a034d8594, []int{16}
}
func (m *GetAccountResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetAccountResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetAccountResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetAccountResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetAccountResponse.Merge(m, src)
}
func (m *GetAccountResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetAccountResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetAccountResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetAccountResponse proto.InternalMessageInfo

func (m *GetAccountResponse) GetAccount() *MerchantAccount {
	if m != nil {
		return m.Account
	}
	return nil
}

type GetAccountsRequest struct {
	AccountIds           []uint64 `protobuf:"varint,1,rep,packed,name=account_ids,json=accountIds,proto3" json:"account_ids,omitempty"`
	Limit                uint32   `protobuf:"varint,2,opt,name=limit,proto3" json:"limit,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetAccountsRequest) Reset()         { *m = GetAccountsRequest{} }
func (m *GetAccountsRequest) String() string { return proto.CompactTextString(m) }
func (*GetAccountsRequest) ProtoMessage()    {}
func (*GetAccountsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_5279745a034d8594, []int{17}
}
func (m *GetAccountsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetAccountsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetAccountsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetAccountsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetAccountsRequest.Merge(m, src)
}
func (m *GetAccountsRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetAccountsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetAccountsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetAccountsRequest proto.InternalMessageInfo

func (m *GetAccountsRequest) GetAccountIds() []uint64 {
	if m != nil {
		return m.AccountIds
	}
	return nil
}

func (m *GetAccountsRequest) GetLimit() uint32 {
	if m != nil {
		return m.Limit
	}
	return 0
}

type GetAccountsResponse struct {
	Accounts             []*MerchantAccount `protobuf:"bytes,1,rep,name=accounts,proto3" json:"accounts,omitempty"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *GetAccountsResponse) Reset()         { *m = GetAccountsResponse{} }
func (m *GetAccountsResponse) String() string { return proto.CompactTextString(m) }
func (*GetAccountsResponse) ProtoMessage()    {}
func (*GetAccountsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_5279745a034d8594, []int{18}
}
func (m *GetAccountsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetAccountsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetAccountsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetAccountsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetAccountsResponse.Merge(m, src)
}
func (m *GetAccountsResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetAccountsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetAccountsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetAccountsResponse proto.InternalMessageInfo

func (m *GetAccountsResponse) GetAccounts() []*MerchantAccount {
	if m != nil {
		return m.Accounts
	}
	return nil
}

type SetAccountStatusRequest struct {
	AccountId            uint64               `protobuf:"varint,1,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
	AccountState         MerchantAccountState `protobuf:"varint,2,opt,name=account_state,json=accountState,proto3,enum=merchant_service_proto_v1.MerchantAccountState" json:"account_state,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *SetAccountStatusRequest) Reset()         { *m = SetAccountStatusRequest{} }
func (m *SetAccountStatusRequest) String() string { return proto.CompactTextString(m) }
func (*SetAccountStatusRequest) ProtoMessage()    {}
func (*SetAccountStatusRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_5279745a034d8594, []int{19}
}
func (m *SetAccountStatusRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SetAccountStatusRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SetAccountStatusRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SetAccountStatusRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SetAccountStatusRequest.Merge(m, src)
}
func (m *SetAccountStatusRequest) XXX_Size() int {
	return m.Size()
}
func (m *SetAccountStatusRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SetAccountStatusRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SetAccountStatusRequest proto.InternalMessageInfo

func (m *SetAccountStatusRequest) GetAccountId() uint64 {
	if m != nil {
		return m.AccountId
	}
	return 0
}

func (m *SetAccountStatusRequest) GetAccountState() MerchantAccountState {
	if m != nil {
		return m.AccountState
	}
	return MerchantAccountState_ActiveAndOnboarded
}

type SetAccountStatusResponse struct {
	Account              *MerchantAccount `protobuf:"bytes,1,opt,name=account,proto3" json:"account,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *SetAccountStatusResponse) Reset()         { *m = SetAccountStatusResponse{} }
func (m *SetAccountStatusResponse) String() string { return proto.CompactTextString(m) }
func (*SetAccountStatusResponse) ProtoMessage()    {}
func (*SetAccountStatusResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_5279745a034d8594, []int{20}
}
func (m *SetAccountStatusResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SetAccountStatusResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SetAccountStatusResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SetAccountStatusResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SetAccountStatusResponse.Merge(m, src)
}
func (m *SetAccountStatusResponse) XXX_Size() int {
	return m.Size()
}
func (m *SetAccountStatusResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_SetAccountStatusResponse.DiscardUnknown(m)
}

var xxx_messageInfo_SetAccountStatusResponse proto.InternalMessageInfo

func (m *SetAccountStatusResponse) GetAccount() *MerchantAccount {
	if m != nil {
		return m.Account
	}
	return nil
}

type StartAccountOnboardingRequest struct {
	AccountId            uint64   `protobuf:"varint,1,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *StartAccountOnboardingRequest) Reset()         { *m = StartAccountOnboardingRequest{} }
func (m *StartAccountOnboardingRequest) String() string { return proto.CompactTextString(m) }
func (*StartAccountOnboardingRequest) ProtoMessage()    {}
func (*StartAccountOnboardingRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_5279745a034d8594, []int{21}
}
func (m *StartAccountOnboardingRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *StartAccountOnboardingRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_StartAccountOnboardingRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *StartAccountOnboardingRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StartAccountOnboardingRequest.Merge(m, src)
}
func (m *StartAccountOnboardingRequest) XXX_Size() int {
	return m.Size()
}
func (m *StartAccountOnboardingRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_StartAccountOnboardingRequest.DiscardUnknown(m)
}

var xxx_messageInfo_StartAccountOnboardingRequest proto.InternalMessageInfo

func (m *StartAccountOnboardingRequest) GetAccountId() uint64 {
	if m != nil {
		return m.AccountId
	}
	return 0
}

type StartAccountOnboardingRespone struct {
	Url                  string   `protobuf:"bytes,1,opt,name=url,proto3" json:"url,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *StartAccountOnboardingRespone) Reset()         { *m = StartAccountOnboardingRespone{} }
func (m *StartAccountOnboardingRespone) String() string { return proto.CompactTextString(m) }
func (*StartAccountOnboardingRespone) ProtoMessage()    {}
func (*StartAccountOnboardingRespone) Descriptor() ([]byte, []int) {
	return fileDescriptor_5279745a034d8594, []int{22}
}
func (m *StartAccountOnboardingRespone) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *StartAccountOnboardingRespone) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_StartAccountOnboardingRespone.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *StartAccountOnboardingRespone) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StartAccountOnboardingRespone.Merge(m, src)
}
func (m *StartAccountOnboardingRespone) XXX_Size() int {
	return m.Size()
}
func (m *StartAccountOnboardingRespone) XXX_DiscardUnknown() {
	xxx_messageInfo_StartAccountOnboardingRespone.DiscardUnknown(m)
}

var xxx_messageInfo_StartAccountOnboardingRespone proto.InternalMessageInfo

func (m *StartAccountOnboardingRespone) GetUrl() string {
	if m != nil {
		return m.Url
	}
	return ""
}

func init() {
	proto.RegisterEnum("merchant_service_proto_v1.MerchantAccountType", MerchantAccountType_name, MerchantAccountType_value)
	proto.RegisterEnum("merchant_service_proto_v1.MerchantAccountState", MerchantAccountState_name, MerchantAccountState_value)
	proto.RegisterEnum("merchant_service_proto_v1.FulfillmentOptions", FulfillmentOptions_name, FulfillmentOptions_value)
	proto.RegisterEnum("merchant_service_proto_v1.OnboardingStatus", OnboardingStatus_name, OnboardingStatus_value)
	proto.RegisterEnum("merchant_service_proto_v1.Causes", Causes_name, Causes_value)
	proto.RegisterEnum("merchant_service_proto_v1.Settings_PaymentDetails_CreditCardBrand", Settings_PaymentDetails_CreditCardBrand_name, Settings_PaymentDetails_CreditCardBrand_value)
	proto.RegisterEnum("merchant_service_proto_v1.Settings_PaymentDetails_CurrencyCode", Settings_PaymentDetails_CurrencyCode_name, Settings_PaymentDetails_CurrencyCode_value)
	proto.RegisterEnum("merchant_service_proto_v1.Settings_PaymentDetails_DigitalWallets", Settings_PaymentDetails_DigitalWallets_name, Settings_PaymentDetails_DigitalWallets_value)
	proto.RegisterEnum("merchant_service_proto_v1.ItemSold_ItemsType", ItemSold_ItemsType_name, ItemSold_ItemsType_value)
	proto.RegisterEnum("merchant_service_proto_v1.Policy_PolicyType", Policy_PolicyType_name, Policy_PolicyType_value)
	proto.RegisterEnum("merchant_service_proto_v1.ShippingPolicy_PostalService", ShippingPolicy_PostalService_name, ShippingPolicy_PostalService_value)
	proto.RegisterType((*MerchantAccount)(nil), "merchant_service_proto_v1.MerchantAccount")
	proto.RegisterType((*Settings)(nil), "merchant_service_proto_v1.Settings")
	proto.RegisterType((*Settings_PaymentDetails)(nil), "merchant_service_proto_v1.Settings.PaymentDetails")
	proto.RegisterType((*ItemSold)(nil), "merchant_service_proto_v1.ItemSold")
	proto.RegisterType((*Address)(nil), "merchant_service_proto_v1.Address")
	proto.RegisterType((*Owner)(nil), "merchant_service_proto_v1.Owner")
	proto.RegisterType((*Tags)(nil), "merchant_service_proto_v1.Tags")
	proto.RegisterType((*Policy)(nil), "merchant_service_proto_v1.Policy")
	proto.RegisterType((*ReturnPolicy)(nil), "merchant_service_proto_v1.ReturnPolicy")
	proto.RegisterType((*ShippingPolicy)(nil), "merchant_service_proto_v1.ShippingPolicy")
	proto.RegisterType((*CreateAccountRequest)(nil), "merchant_service_proto_v1.CreateAccountRequest")
	proto.RegisterType((*CreateAccountResponse)(nil), "merchant_service_proto_v1.CreateAccountResponse")
	proto.RegisterType((*DeleteAccountRequest)(nil), "merchant_service_proto_v1.DeleteAccountRequest")
	proto.RegisterType((*DeleteAccountResponse)(nil), "merchant_service_proto_v1.DeleteAccountResponse")
	proto.RegisterType((*UpdateAccountRequest)(nil), "merchant_service_proto_v1.UpdateAccountRequest")
	proto.RegisterType((*UpdateAccountResponse)(nil), "merchant_service_proto_v1.UpdateAccountResponse")
	proto.RegisterType((*GetAccountRequest)(nil), "merchant_service_proto_v1.GetAccountRequest")
	proto.RegisterType((*GetAccountResponse)(nil), "merchant_service_proto_v1.GetAccountResponse")
	proto.RegisterType((*GetAccountsRequest)(nil), "merchant_service_proto_v1.GetAccountsRequest")
	proto.RegisterType((*GetAccountsResponse)(nil), "merchant_service_proto_v1.GetAccountsResponse")
	proto.RegisterType((*SetAccountStatusRequest)(nil), "merchant_service_proto_v1.SetAccountStatusRequest")
	proto.RegisterType((*SetAccountStatusResponse)(nil), "merchant_service_proto_v1.SetAccountStatusResponse")
	proto.RegisterType((*StartAccountOnboardingRequest)(nil), "merchant_service_proto_v1.StartAccountOnboardingRequest")
	proto.RegisterType((*StartAccountOnboardingRespone)(nil), "merchant_service_proto_v1.StartAccountOnboardingRespone")
}

func init() { proto.RegisterFile("proto/merchant_service.proto", fileDescriptor_5279745a034d8594) }

var fileDescriptor_5279745a034d8594 = []byte{
	// 2666 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xc4, 0x19, 0x4d, 0x73, 0xdb, 0xc6,
	0xd5, 0x20, 0x29, 0x89, 0x7c, 0x12, 0x29, 0x78, 0x25, 0xcb, 0xb0, 0xe2, 0xd8, 0x0a, 0x33, 0x9d,
	0xa8, 0x6a, 0x2c, 0x25, 0x72, 0x9a, 0xa6, 0x99, 0x49, 0x3b, 0x20, 0x08, 0x51, 0x88, 0x29, 0x92,
	0x06, 0x48, 0x39, 0x76, 0xea, 0x20, 0x2b, 0x62, 0x45, 0xa1, 0x05, 0x01, 0x14, 0x58, 0xca, 0xe5,
	0x64, 0x7a, 0xea, 0xa5, 0x87, 0x4e, 0x0f, 0xbd, 0xb7, 0xe7, 0x5e, 0x7a, 0x6f, 0xf2, 0x0b, 0x7a,
	0x6c, 0x7b, 0xef, 0x4c, 0xe3, 0x4e, 0x8f, 0xbd, 0x77, 0x7a, 0xea, 0xec, 0xe2, 0x83, 0xa0, 0xa4,
	0xb0, 0xb4, 0xc7, 0x33, 0xbd, 0x61, 0xdf, 0xf7, 0xd7, 0xee, 0x7b, 0xbb, 0x80, 0xdb, 0x7e, 0xe0,
	0x51, 0x6f, 0x6f, 0x48, 0x82, 0xfe, 0x19, 0x76, 0xa9, 0x19, 0x92, 0xe0, 0xdc, 0xee, 0x93, 0x5d,
	0x0e, 0x46, 0xb7, 0x2e, 0xc2, 0x4d, 0x0e, 0x37, 0xcf, 0xdf, 0xdd, 0xfc, 0x70, 0x60, 0xd3, 0xb3,
	0xd1, 0xc9, 0x6e, 0xdf, 0x1b, 0xee, 0xd9, 0xee, 0xa9, 0x77, 0xe2, 0x78, 0x3f, 0xf3, 0x7c, 0xe2,
	0xee, 0x71, 0x8a, 0xfe, 0xbd, 0x01, 0x71, 0xef, 0x0d, 0xbc, 0x60, 0xb8, 0xe7, 0xf9, 0xd4, 0xf6,
	0xdc, 0x70, 0x8f, 0x2d, 0x22, 0xb1, 0xd5, 0x3f, 0x00, 0xac, 0x1e, 0xc5, 0x92, 0xe5, 0x7e, 0xdf,
	0x1b, 0xb9, 0x14, 0x55, 0x21, 0x67, 0x5b, 0x92, 0xb0, 0x25, 0x6c, 0x17, 0x6a, 0xe8, 0xab, 0x2f,
	0x6f, 0x55, 0x60, 0x05, 0x2d, 0x86, 0x24, 0xb0, 0xb1, 0xb3, 0x2d, 0x1c, 0x0a, 0x7a, 0xce, 0xb6,
	0x50, 0x0d, 0x16, 0xbd, 0x67, 0x2e, 0x09, 0x42, 0x29, 0xb7, 0x95, 0xdf, 0x5e, 0xde, 0xdf, 0xda,
	0xfd, 0x46, 0xfb, 0x76, 0xdb, 0x8c, 0xb0, 0x56, 0xfc, 0xea, 0xcb, 0x5b, 0x85, 0x9d, 0xdc, 0xa1,
	0xa0, 0xc7, 0x9c, 0xe8, 0x4d, 0x28, 0x9f, 0x8c, 0x42, 0xdb, 0x25, 0x61, 0x68, 0xba, 0x78, 0x48,
	0xa4, 0xfc, 0x96, 0xb0, 0x5d, 0xd2, 0x57, 0x12, 0x60, 0x0b, 0x0f, 0x09, 0xfa, 0x16, 0x54, 0x52,
	0x22, 0x32, 0xc4, 0xb6, 0x23, 0x15, 0x38, 0x55, 0xca, 0xaa, 0x32, 0x20, 0xba, 0x0b, 0xcb, 0x64,
	0xe8, 0x3b, 0xde, 0x98, 0x04, 0xa6, 0x6d, 0x49, 0x0b, 0xcc, 0x78, 0x1d, 0x12, 0x90, 0x66, 0xa1,
	0xf7, 0xe1, 0x26, 0x09, 0xa9, 0x3d, 0xc4, 0x94, 0x98, 0xd8, 0x75, 0x47, 0xd8, 0x31, 0x03, 0x72,
	0x4e, 0xdc, 0x11, 0x91, 0x16, 0xb9, 0xc0, 0x1b, 0x09, 0x5a, 0xe6, 0x58, 0x3d, 0x42, 0xa2, 0x03,
	0x58, 0xc2, 0x96, 0x15, 0x90, 0x30, 0x94, 0x96, 0xb6, 0x84, 0xed, 0xe5, 0xfd, 0xea, 0x0c, 0x4f,
	0xe5, 0x88, 0x32, 0xf2, 0x75, 0x33, 0xf7, 0x81, 0xa0, 0x27, 0xcc, 0xe8, 0x13, 0xd8, 0xb0, 0x29,
	0x19, 0x86, 0xa6, 0x17, 0x24, 0x7c, 0xa1, 0x19, 0x7a, 0x8e, 0x25, 0x15, 0x79, 0x00, 0xdf, 0x9c,
	0x21, 0x56, 0xa3, 0x64, 0x68, 0x78, 0x8e, 0xa5, 0xaf, 0x71, 0x11, 0xed, 0xc0, 0x88, 0x05, 0x30,
	0x20, 0xfa, 0x0c, 0xd6, 0x4e, 0x47, 0xce, 0xa9, 0xed, 0x38, 0x43, 0xe2, 0x52, 0x33, 0x4e, 0xb2,
	0x54, 0xda, 0xca, 0x6f, 0x57, 0xf6, 0xef, 0xcd, 0x10, 0x7b, 0x30, 0xe1, 0x6a, 0x47, 0x4c, 0x3a,
	0x3a, 0xbd, 0x04, 0x43, 0x0f, 0x61, 0xc5, 0x38, 0xf3, 0x7c, 0x83, 0x50, 0x6a, 0xbb, 0x83, 0x50,
	0x02, 0x1e, 0x86, 0x59, 0xf6, 0x26, 0xa4, 0x99, 0x38, 0x4c, 0x89, 0x40, 0x4d, 0x10, 0xc3, 0x91,
	0xef, 0x7b, 0x01, 0x25, 0x96, 0xd9, 0xc7, 0xa3, 0x90, 0x84, 0xd2, 0x32, 0xb7, 0xf7, 0x8d, 0x19,
	0x62, 0x15, 0x4e, 0xa8, 0xaf, 0xa6, 0xac, 0x11, 0x00, 0x89, 0x90, 0x3f, 0xb1, 0x3d, 0x69, 0x85,
	0xa7, 0x91, 0x7d, 0xa2, 0x4d, 0x28, 0x9e, 0x11, 0x6c, 0x39, 0xb6, 0x4b, 0xa4, 0x32, 0x07, 0xa7,
	0x6b, 0xf4, 0x06, 0xac, 0xf8, 0x67, 0x9e, 0x4b, 0x4c, 0x77, 0x34, 0x3c, 0x21, 0x81, 0x54, 0xe1,
	0xf8, 0x65, 0x0e, 0x6b, 0x71, 0x10, 0xfa, 0x08, 0x0a, 0x14, 0x0f, 0x42, 0x69, 0x95, 0x67, 0xe6,
	0xee, 0x0c, 0x93, 0xba, 0x38, 0xf1, 0x92, 0x57, 0x36, 0x67, 0x43, 0x1f, 0xc1, 0x6b, 0x21, 0x0d,
	0x6c, 0x9f, 0x98, 0x7d, 0xcf, 0x75, 0x49, 0x9f, 0x39, 0x89, 0xa3, 0xbd, 0xc5, 0x6a, 0x53, 0xdc,
	0x12, 0xb6, 0xcb, 0xba, 0x14, 0x91, 0x28, 0x09, 0x45, 0xbc, 0xf9, 0x34, 0x0b, 0xed, 0xc2, 0x9a,
	0x8f, 0xc7, 0x2c, 0x03, 0x61, 0x96, 0xed, 0x3a, 0x2f, 0xe9, 0xeb, 0x09, 0x6a, 0x42, 0xbf, 0x0d,
	0x22, 0x1e, 0xd1, 0x33, 0x37, 0x4b, 0x8c, 0x38, 0x71, 0x85, 0xc3, 0x27, 0x94, 0x9f, 0x83, 0xe8,
	0xb9, 0x27, 0x1e, 0x0e, 0x2c, 0xdb, 0x1d, 0x98, 0x21, 0xc5, 0x94, 0x48, 0x6b, 0x5b, 0xc2, 0x76,
	0x65, 0xff, 0x3b, 0xb3, 0xb6, 0x6f, 0xca, 0x62, 0x50, 0x4c, 0x47, 0xd9, 0xac, 0xae, 0x7a, 0x53,
	0x38, 0x82, 0x3e, 0x83, 0x72, 0x62, 0x45, 0x24, 0x7e, 0x9d, 0x8b, 0xdf, 0x9b, 0x21, 0xfe, 0xc2,
	0xe9, 0xc3, 0xe5, 0x64, 0x0b, 0x07, 0x67, 0xe0, 0xe8, 0x53, 0x48, 0xd6, 0x26, 0x1d, 0xfb, 0x44,
	0xba, 0xc1, 0xc5, 0xef, 0xce, 0x2f, 0xbe, 0x3b, 0xf6, 0xb3, 0xd2, 0x97, 0xf1, 0x04, 0xcc, 0xaa,
	0xc6, 0xc7, 0x61, 0xf8, 0xcc, 0x0b, 0x2c, 0x69, 0x23, 0xaa, 0x9a, 0x64, 0xfd, 0xe1, 0xe2, 0x57,
	0x5f, 0xde, 0xca, 0x15, 0x85, 0xea, 0x5f, 0x4a, 0x50, 0x4c, 0xcb, 0x78, 0x9e, 0x83, 0x92, 0xc0,
	0x6a, 0x9c, 0x32, 0xd3, 0x22, 0x14, 0xdb, 0x0e, 0x3b, 0x31, 0xd9, 0x06, 0xda, 0x9f, 0x63, 0x03,
	0xed, 0x76, 0x22, 0xd6, 0x7a, 0xc4, 0x99, 0x31, 0xbc, 0xe2, 0x4f, 0x61, 0xd0, 0x03, 0x00, 0xb6,
	0xc3, 0x3a, 0x9e, 0x63, 0xf7, 0xc7, 0x52, 0x9e, 0x17, 0xee, 0xac, 0xbd, 0x14, 0x11, 0x66, 0x4a,
	0x37, 0xc3, 0x8e, 0x1e, 0x42, 0xb9, 0x13, 0xd8, 0xe7, 0xb8, 0x3f, 0x8e, 0xe5, 0x15, 0x5e, 0x5c,
	0xde, 0xb4, 0x04, 0xd4, 0x83, 0x15, 0x9d, 0xd0, 0x51, 0xe0, 0xc6, 0x12, 0x17, 0x78, 0x0c, 0xde,
	0x9a, 0x21, 0x31, 0x4b, 0x9e, 0xad, 0x87, 0x2c, 0x1c, 0x7d, 0x0a, 0x15, 0xe3, 0xcc, 0xf6, 0x7d,
	0xdb, 0x1d, 0xc4, 0x82, 0x17, 0xb9, 0xe0, 0x6f, 0xcf, 0x0a, 0xee, 0x14, 0x43, 0x36, 0xa6, 0xd3,
	0x98, 0xcd, 0xbf, 0x2d, 0x40, 0x65, 0x3a, 0x01, 0x73, 0x65, 0xfc, 0x17, 0x02, 0xdc, 0xc6, 0xfd,
	0x3e, 0xf1, 0x29, 0x3e, 0x71, 0x88, 0xd9, 0x0f, 0x88, 0x65, 0x53, 0xb3, 0x8f, 0x03, 0x8b, 0xd7,
	0x6c, 0xd4, 0x31, 0x2b, 0xfb, 0xb5, 0x17, 0xcf, 0xff, 0xae, 0xc2, 0x65, 0x29, 0x38, 0xb0, 0x6a,
	0x01, 0x76, 0x2d, 0xfd, 0xd6, 0x44, 0xcf, 0x04, 0xc5, 0x6a, 0x39, 0x44, 0x21, 0xdc, 0xf0, 0x03,
	0x7b, 0x88, 0x83, 0xb1, 0xd9, 0x1f, 0x05, 0x01, 0x71, 0xfb, 0x63, 0xb3, 0xef, 0x59, 0x51, 0x93,
	0xad, 0xec, 0xff, 0xf0, 0x65, 0xb4, 0xc7, 0x72, 0x14, 0xcf, 0x22, 0xfa, 0x5a, 0x2c, 0x3d, 0x0b,
	0x44, 0x23, 0xd8, 0x20, 0x2e, 0xb3, 0xc6, 0x9a, 0x56, 0x1a, 0xf2, 0x0a, 0x7a, 0x05, 0x5a, 0xd7,
	0x63, 0xf1, 0x59, 0x60, 0x88, 0x7e, 0x0e, 0xb7, 0x26, 0xed, 0xc4, 0xb2, 0x07, 0x36, 0xc5, 0x8e,
	0xf9, 0x0c, 0x3b, 0x0e, 0xa1, 0xa1, 0xb4, 0xc0, 0x35, 0xcb, 0x2f, 0xa1, 0xb9, 0x1e, 0x49, 0x7a,
	0x14, 0x09, 0xd2, 0x6f, 0xa6, 0x3a, 0xa6, 0x11, 0xd5, 0xef, 0xc3, 0xea, 0x85, 0xc4, 0xa0, 0x22,
	0x14, 0x8e, 0x35, 0x43, 0x16, 0xaf, 0xa1, 0x0a, 0xc0, 0x91, 0x6c, 0x74, 0x55, 0x5d, 0x91, 0xf5,
	0xba, 0x28, 0xa0, 0x15, 0x28, 0xd6, 0x35, 0x43, 0x69, 0x1f, 0xab, 0xba, 0x98, 0xab, 0x6e, 0xc1,
	0xca, 0x54, 0x00, 0x97, 0x20, 0xdf, 0x33, 0xea, 0xe2, 0x35, 0xf6, 0xd1, 0xa8, 0x75, 0x44, 0xa1,
	0xfa, 0x10, 0x2a, 0xd3, 0xea, 0xd0, 0x2a, 0x2c, 0xcb, 0xad, 0xba, 0xde, 0xd6, 0xea, 0x66, 0x47,
	0x7e, 0x2c, 0x5e, 0x43, 0x65, 0x28, 0xc9, 0x9d, 0x4e, 0x53, 0xe5, 0x4b, 0x81, 0x69, 0x6c, 0xb4,
	0xdb, 0x8d, 0x78, 0x9d, 0x63, 0xf4, 0xc6, 0x61, 0xbb, 0xa3, 0x1d, 0x3c, 0xe6, 0x80, 0x7c, 0x72,
	0x96, 0xa5, 0x67, 0xda, 0x3f, 0x05, 0x28, 0x26, 0x23, 0xc6, 0x5c, 0x15, 0x2e, 0x43, 0x81, 0x9f,
	0xbe, 0x39, 0x5e, 0x4a, 0xf7, 0xe6, 0x98, 0x5c, 0xf8, 0x47, 0xc8, 0x2a, 0x53, 0xe7, 0xac, 0xd5,
	0x1f, 0x43, 0x29, 0x05, 0x21, 0x04, 0x95, 0xce, 0xe1, 0x63, 0x43, 0x53, 0xe4, 0xa6, 0xa9, 0x75,
	0xd5, 0x23, 0x23, 0x8e, 0x9b, 0xda, 0xea, 0xc5, 0x6b, 0x81, 0x39, 0x59, 0x6f, 0xb7, 0xe4, 0xae,
	0xd6, 0x6e, 0x19, 0x62, 0x0e, 0x2d, 0xc3, 0x52, 0x57, 0x53, 0x1e, 0xa8, 0x5d, 0x43, 0xcc, 0x33,
	0x0f, 0x8f, 0xd4, 0xa3, 0x9a, 0xaa, 0x1b, 0x87, 0x5a, 0xc7, 0x10, 0x0b, 0x2c, 0xc8, 0x86, 0xaa,
	0x1f, 0x6b, 0x8a, 0x6a, 0x88, 0x0b, 0xa9, 0x9f, 0xff, 0x10, 0x60, 0x29, 0x9e, 0xd0, 0xe6, 0x72,
	0x53, 0x4a, 0xc9, 0xb9, 0xa7, 0x25, 0x3d, 0xe5, 0x46, 0x50, 0xe8, 0xb9, 0x36, 0x8d, 0x07, 0x56,
	0xfe, 0xcd, 0xa8, 0x9f, 0xd8, 0x3e, 0xcb, 0x62, 0x3c, 0xa1, 0x26, 0x4b, 0x46, 0xad, 0xd8, 0x34,
	0x3a, 0xf3, 0x4a, 0x3a, 0xff, 0x46, 0xeb, 0xb0, 0xc0, 0x3b, 0x5a, 0x3c, 0x7c, 0x46, 0x0b, 0x74,
	0x1b, 0x4a, 0x8e, 0xe7, 0x0e, 0x6c, 0x3a, 0xb2, 0x08, 0x1f, 0x37, 0x4b, 0xfa, 0x04, 0xc0, 0xb1,
	0x98, 0xd2, 0x08, 0x5b, 0x8c, 0xb1, 0x09, 0x20, 0xf5, 0xf2, 0xb7, 0x02, 0x2c, 0xf0, 0x89, 0x7b,
	0x2e, 0x1f, 0x6f, 0x43, 0xe9, 0xc0, 0x0e, 0x42, 0xca, 0x66, 0xed, 0xd8, 0xcb, 0x09, 0x80, 0x75,
	0xc4, 0x26, 0x8e, 0x91, 0x91, 0xaf, 0xe9, 0x9a, 0x79, 0xa0, 0x66, 0xe6, 0xf1, 0x68, 0xc1, 0xa2,
	0xa0, 0xb0, 0x86, 0x1a, 0x24, 0xee, 0x26, 0xcb, 0xd4, 0xbe, 0xdf, 0x08, 0x50, 0x60, 0x63, 0xd3,
	0x5c, 0xe6, 0xdd, 0x82, 0x22, 0xc5, 0x83, 0xe8, 0x76, 0x10, 0xe7, 0x80, 0xe2, 0x01, 0xd7, 0xff,
	0x16, 0xac, 0x32, 0x94, 0x45, 0xc2, 0x7e, 0x60, 0xf3, 0x51, 0x35, 0x36, 0xb1, 0x42, 0xf1, 0xa0,
	0x3e, 0x81, 0x32, 0x27, 0x86, 0x84, 0x62, 0x0b, 0x53, 0xcc, 0x8f, 0xa1, 0x92, 0x9e, 0xae, 0x53,
	0xa3, 0xbe, 0x16, 0x60, 0x31, 0x6e, 0x29, 0xf3, 0x98, 0x85, 0xa0, 0x50, 0xf3, 0xac, 0x71, 0x6c,
	0x12, 0xff, 0x46, 0x1b, 0xb0, 0x78, 0x88, 0x5d, 0xcb, 0x49, 0x22, 0x15, 0xaf, 0x58, 0x9c, 0xba,
	0x36, 0x75, 0x92, 0xaa, 0x88, 0x16, 0xe8, 0x7e, 0x3c, 0x62, 0x2e, 0xcc, 0x35, 0x62, 0x46, 0x83,
	0x65, 0xf5, 0x3d, 0x80, 0xc8, 0x48, 0xbe, 0x6b, 0xd6, 0x60, 0x95, 0xd5, 0x7b, 0x47, 0x6b, 0x35,
	0xcc, 0x4e, 0xbb, 0xa9, 0x29, 0xec, 0x2c, 0xb8, 0x0e, 0x65, 0x5d, 0xed, 0xf6, 0xf4, 0x56, 0x02,
	0x9a, 0x6c, 0xf3, 0x7f, 0xe5, 0xa7, 0x7b, 0xf0, 0x5c, 0x9e, 0x36, 0x61, 0xd9, 0xe7, 0xd4, 0x26,
	0x8b, 0x59, 0x3c, 0xba, 0xcc, 0x3b, 0x08, 0xf0, 0xae, 0x0a, 0x11, 0xff, 0x11, 0xa1, 0x18, 0xd5,
	0xe1, 0x6e, 0xdf, 0x73, 0x29, 0xee, 0x53, 0xf3, 0x99, 0x4d, 0xcf, 0x6c, 0xd7, 0xb4, 0xf0, 0x38,
	0x34, 0xbd, 0x53, 0xd3, 0x22, 0x8e, 0x7d, 0x4e, 0x82, 0x31, 0x0f, 0x5e, 0x59, 0x7f, 0x2d, 0x26,
	0x7b, 0xc4, 0xa9, 0xea, 0x78, 0x1c, 0xb6, 0x4f, 0xeb, 0x31, 0x09, 0xfa, 0x10, 0x36, 0xc3, 0x33,
	0xdb, 0xe7, 0x22, 0x2e, 0x0b, 0x28, 0x70, 0x01, 0x1b, 0x8c, 0x82, 0x71, 0x5f, 0xe0, 0x7d, 0x0a,
	0x6f, 0x07, 0xe4, 0xa7, 0x23, 0x12, 0xb2, 0x8e, 0xec, 0xf6, 0x89, 0xe3, 0x60, 0x56, 0x24, 0xdf,
	0x68, 0xce, 0x02, 0x97, 0xf6, 0x56, 0xcc, 0xa3, 0x64, 0x58, 0xae, 0x34, 0xed, 0x7d, 0x90, 0xa2,
	0x5b, 0x9e, 0xeb, 0x51, 0x93, 0x7a, 0xe6, 0x09, 0x31, 0x03, 0x1e, 0x72, 0x62, 0x49, 0x8b, 0xbc,
	0xf6, 0xd6, 0x39, 0xbe, 0xe5, 0xd1, 0xae, 0x57, 0x23, 0x7a, 0x8c, 0x43, 0xef, 0xc0, 0x7a, 0xdf,
	0x73, 0x2d, 0x9b, 0xdf, 0xb8, 0x98, 0x01, 0x11, 0x97, 0xb4, 0xc4, 0x79, 0xd0, 0x04, 0xd7, 0x3e,
	0x8d, 0x78, 0xd8, 0x46, 0x4b, 0xe6, 0xc9, 0xe8, 0x28, 0x48, 0x96, 0x69, 0xbe, 0xff, 0x93, 0xbb,
	0x38, 0x1c, 0xfd, 0x1f, 0x32, 0xfe, 0x19, 0x54, 0x7c, 0x2f, 0x64, 0xfd, 0x38, 0xe6, 0x8b, 0xe7,
	0x8f, 0xef, 0xcd, 0x3d, 0xa0, 0xed, 0x76, 0x38, 0x7f, 0x7c, 0xe5, 0xd5, 0xcb, 0x7e, 0x76, 0x89,
	0xee, 0xc1, 0x5a, 0x94, 0xb3, 0xc0, 0x22, 0x81, 0xc9, 0x92, 0x1e, 0x9a, 0xb6, 0x1b, 0x17, 0x81,
	0xc8, 0x50, 0x6d, 0x86, 0x61, 0x22, 0x43, 0x6d, 0x2a, 0x6a, 0x0b, 0x53, 0x51, 0xab, 0xaa, 0x50,
	0x9e, 0x52, 0xc4, 0x5a, 0x78, 0xcf, 0xe8, 0xb0, 0x56, 0x54, 0x82, 0x85, 0x03, 0xb5, 0xae, 0x7e,
	0x22, 0x0a, 0xac, 0x2d, 0xd7, 0x0f, 0x9b, 0x62, 0x8e, 0x37, 0xea, 0x0e, 0xeb, 0x3d, 0x65, 0x28,
	0xd5, 0x9a, 0x3d, 0xd5, 0xac, 0xcb, 0x7a, 0x57, 0x2c, 0xa4, 0xc1, 0xff, 0x11, 0xac, 0x2b, 0x01,
	0xc1, 0x94, 0xc4, 0xf7, 0x0e, 0x3d, 0x2a, 0x20, 0x54, 0x87, 0xa5, 0xf8, 0xca, 0xc1, 0xd3, 0xb0,
	0xbc, 0xbf, 0x33, 0xff, 0xdd, 0x45, 0x4f, 0x58, 0xab, 0x3e, 0xdc, 0xb8, 0x20, 0x3d, 0xf4, 0x3d,
	0x37, 0x24, 0xe8, 0x75, 0x80, 0xcc, 0x2d, 0x90, 0x27, 0x5a, 0x2f, 0xe1, 0xf4, 0x02, 0xb8, 0x09,
	0xc5, 0x8f, 0x9f, 0xd1, 0xae, 0xf7, 0x13, 0xe2, 0xc6, 0x67, 0x57, 0xba, 0x66, 0x9d, 0xc0, 0xe0,
	0x57, 0xd2, 0x5e, 0xe0, 0xc4, 0x47, 0xd8, 0x04, 0x50, 0xfd, 0x2e, 0xac, 0xd7, 0x89, 0x43, 0x2e,
	0xf9, 0x33, 0x5b, 0x61, 0xf5, 0x7d, 0xb8, 0x71, 0x81, 0x6d, 0x62, 0xa8, 0x1d, 0xb2, 0x6d, 0x46,
	0x28, 0x89, 0xf8, 0x8a, 0x7a, 0xc9, 0x0e, 0x23, 0x62, 0xab, 0xfa, 0x05, 0xac, 0xf7, 0x7c, 0x0b,
	0xbf, 0xa0, 0xba, 0x6c, 0x74, 0x73, 0x2f, 0x1f, 0xdd, 0xa7, 0x70, 0xe3, 0x82, 0xf2, 0xd8, 0xe8,
	0x57, 0x93, 0xbc, 0x7d, 0xb8, 0xde, 0x20, 0xf4, 0xc5, 0xe2, 0xf8, 0x04, 0x50, 0x96, 0xe7, 0x95,
	0xda, 0xf3, 0x20, 0x2b, 0x3b, 0x4c, 0x0c, 0xba, 0x0b, 0xcb, 0x13, 0x83, 0x42, 0x49, 0xd8, 0xca,
	0x6f, 0x17, 0x74, 0x48, 0x2d, 0x0a, 0x59, 0x5f, 0x73, 0xec, 0xa1, 0x1d, 0x45, 0xba, 0xac, 0x47,
	0x8b, 0xea, 0x53, 0x58, 0x9b, 0x12, 0x16, 0x5b, 0x7a, 0x00, 0xc5, 0x98, 0x35, 0x12, 0xf5, 0x62,
	0xa6, 0xa6, 0xbc, 0xd5, 0x5f, 0x0b, 0x70, 0xd3, 0x20, 0xd9, 0xb7, 0x82, 0x51, 0x38, 0x67, 0x6d,
	0x74, 0x2f, 0x3e, 0x4d, 0xe4, 0x5e, 0xea, 0x69, 0x62, 0xfa, 0x41, 0xa2, 0xfa, 0x39, 0x48, 0x97,
	0xed, 0x79, 0xa5, 0xe9, 0xf9, 0x01, 0xbc, 0x6e, 0x50, 0x1c, 0x24, 0x88, 0xc9, 0x6b, 0xcc, 0x9c,
	0xa5, 0xf3, 0xee, 0x37, 0xf3, 0x33, 0x3b, 0x09, 0x12, 0x21, 0x3f, 0x0a, 0x1c, 0xce, 0x58, 0xd2,
	0xd9, 0xe7, 0xce, 0x23, 0x58, 0xbb, 0xe2, 0xd9, 0x84, 0x8d, 0xe4, 0x9a, 0x6b, 0xd9, 0xe7, 0xb6,
	0x35, 0xc2, 0x8e, 0x78, 0x8d, 0xcd, 0xe0, 0x8a, 0x37, 0xf4, 0xb1, 0x3b, 0x8e, 0xe6, 0xf3, 0x96,
	0xe7, 0x76, 0x02, 0xef, 0xd4, 0xa6, 0x62, 0x0e, 0xad, 0x83, 0xd8, 0xf0, 0xce, 0x49, 0xe0, 0xb2,
	0x0b, 0x95, 0xea, 0x52, 0x9b, 0x8e, 0xc5, 0xfc, 0xce, 0x53, 0x58, 0xbf, 0x2a, 0xa6, 0x68, 0x03,
	0x90, 0xdc, 0xa7, 0xf6, 0x39, 0x91, 0x5d, 0x2b, 0x36, 0x90, 0x58, 0xe2, 0x35, 0x74, 0x17, 0x5e,
	0xeb, 0x10, 0x97, 0x19, 0x3b, 0x31, 0x9b, 0xa9, 0x74, 0x08, 0x6b, 0x86, 0xd1, 0x6d, 0x4a, 0x73,
	0x31, 0x67, 0x15, 0x73, 0x3b, 0x27, 0x80, 0x2e, 0xbf, 0x69, 0x32, 0xb3, 0xd9, 0x9c, 0x94, 0xde,
	0x2c, 0x44, 0x58, 0x91, 0x9b, 0xcd, 0xf6, 0x23, 0xb3, 0xa3, 0x29, 0x0f, 0x7a, 0x1d, 0x51, 0x60,
	0xf7, 0x8f, 0x08, 0x52, 0x57, 0x9b, 0xda, 0xb1, 0xaa, 0xb3, 0x5b, 0x13, 0x33, 0x89, 0xc3, 0x0c,
	0xb5, 0x79, 0x60, 0xc6, 0xb7, 0x09, 0x31, 0xbf, 0xf3, 0x4b, 0x01, 0xc4, 0x8b, 0x2f, 0x62, 0x48,
	0x82, 0xf5, 0x09, 0xac, 0xe5, 0x51, 0x1e, 0x70, 0xee, 0xc1, 0x06, 0xa0, 0x03, 0x42, 0x9c, 0xc6,
	0x68, 0x64, 0x4d, 0x28, 0x44, 0x81, 0xc5, 0x27, 0x3a, 0x5c, 0x33, 0xd0, 0x1c, 0xba, 0x09, 0x6b,
	0x0a, 0xa6, 0xd8, 0xf1, 0x06, 0xa3, 0x2c, 0x22, 0xcf, 0x66, 0xbd, 0x9a, 0xe2, 0x05, 0x7e, 0x06,
	0x58, 0xd8, 0xf9, 0x5d, 0x0e, 0x16, 0xe3, 0x27, 0xd0, 0xeb, 0x50, 0x3e, 0x6e, 0x77, 0xd9, 0x24,
	0xa8, 0x6b, 0x8d, 0xc3, 0x2e, 0x73, 0x73, 0x0d, 0x56, 0x95, 0xa6, 0x76, 0x24, 0x77, 0x55, 0xf3,
	0xe3, 0x9e, 0xd1, 0x65, 0xd6, 0xf3, 0xbb, 0xe1, 0xa1, 0x2a, 0x37, 0xbb, 0x87, 0x8a, 0xac, 0xab,
	0x62, 0x8e, 0x79, 0xae, 0xab, 0x07, 0xbd, 0x86, 0xaa, 0x9a, 0x8a, 0xae, 0x19, 0x1a, 0xeb, 0x68,
	0x0c, 0x26, 0x2b, 0x9a, 0xdc, 0x4c, 0xf9, 0x0a, 0x3c, 0xf5, 0x2d, 0xa5, 0x7d, 0xa4, 0x9a, 0x0d,
	0xb9, 0x23, 0x2e, 0xb0, 0x18, 0x36, 0x7a, 0x2d, 0xf3, 0x58, 0x6b, 0x37, 0xd5, 0x96, 0xa2, 0x8a,
	0x8b, 0x68, 0x13, 0x36, 0x0e, 0x7b, 0xad, 0x86, 0xaa, 0x9b, 0x07, 0xed, 0x76, 0xdd, 0xd4, 0x5a,
	0x86, 0xaa, 0xf4, 0x74, 0xad, 0xfb, 0x58, 0x5c, 0x62, 0x59, 0x52, 0x1f, 0xf6, 0xe4, 0x26, 0x5b,
	0x15, 0x59, 0x3b, 0x6d, 0xd6, 0x1a, 0xdd, 0x87, 0x62, 0x89, 0x15, 0x8d, 0x5a, 0xef, 0x29, 0xfc,
	0x56, 0x27, 0x02, 0x0f, 0x56, 0x5b, 0x57, 0xd4, 0xba, 0xa9, 0x1c, 0x6a, 0xcd, 0xba, 0xd9, 0x94,
	0x6b, 0x6d, 0x5d, 0x5c, 0xe6, 0x61, 0xe1, 0x00, 0xb9, 0xd6, 0x33, 0x54, 0xb3, 0xa5, 0x36, 0x9a,
	0xaa, 0xd2, 0x15, 0x57, 0x98, 0x19, 0x8a, 0x76, 0xac, 0x35, 0x13, 0xaf, 0xcb, 0xac, 0x26, 0x3b,
	0xec, 0x6e, 0xdd, 0x7d, 0x2c, 0x56, 0xf6, 0xff, 0xba, 0x38, 0xf9, 0xb9, 0x91, 0xb4, 0xf5, 0x00,
	0xca, 0x53, 0xad, 0x13, 0xcd, 0x3a, 0x00, 0xae, 0x6a, 0xe1, 0x9b, 0xef, 0xcc, 0xcf, 0x10, 0x1f,
	0x04, 0x01, 0x94, 0xa7, 0x1a, 0xca, 0x4c, 0x9d, 0x57, 0xf5, 0xbd, 0x99, 0x3a, 0xaf, 0xee, 0x55,
	0x01, 0x94, 0xa7, 0x3a, 0xef, 0x4c, 0x9d, 0x57, 0xb5, 0xf6, 0x99, 0x3a, 0xaf, 0x6e, 0xea, 0x36,
	0xc0, 0xe4, 0xf0, 0x47, 0x6f, 0xcf, 0xe0, 0xbf, 0xd4, 0x00, 0x37, 0xef, 0xcd, 0x49, 0x1d, 0xab,
	0x72, 0x60, 0x39, 0xd3, 0x67, 0xd0, 0x7c, 0xdc, 0x49, 0xab, 0xd8, 0xdc, 0x9d, 0x97, 0x3c, 0xd6,
	0xf6, 0x05, 0x88, 0x17, 0x4f, 0x79, 0xf4, 0x3f, 0xde, 0x6f, 0xaf, 0x6a, 0x51, 0x9b, 0xf7, 0x5f,
	0x88, 0x27, 0x56, 0xfe, 0x2b, 0x01, 0x36, 0xae, 0x3e, 0xc1, 0xd1, 0x07, 0xb3, 0xe4, 0xcd, 0x6a,
	0x1a, 0x9b, 0x2f, 0xc3, 0xc9, 0xdb, 0x45, 0x8d, 0xfe, 0xfb, 0xeb, 0x3b, 0xc2, 0xef, 0x9f, 0xdf,
	0x11, 0xfe, 0xf8, 0xfc, 0x8e, 0xf0, 0xa7, 0xe7, 0x77, 0x84, 0x3f, 0x3f, 0xbf, 0x23, 0xfc, 0xfd,
	0xf9, 0x1d, 0xe1, 0xc9, 0x93, 0xcc, 0x7f, 0xc8, 0xb1, 0x87, 0xdd, 0xb1, 0x37, 0x3c, 0xc1, 0x7e,
	0xe0, 0xbd, 0xbb, 0x7f, 0xff, 0xbd, 0xbd, 0xe4, 0x14, 0x0c, 0xf7, 0xc2, 0xa0, 0x7f, 0xe9, 0x27,
	0xe7, 0xde, 0xd5, 0xff, 0x3e, 0x53, 0x9b, 0x4e, 0x16, 0xf9, 0xd7, 0xfd, 0xff, 0x06, 0x00, 0x00,
	0xff, 0xff, 0x32, 0x83, 0xe7, 0xca, 0x25, 0x1d, 0x00, 0x00,
}

func (this *MerchantAccount) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*MerchantAccount)
	if !ok {
		that2, ok := that.(MerchantAccount)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Id != that1.Id {
		return false
	}
	if len(this.Owners) != len(that1.Owners) {
		return false
	}
	for i := range this.Owners {
		if !this.Owners[i].Equal(that1.Owners[i]) {
			return false
		}
	}
	if this.BusinessName != that1.BusinessName {
		return false
	}
	if this.BusinessEmail != that1.BusinessEmail {
		return false
	}
	if this.EmployerId != that1.EmployerId {
		return false
	}
	if this.EstimateAnnualRevenue != that1.EstimateAnnualRevenue {
		return false
	}
	if !this.Address.Equal(that1.Address) {
		return false
	}
	if len(this.ItemsOrServicesSold) != len(that1.ItemsOrServicesSold) {
		return false
	}
	for i := range this.ItemsOrServicesSold {
		if !this.ItemsOrServicesSold[i].Equal(that1.ItemsOrServicesSold[i]) {
			return false
		}
	}
	if len(this.FulfillmentOptions) != len(that1.FulfillmentOptions) {
		return false
	}
	for i := range this.FulfillmentOptions {
		if this.FulfillmentOptions[i] != that1.FulfillmentOptions[i] {
			return false
		}
	}
	if !this.ShopSettings.Equal(that1.ShopSettings) {
		return false
	}
	if len(this.SupportedCauses) != len(that1.SupportedCauses) {
		return false
	}
	for i := range this.SupportedCauses {
		if this.SupportedCauses[i] != that1.SupportedCauses[i] {
			return false
		}
	}
	if this.Bio != that1.Bio {
		return false
	}
	if this.Headline != that1.Headline {
		return false
	}
	if this.PhoneNumber != that1.PhoneNumber {
		return false
	}
	if len(this.Tags) != len(that1.Tags) {
		return false
	}
	for i := range this.Tags {
		if !this.Tags[i].Equal(that1.Tags[i]) {
			return false
		}
	}
	if this.StripeConnectedAccountId != that1.StripeConnectedAccountId {
		return false
	}
	if this.PaymentsAccountId != that1.PaymentsAccountId {
		return false
	}
	if this.AuthnAccountId != that1.AuthnAccountId {
		return false
	}
	if this.OnboardingState != that1.OnboardingState {
		return false
	}
	if this.AccountState != that1.AccountState {
		return false
	}
	if this.AccountType != that1.AccountType {
		return false
	}
	if this.Password != that1.Password {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *Settings) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Settings)
	if !ok {
		that2, ok := that.(Settings)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Id != that1.Id {
		return false
	}
	if !this.PaymentDetails.Equal(that1.PaymentDetails) {
		return false
	}
	if len(this.ShopPolicy) != len(that1.ShopPolicy) {
		return false
	}
	for i := range this.ShopPolicy {
		if !this.ShopPolicy[i].Equal(that1.ShopPolicy[i]) {
			return false
		}
	}
	if len(this.PrivacyPolicy) != len(that1.PrivacyPolicy) {
		return false
	}
	for i := range this.PrivacyPolicy {
		if !this.PrivacyPolicy[i].Equal(that1.PrivacyPolicy[i]) {
			return false
		}
	}
	if !this.ReturnPolicy.Equal(that1.ReturnPolicy) {
		return false
	}
	if !this.ShippingPolicy.Equal(that1.ShippingPolicy) {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *Settings_PaymentDetails) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Settings_PaymentDetails)
	if !ok {
		that2, ok := that.(Settings_PaymentDetails)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Id != that1.Id {
		return false
	}
	if len(this.AcceptableCreditCardTypes) != len(that1.AcceptableCreditCardTypes) {
		return false
	}
	for i := range this.AcceptableCreditCardTypes {
		if this.AcceptableCreditCardTypes[i] != that1.AcceptableCreditCardTypes[i] {
			return false
		}
	}
	if this.PrimaryCurrencyCode != that1.PrimaryCurrencyCode {
		return false
	}
	if len(this.EnabledCurrencyCodes) != len(that1.EnabledCurrencyCodes) {
		return false
	}
	for i := range this.EnabledCurrencyCodes {
		if this.EnabledCurrencyCodes[i] != that1.EnabledCurrencyCodes[i] {
			return false
		}
	}
	if len(this.SupportedDigitalWallets) != len(that1.SupportedDigitalWallets) {
		return false
	}
	for i := range this.SupportedDigitalWallets {
		if this.SupportedDigitalWallets[i] != that1.SupportedDigitalWallets[i] {
			return false
		}
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *ItemSold) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ItemSold)
	if !ok {
		that2, ok := that.(ItemSold)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Id != that1.Id {
		return false
	}
	if this.Type != that1.Type {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *Address) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Address)
	if !ok {
		that2, ok := that.(Address)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Id != that1.Id {
		return false
	}
	if this.Address != that1.Address {
		return false
	}
	if this.Unit != that1.Unit {
		return false
	}
	if this.ZipCode != that1.ZipCode {
		return false
	}
	if this.City != that1.City {
		return false
	}
	if this.State != that1.State {
		return false
	}
	if this.Longitude != that1.Longitude {
		return false
	}
	if this.Lattitude != that1.Lattitude {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *Owner) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Owner)
	if !ok {
		that2, ok := that.(Owner)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Id != that1.Id {
		return false
	}
	if this.FirstName != that1.FirstName {
		return false
	}
	if this.LastName != that1.LastName {
		return false
	}
	if this.Email != that1.Email {
		return false
	}
	if this.Country != that1.Country {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *Tags) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Tags)
	if !ok {
		that2, ok := that.(Tags)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Id != that1.Id {
		return false
	}
	if this.TagName != that1.TagName {
		return false
	}
	if this.TagDescription != that1.TagDescription {
		return false
	}
	if len(this.Metadata) != len(that1.Metadata) {
		return false
	}
	for i := range this.Metadata {
		if this.Metadata[i] != that1.Metadata[i] {
			return false
		}
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *Policy) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Policy)
	if !ok {
		that2, ok := that.(Policy)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Id != that1.Id {
		return false
	}
	if this.Body != that1.Body {
		return false
	}
	if this.Handle != that1.Handle {
		return false
	}
	if this.Title != that1.Title {
		return false
	}
	if len(this.Tags) != len(that1.Tags) {
		return false
	}
	for i := range this.Tags {
		if !this.Tags[i].Equal(that1.Tags[i]) {
			return false
		}
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *ReturnPolicy) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReturnPolicy)
	if !ok {
		that2, ok := that.(ReturnPolicy)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Id != that1.Id {
		return false
	}
	if !this.PolicyMeta.Equal(that1.PolicyMeta) {
		return false
	}
	if this.ContactWithinDaysOfDelivery != that1.ContactWithinDaysOfDelivery {
		return false
	}
	if this.ShipWithDaysOfDelivery != that1.ShipWithDaysOfDelivery {
		return false
	}
	if this.RequestCancellationWithinDaysOfDelivery != that1.RequestCancellationWithinDaysOfDelivery {
		return false
	}
	if len(this.ItemsNotToBeReturned) != len(that1.ItemsNotToBeReturned) {
		return false
	}
	for i := range this.ItemsNotToBeReturned {
		if this.ItemsNotToBeReturned[i] != that1.ItemsNotToBeReturned[i] {
			return false
		}
	}
	if len(this.ConditionsOfReturn) != len(that1.ConditionsOfReturn) {
		return false
	}
	for i := range this.ConditionsOfReturn {
		if this.ConditionsOfReturn[i] != that1.ConditionsOfReturn[i] {
			return false
		}
	}
	if this.Details != that1.Details {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *ShippingPolicy) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ShippingPolicy)
	if !ok {
		that2, ok := that.(ShippingPolicy)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Id != that1.Id {
		return false
	}
	if !this.PolicyMeta.Equal(that1.PolicyMeta) {
		return false
	}
	if this.PostalService != that1.PostalService {
		return false
	}
	if this.DaysOrderShipsIn != that1.DaysOrderShipsIn {
		return false
	}
	if this.Details != that1.Details {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *CreateAccountRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateAccountRequest)
	if !ok {
		that2, ok := that.(CreateAccountRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Account.Equal(that1.Account) {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *CreateAccountResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateAccountResponse)
	if !ok {
		that2, ok := that.(CreateAccountResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.AccountId != that1.AccountId {
		return false
	}
	if this.JwtToken != that1.JwtToken {
		return false
	}
	if this.StripeUrl != that1.StripeUrl {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *DeleteAccountRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*DeleteAccountRequest)
	if !ok {
		that2, ok := that.(DeleteAccountRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.AccountId != that1.AccountId {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *DeleteAccountResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*DeleteAccountResponse)
	if !ok {
		that2, ok := that.(DeleteAccountResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.IsDeleted != that1.IsDeleted {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *UpdateAccountRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*UpdateAccountRequest)
	if !ok {
		that2, ok := that.(UpdateAccountRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.AccountId != that1.AccountId {
		return false
	}
	if !this.Account.Equal(that1.Account) {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *UpdateAccountResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*UpdateAccountResponse)
	if !ok {
		that2, ok := that.(UpdateAccountResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Account.Equal(that1.Account) {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *GetAccountRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetAccountRequest)
	if !ok {
		that2, ok := that.(GetAccountRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.AccountId != that1.AccountId {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *GetAccountResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetAccountResponse)
	if !ok {
		that2, ok := that.(GetAccountResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Account.Equal(that1.Account) {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *GetAccountsRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetAccountsRequest)
	if !ok {
		that2, ok := that.(GetAccountsRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.AccountIds) != len(that1.AccountIds) {
		return false
	}
	for i := range this.AccountIds {
		if this.AccountIds[i] != that1.AccountIds[i] {
			return false
		}
	}
	if this.Limit != that1.Limit {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *GetAccountsResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetAccountsResponse)
	if !ok {
		that2, ok := that.(GetAccountsResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Accounts) != len(that1.Accounts) {
		return false
	}
	for i := range this.Accounts {
		if !this.Accounts[i].Equal(that1.Accounts[i]) {
			return false
		}
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *SetAccountStatusRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SetAccountStatusRequest)
	if !ok {
		that2, ok := that.(SetAccountStatusRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.AccountId != that1.AccountId {
		return false
	}
	if this.AccountState != that1.AccountState {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *SetAccountStatusResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SetAccountStatusResponse)
	if !ok {
		that2, ok := that.(SetAccountStatusResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Account.Equal(that1.Account) {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *StartAccountOnboardingRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*StartAccountOnboardingRequest)
	if !ok {
		that2, ok := that.(StartAccountOnboardingRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.AccountId != that1.AccountId {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *StartAccountOnboardingRespone) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*StartAccountOnboardingRespone)
	if !ok {
		that2, ok := that.(StartAccountOnboardingRespone)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Url != that1.Url {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// MerchantServiceClient is the client API for MerchantService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MerchantServiceClient interface {
	// Attempts to create a merchant account
	CreateAccount(ctx context.Context, in *CreateAccountRequest, opts ...grpc.CallOption) (*CreateAccountResponse, error)
	// updates a merchant account
	UpdateAccount(ctx context.Context, in *UpdateAccountRequest, opts ...grpc.CallOption) (*UpdateAccountResponse, error)
	// delete a merchant account
	DeleteAccount(ctx context.Context, in *DeleteAccountRequest, opts ...grpc.CallOption) (*DeleteAccountResponse, error)
	// get a merchant account
	GetAccount(ctx context.Context, in *GetAccountRequest, opts ...grpc.CallOption) (*GetAccountResponse, error)
	// get a set of merchant accounts
	GetAccounts(ctx context.Context, in *GetAccountsRequest, opts ...grpc.CallOption) (*GetAccountsResponse, error)
	// sets the account status of
	SetAccountStatus(ctx context.Context, in *SetAccountStatusRequest, opts ...grpc.CallOption) (*SetAccountStatusResponse, error)
	// starts the account onboarding process
	StartAccountOnboarding(ctx context.Context, in *StartAccountOnboardingRequest, opts ...grpc.CallOption) (*StartAccountOnboardingRespone, error)
}

type merchantServiceClient struct {
	cc *grpc.ClientConn
}

func NewMerchantServiceClient(cc *grpc.ClientConn) MerchantServiceClient {
	return &merchantServiceClient{cc}
}

func (c *merchantServiceClient) CreateAccount(ctx context.Context, in *CreateAccountRequest, opts ...grpc.CallOption) (*CreateAccountResponse, error) {
	out := new(CreateAccountResponse)
	err := c.cc.Invoke(ctx, "/merchant_service_proto_v1.MerchantService/CreateAccount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *merchantServiceClient) UpdateAccount(ctx context.Context, in *UpdateAccountRequest, opts ...grpc.CallOption) (*UpdateAccountResponse, error) {
	out := new(UpdateAccountResponse)
	err := c.cc.Invoke(ctx, "/merchant_service_proto_v1.MerchantService/UpdateAccount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *merchantServiceClient) DeleteAccount(ctx context.Context, in *DeleteAccountRequest, opts ...grpc.CallOption) (*DeleteAccountResponse, error) {
	out := new(DeleteAccountResponse)
	err := c.cc.Invoke(ctx, "/merchant_service_proto_v1.MerchantService/DeleteAccount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *merchantServiceClient) GetAccount(ctx context.Context, in *GetAccountRequest, opts ...grpc.CallOption) (*GetAccountResponse, error) {
	out := new(GetAccountResponse)
	err := c.cc.Invoke(ctx, "/merchant_service_proto_v1.MerchantService/GetAccount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *merchantServiceClient) GetAccounts(ctx context.Context, in *GetAccountsRequest, opts ...grpc.CallOption) (*GetAccountsResponse, error) {
	out := new(GetAccountsResponse)
	err := c.cc.Invoke(ctx, "/merchant_service_proto_v1.MerchantService/GetAccounts", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *merchantServiceClient) SetAccountStatus(ctx context.Context, in *SetAccountStatusRequest, opts ...grpc.CallOption) (*SetAccountStatusResponse, error) {
	out := new(SetAccountStatusResponse)
	err := c.cc.Invoke(ctx, "/merchant_service_proto_v1.MerchantService/SetAccountStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *merchantServiceClient) StartAccountOnboarding(ctx context.Context, in *StartAccountOnboardingRequest, opts ...grpc.CallOption) (*StartAccountOnboardingRespone, error) {
	out := new(StartAccountOnboardingRespone)
	err := c.cc.Invoke(ctx, "/merchant_service_proto_v1.MerchantService/StartAccountOnboarding", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MerchantServiceServer is the server API for MerchantService service.
type MerchantServiceServer interface {
	// Attempts to create a merchant account
	CreateAccount(context.Context, *CreateAccountRequest) (*CreateAccountResponse, error)
	// updates a merchant account
	UpdateAccount(context.Context, *UpdateAccountRequest) (*UpdateAccountResponse, error)
	// delete a merchant account
	DeleteAccount(context.Context, *DeleteAccountRequest) (*DeleteAccountResponse, error)
	// get a merchant account
	GetAccount(context.Context, *GetAccountRequest) (*GetAccountResponse, error)
	// get a set of merchant accounts
	GetAccounts(context.Context, *GetAccountsRequest) (*GetAccountsResponse, error)
	// sets the account status of
	SetAccountStatus(context.Context, *SetAccountStatusRequest) (*SetAccountStatusResponse, error)
	// starts the account onboarding process
	StartAccountOnboarding(context.Context, *StartAccountOnboardingRequest) (*StartAccountOnboardingRespone, error)
}

// UnimplementedMerchantServiceServer can be embedded to have forward compatible implementations.
type UnimplementedMerchantServiceServer struct {
}

func (*UnimplementedMerchantServiceServer) CreateAccount(ctx context.Context, req *CreateAccountRequest) (*CreateAccountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAccount not implemented")
}
func (*UnimplementedMerchantServiceServer) UpdateAccount(ctx context.Context, req *UpdateAccountRequest) (*UpdateAccountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateAccount not implemented")
}
func (*UnimplementedMerchantServiceServer) DeleteAccount(ctx context.Context, req *DeleteAccountRequest) (*DeleteAccountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteAccount not implemented")
}
func (*UnimplementedMerchantServiceServer) GetAccount(ctx context.Context, req *GetAccountRequest) (*GetAccountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAccount not implemented")
}
func (*UnimplementedMerchantServiceServer) GetAccounts(ctx context.Context, req *GetAccountsRequest) (*GetAccountsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAccounts not implemented")
}
func (*UnimplementedMerchantServiceServer) SetAccountStatus(ctx context.Context, req *SetAccountStatusRequest) (*SetAccountStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetAccountStatus not implemented")
}
func (*UnimplementedMerchantServiceServer) StartAccountOnboarding(ctx context.Context, req *StartAccountOnboardingRequest) (*StartAccountOnboardingRespone, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartAccountOnboarding not implemented")
}

func RegisterMerchantServiceServer(s *grpc.Server, srv MerchantServiceServer) {
	s.RegisterService(&_MerchantService_serviceDesc, srv)
}

func _MerchantService_CreateAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MerchantServiceServer).CreateAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/merchant_service_proto_v1.MerchantService/CreateAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MerchantServiceServer).CreateAccount(ctx, req.(*CreateAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MerchantService_UpdateAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MerchantServiceServer).UpdateAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/merchant_service_proto_v1.MerchantService/UpdateAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MerchantServiceServer).UpdateAccount(ctx, req.(*UpdateAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MerchantService_DeleteAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MerchantServiceServer).DeleteAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/merchant_service_proto_v1.MerchantService/DeleteAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MerchantServiceServer).DeleteAccount(ctx, req.(*DeleteAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MerchantService_GetAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MerchantServiceServer).GetAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/merchant_service_proto_v1.MerchantService/GetAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MerchantServiceServer).GetAccount(ctx, req.(*GetAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MerchantService_GetAccounts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAccountsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MerchantServiceServer).GetAccounts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/merchant_service_proto_v1.MerchantService/GetAccounts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MerchantServiceServer).GetAccounts(ctx, req.(*GetAccountsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MerchantService_SetAccountStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetAccountStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MerchantServiceServer).SetAccountStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/merchant_service_proto_v1.MerchantService/SetAccountStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MerchantServiceServer).SetAccountStatus(ctx, req.(*SetAccountStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MerchantService_StartAccountOnboarding_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StartAccountOnboardingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MerchantServiceServer).StartAccountOnboarding(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/merchant_service_proto_v1.MerchantService/StartAccountOnboarding",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MerchantServiceServer).StartAccountOnboarding(ctx, req.(*StartAccountOnboardingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _MerchantService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "merchant_service_proto_v1.MerchantService",
	HandlerType: (*MerchantServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateAccount",
			Handler:    _MerchantService_CreateAccount_Handler,
		},
		{
			MethodName: "UpdateAccount",
			Handler:    _MerchantService_UpdateAccount_Handler,
		},
		{
			MethodName: "DeleteAccount",
			Handler:    _MerchantService_DeleteAccount_Handler,
		},
		{
			MethodName: "GetAccount",
			Handler:    _MerchantService_GetAccount_Handler,
		},
		{
			MethodName: "GetAccounts",
			Handler:    _MerchantService_GetAccounts_Handler,
		},
		{
			MethodName: "SetAccountStatus",
			Handler:    _MerchantService_SetAccountStatus_Handler,
		},
		{
			MethodName: "StartAccountOnboarding",
			Handler:    _MerchantService_StartAccountOnboarding_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/merchant_service.proto",
}

func (m *MerchantAccount) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MerchantAccount) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MerchantAccount) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Password) > 0 {
		i -= len(m.Password)
		copy(dAtA[i:], m.Password)
		i = encodeVarintMerchantService(dAtA, i, uint64(len(m.Password)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xb2
	}
	if m.AccountType != 0 {
		i = encodeVarintMerchantService(dAtA, i, uint64(m.AccountType))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xa8
	}
	if m.AccountState != 0 {
		i = encodeVarintMerchantService(dAtA, i, uint64(m.AccountState))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xa0
	}
	if m.OnboardingState != 0 {
		i = encodeVarintMerchantService(dAtA, i, uint64(m.OnboardingState))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x98
	}
	if m.AuthnAccountId != 0 {
		i = encodeVarintMerchantService(dAtA, i, uint64(m.AuthnAccountId))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x90
	}
	if m.PaymentsAccountId != 0 {
		i = encodeVarintMerchantService(dAtA, i, uint64(m.PaymentsAccountId))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x88
	}
	if m.StripeConnectedAccountId != 0 {
		i = encodeVarintMerchantService(dAtA, i, uint64(m.StripeConnectedAccountId))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x80
	}
	if len(m.Tags) > 0 {
		for iNdEx := len(m.Tags) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Tags[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintMerchantService(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x7a
		}
	}
	if len(m.PhoneNumber) > 0 {
		i -= len(m.PhoneNumber)
		copy(dAtA[i:], m.PhoneNumber)
		i = encodeVarintMerchantService(dAtA, i, uint64(len(m.PhoneNumber)))
		i--
		dAtA[i] = 0x72
	}
	if len(m.Headline) > 0 {
		i -= len(m.Headline)
		copy(dAtA[i:], m.Headline)
		i = encodeVarintMerchantService(dAtA, i, uint64(len(m.Headline)))
		i--
		dAtA[i] = 0x6a
	}
	if len(m.Bio) > 0 {
		i -= len(m.Bio)
		copy(dAtA[i:], m.Bio)
		i = encodeVarintMerchantService(dAtA, i, uint64(len(m.Bio)))
		i--
		dAtA[i] = 0x62
	}
	if len(m.SupportedCauses) > 0 {
		dAtA2 := make([]byte, len(m.SupportedCauses)*10)
		var j1 int
		for _, num := range m.SupportedCauses {
			for num >= 1<<7 {
				dAtA2[j1] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j1++
			}
			dAtA2[j1] = uint8(num)
			j1++
		}
		i -= j1
		copy(dAtA[i:], dAtA2[:j1])
		i = encodeVarintMerchantService(dAtA, i, uint64(j1))
		i--
		dAtA[i] = 0x5a
	}
	if m.ShopSettings != nil {
		{
			size, err := m.ShopSettings.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMerchantService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x52
	}
	if len(m.FulfillmentOptions) > 0 {
		dAtA5 := make([]byte, len(m.FulfillmentOptions)*10)
		var j4 int
		for _, num := range m.FulfillmentOptions {
			for num >= 1<<7 {
				dAtA5[j4] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j4++
			}
			dAtA5[j4] = uint8(num)
			j4++
		}
		i -= j4
		copy(dAtA[i:], dAtA5[:j4])
		i = encodeVarintMerchantService(dAtA, i, uint64(j4))
		i--
		dAtA[i] = 0x4a
	}
	if len(m.ItemsOrServicesSold) > 0 {
		for iNdEx := len(m.ItemsOrServicesSold) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ItemsOrServicesSold[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintMerchantService(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x42
		}
	}
	if m.Address != nil {
		{
			size, err := m.Address.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMerchantService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3a
	}
	if len(m.EstimateAnnualRevenue) > 0 {
		i -= len(m.EstimateAnnualRevenue)
		copy(dAtA[i:], m.EstimateAnnualRevenue)
		i = encodeVarintMerchantService(dAtA, i, uint64(len(m.EstimateAnnualRevenue)))
		i--
		dAtA[i] = 0x32
	}
	if m.EmployerId != 0 {
		i = encodeVarintMerchantService(dAtA, i, uint64(m.EmployerId))
		i--
		dAtA[i] = 0x28
	}
	if len(m.BusinessEmail) > 0 {
		i -= len(m.BusinessEmail)
		copy(dAtA[i:], m.BusinessEmail)
		i = encodeVarintMerchantService(dAtA, i, uint64(len(m.BusinessEmail)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.BusinessName) > 0 {
		i -= len(m.BusinessName)
		copy(dAtA[i:], m.BusinessName)
		i = encodeVarintMerchantService(dAtA, i, uint64(len(m.BusinessName)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Owners) > 0 {
		for iNdEx := len(m.Owners) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Owners[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintMerchantService(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if m.Id != 0 {
		i = encodeVarintMerchantService(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Settings) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Settings) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Settings) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.ShippingPolicy != nil {
		{
			size, err := m.ShippingPolicy.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMerchantService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	if m.ReturnPolicy != nil {
		{
			size, err := m.ReturnPolicy.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMerchantService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if len(m.PrivacyPolicy) > 0 {
		for iNdEx := len(m.PrivacyPolicy) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.PrivacyPolicy[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintMerchantService(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	if len(m.ShopPolicy) > 0 {
		for iNdEx := len(m.ShopPolicy) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ShopPolicy[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintMerchantService(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if m.PaymentDetails != nil {
		{
			size, err := m.PaymentDetails.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMerchantService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Id != 0 {
		i = encodeVarintMerchantService(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Settings_PaymentDetails) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Settings_PaymentDetails) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Settings_PaymentDetails) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.SupportedDigitalWallets) > 0 {
		dAtA11 := make([]byte, len(m.SupportedDigitalWallets)*10)
		var j10 int
		for _, num := range m.SupportedDigitalWallets {
			for num >= 1<<7 {
				dAtA11[j10] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j10++
			}
			dAtA11[j10] = uint8(num)
			j10++
		}
		i -= j10
		copy(dAtA[i:], dAtA11[:j10])
		i = encodeVarintMerchantService(dAtA, i, uint64(j10))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.EnabledCurrencyCodes) > 0 {
		dAtA13 := make([]byte, len(m.EnabledCurrencyCodes)*10)
		var j12 int
		for _, num := range m.EnabledCurrencyCodes {
			for num >= 1<<7 {
				dAtA13[j12] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j12++
			}
			dAtA13[j12] = uint8(num)
			j12++
		}
		i -= j12
		copy(dAtA[i:], dAtA13[:j12])
		i = encodeVarintMerchantService(dAtA, i, uint64(j12))
		i--
		dAtA[i] = 0x22
	}
	if m.PrimaryCurrencyCode != 0 {
		i = encodeVarintMerchantService(dAtA, i, uint64(m.PrimaryCurrencyCode))
		i--
		dAtA[i] = 0x18
	}
	if len(m.AcceptableCreditCardTypes) > 0 {
		dAtA15 := make([]byte, len(m.AcceptableCreditCardTypes)*10)
		var j14 int
		for _, num := range m.AcceptableCreditCardTypes {
			for num >= 1<<7 {
				dAtA15[j14] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j14++
			}
			dAtA15[j14] = uint8(num)
			j14++
		}
		i -= j14
		copy(dAtA[i:], dAtA15[:j14])
		i = encodeVarintMerchantService(dAtA, i, uint64(j14))
		i--
		dAtA[i] = 0x12
	}
	if m.Id != 0 {
		i = encodeVarintMerchantService(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ItemSold) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ItemSold) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ItemSold) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Type != 0 {
		i = encodeVarintMerchantService(dAtA, i, uint64(m.Type))
		i--
		dAtA[i] = 0x10
	}
	if m.Id != 0 {
		i = encodeVarintMerchantService(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Address) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Address) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Address) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Lattitude) > 0 {
		i -= len(m.Lattitude)
		copy(dAtA[i:], m.Lattitude)
		i = encodeVarintMerchantService(dAtA, i, uint64(len(m.Lattitude)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.Longitude) > 0 {
		i -= len(m.Longitude)
		copy(dAtA[i:], m.Longitude)
		i = encodeVarintMerchantService(dAtA, i, uint64(len(m.Longitude)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.State) > 0 {
		i -= len(m.State)
		copy(dAtA[i:], m.State)
		i = encodeVarintMerchantService(dAtA, i, uint64(len(m.State)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.City) > 0 {
		i -= len(m.City)
		copy(dAtA[i:], m.City)
		i = encodeVarintMerchantService(dAtA, i, uint64(len(m.City)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.ZipCode) > 0 {
		i -= len(m.ZipCode)
		copy(dAtA[i:], m.ZipCode)
		i = encodeVarintMerchantService(dAtA, i, uint64(len(m.ZipCode)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Unit) > 0 {
		i -= len(m.Unit)
		copy(dAtA[i:], m.Unit)
		i = encodeVarintMerchantService(dAtA, i, uint64(len(m.Unit)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintMerchantService(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0x12
	}
	if m.Id != 0 {
		i = encodeVarintMerchantService(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Owner) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Owner) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Owner) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Country) > 0 {
		i -= len(m.Country)
		copy(dAtA[i:], m.Country)
		i = encodeVarintMerchantService(dAtA, i, uint64(len(m.Country)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Email) > 0 {
		i -= len(m.Email)
		copy(dAtA[i:], m.Email)
		i = encodeVarintMerchantService(dAtA, i, uint64(len(m.Email)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.LastName) > 0 {
		i -= len(m.LastName)
		copy(dAtA[i:], m.LastName)
		i = encodeVarintMerchantService(dAtA, i, uint64(len(m.LastName)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.FirstName) > 0 {
		i -= len(m.FirstName)
		copy(dAtA[i:], m.FirstName)
		i = encodeVarintMerchantService(dAtA, i, uint64(len(m.FirstName)))
		i--
		dAtA[i] = 0x12
	}
	if m.Id != 0 {
		i = encodeVarintMerchantService(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Tags) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Tags) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Tags) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Metadata) > 0 {
		for iNdEx := len(m.Metadata) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Metadata[iNdEx])
			copy(dAtA[i:], m.Metadata[iNdEx])
			i = encodeVarintMerchantService(dAtA, i, uint64(len(m.Metadata[iNdEx])))
			i--
			dAtA[i] = 0x22
		}
	}
	if len(m.TagDescription) > 0 {
		i -= len(m.TagDescription)
		copy(dAtA[i:], m.TagDescription)
		i = encodeVarintMerchantService(dAtA, i, uint64(len(m.TagDescription)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.TagName) > 0 {
		i -= len(m.TagName)
		copy(dAtA[i:], m.TagName)
		i = encodeVarintMerchantService(dAtA, i, uint64(len(m.TagName)))
		i--
		dAtA[i] = 0x12
	}
	if m.Id != 0 {
		i = encodeVarintMerchantService(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Policy) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Policy) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Policy) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Tags) > 0 {
		for iNdEx := len(m.Tags) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Tags[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintMerchantService(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x2a
		}
	}
	if len(m.Title) > 0 {
		i -= len(m.Title)
		copy(dAtA[i:], m.Title)
		i = encodeVarintMerchantService(dAtA, i, uint64(len(m.Title)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Handle) > 0 {
		i -= len(m.Handle)
		copy(dAtA[i:], m.Handle)
		i = encodeVarintMerchantService(dAtA, i, uint64(len(m.Handle)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Body) > 0 {
		i -= len(m.Body)
		copy(dAtA[i:], m.Body)
		i = encodeVarintMerchantService(dAtA, i, uint64(len(m.Body)))
		i--
		dAtA[i] = 0x12
	}
	if m.Id != 0 {
		i = encodeVarintMerchantService(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ReturnPolicy) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReturnPolicy) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReturnPolicy) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Details) > 0 {
		i -= len(m.Details)
		copy(dAtA[i:], m.Details)
		i = encodeVarintMerchantService(dAtA, i, uint64(len(m.Details)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.ConditionsOfReturn) > 0 {
		for iNdEx := len(m.ConditionsOfReturn) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.ConditionsOfReturn[iNdEx])
			copy(dAtA[i:], m.ConditionsOfReturn[iNdEx])
			i = encodeVarintMerchantService(dAtA, i, uint64(len(m.ConditionsOfReturn[iNdEx])))
			i--
			dAtA[i] = 0x3a
		}
	}
	if len(m.ItemsNotToBeReturned) > 0 {
		for iNdEx := len(m.ItemsNotToBeReturned) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.ItemsNotToBeReturned[iNdEx])
			copy(dAtA[i:], m.ItemsNotToBeReturned[iNdEx])
			i = encodeVarintMerchantService(dAtA, i, uint64(len(m.ItemsNotToBeReturned[iNdEx])))
			i--
			dAtA[i] = 0x32
		}
	}
	if m.RequestCancellationWithinDaysOfDelivery != 0 {
		i = encodeVarintMerchantService(dAtA, i, uint64(m.RequestCancellationWithinDaysOfDelivery))
		i--
		dAtA[i] = 0x28
	}
	if m.ShipWithDaysOfDelivery != 0 {
		i = encodeVarintMerchantService(dAtA, i, uint64(m.ShipWithDaysOfDelivery))
		i--
		dAtA[i] = 0x20
	}
	if m.ContactWithinDaysOfDelivery != 0 {
		i = encodeVarintMerchantService(dAtA, i, uint64(m.ContactWithinDaysOfDelivery))
		i--
		dAtA[i] = 0x18
	}
	if m.PolicyMeta != nil {
		{
			size, err := m.PolicyMeta.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMerchantService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Id != 0 {
		i = encodeVarintMerchantService(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ShippingPolicy) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ShippingPolicy) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ShippingPolicy) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Details) > 0 {
		i -= len(m.Details)
		copy(dAtA[i:], m.Details)
		i = encodeVarintMerchantService(dAtA, i, uint64(len(m.Details)))
		i--
		dAtA[i] = 0x2a
	}
	if m.DaysOrderShipsIn != 0 {
		i = encodeVarintMerchantService(dAtA, i, uint64(m.DaysOrderShipsIn))
		i--
		dAtA[i] = 0x20
	}
	if m.PostalService != 0 {
		i = encodeVarintMerchantService(dAtA, i, uint64(m.PostalService))
		i--
		dAtA[i] = 0x18
	}
	if m.PolicyMeta != nil {
		{
			size, err := m.PolicyMeta.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMerchantService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Id != 0 {
		i = encodeVarintMerchantService(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *CreateAccountRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreateAccountRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateAccountRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Account != nil {
		{
			size, err := m.Account.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMerchantService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *CreateAccountResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreateAccountResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateAccountResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.StripeUrl) > 0 {
		i -= len(m.StripeUrl)
		copy(dAtA[i:], m.StripeUrl)
		i = encodeVarintMerchantService(dAtA, i, uint64(len(m.StripeUrl)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.JwtToken) > 0 {
		i -= len(m.JwtToken)
		copy(dAtA[i:], m.JwtToken)
		i = encodeVarintMerchantService(dAtA, i, uint64(len(m.JwtToken)))
		i--
		dAtA[i] = 0x12
	}
	if m.AccountId != 0 {
		i = encodeVarintMerchantService(dAtA, i, uint64(m.AccountId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *DeleteAccountRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DeleteAccountRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DeleteAccountRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.AccountId != 0 {
		i = encodeVarintMerchantService(dAtA, i, uint64(m.AccountId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *DeleteAccountResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DeleteAccountResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DeleteAccountResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.IsDeleted {
		i--
		if m.IsDeleted {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *UpdateAccountRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateAccountRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpdateAccountRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Account != nil {
		{
			size, err := m.Account.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMerchantService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.AccountId != 0 {
		i = encodeVarintMerchantService(dAtA, i, uint64(m.AccountId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *UpdateAccountResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateAccountResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpdateAccountResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Account != nil {
		{
			size, err := m.Account.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMerchantService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GetAccountRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetAccountRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetAccountRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.AccountId != 0 {
		i = encodeVarintMerchantService(dAtA, i, uint64(m.AccountId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GetAccountResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetAccountResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetAccountResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Account != nil {
		{
			size, err := m.Account.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMerchantService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GetAccountsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetAccountsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetAccountsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Limit != 0 {
		i = encodeVarintMerchantService(dAtA, i, uint64(m.Limit))
		i--
		dAtA[i] = 0x10
	}
	if len(m.AccountIds) > 0 {
		dAtA23 := make([]byte, len(m.AccountIds)*10)
		var j22 int
		for _, num := range m.AccountIds {
			for num >= 1<<7 {
				dAtA23[j22] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j22++
			}
			dAtA23[j22] = uint8(num)
			j22++
		}
		i -= j22
		copy(dAtA[i:], dAtA23[:j22])
		i = encodeVarintMerchantService(dAtA, i, uint64(j22))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GetAccountsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetAccountsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetAccountsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Accounts) > 0 {
		for iNdEx := len(m.Accounts) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Accounts[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintMerchantService(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *SetAccountStatusRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SetAccountStatusRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SetAccountStatusRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.AccountState != 0 {
		i = encodeVarintMerchantService(dAtA, i, uint64(m.AccountState))
		i--
		dAtA[i] = 0x10
	}
	if m.AccountId != 0 {
		i = encodeVarintMerchantService(dAtA, i, uint64(m.AccountId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *SetAccountStatusResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SetAccountStatusResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SetAccountStatusResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Account != nil {
		{
			size, err := m.Account.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMerchantService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *StartAccountOnboardingRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StartAccountOnboardingRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *StartAccountOnboardingRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.AccountId != 0 {
		i = encodeVarintMerchantService(dAtA, i, uint64(m.AccountId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *StartAccountOnboardingRespone) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StartAccountOnboardingRespone) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *StartAccountOnboardingRespone) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Url) > 0 {
		i -= len(m.Url)
		copy(dAtA[i:], m.Url)
		i = encodeVarintMerchantService(dAtA, i, uint64(len(m.Url)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintMerchantService(dAtA []byte, offset int, v uint64) int {
	offset -= sovMerchantService(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func NewPopulatedMerchantAccount(r randyMerchantService, easy bool) *MerchantAccount {
	this := &MerchantAccount{}
	this.Id = uint64(uint64(r.Uint32()))
	if r.Intn(5) != 0 {
		v1 := r.Intn(5)
		this.Owners = make([]*Owner, v1)
		for i := 0; i < v1; i++ {
			this.Owners[i] = NewPopulatedOwner(r, easy)
		}
	}
	this.BusinessName = string(randStringMerchantService(r))
	this.BusinessEmail = string(randStringMerchantService(r))
	this.EmployerId = uint64(uint64(r.Uint32()))
	this.EstimateAnnualRevenue = string(randStringMerchantService(r))
	if r.Intn(5) != 0 {
		this.Address = NewPopulatedAddress(r, easy)
	}
	if r.Intn(5) != 0 {
		v2 := r.Intn(5)
		this.ItemsOrServicesSold = make([]*ItemSold, v2)
		for i := 0; i < v2; i++ {
			this.ItemsOrServicesSold[i] = NewPopulatedItemSold(r, easy)
		}
	}
	v3 := r.Intn(10)
	this.FulfillmentOptions = make([]FulfillmentOptions, v3)
	for i := 0; i < v3; i++ {
		this.FulfillmentOptions[i] = FulfillmentOptions([]int32{0, 1, 2, 3}[r.Intn(4)])
	}
	if r.Intn(5) != 0 {
		this.ShopSettings = NewPopulatedSettings(r, easy)
	}
	v4 := r.Intn(10)
	this.SupportedCauses = make([]Causes, v4)
	for i := 0; i < v4; i++ {
		this.SupportedCauses[i] = Causes([]int32{0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14}[r.Intn(15)])
	}
	this.Bio = string(randStringMerchantService(r))
	this.Headline = string(randStringMerchantService(r))
	this.PhoneNumber = string(randStringMerchantService(r))
	if r.Intn(5) != 0 {
		v5 := r.Intn(5)
		this.Tags = make([]*Tags, v5)
		for i := 0; i < v5; i++ {
			this.Tags[i] = NewPopulatedTags(r, easy)
		}
	}
	this.StripeConnectedAccountId = uint32(r.Uint32())
	this.PaymentsAccountId = uint64(uint64(r.Uint32()))
	this.AuthnAccountId = uint64(uint64(r.Uint32()))
	this.OnboardingState = OnboardingStatus([]int32{0, 1, 2, 3, 4}[r.Intn(5)])
	this.AccountState = MerchantAccountState([]int32{0, 1, 2}[r.Intn(3)])
	this.AccountType = MerchantAccountType([]int32{0, 1, 2, 3}[r.Intn(4)])
	this.Password = string(randStringMerchantService(r))
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedMerchantService(r, 23)
	}
	return this
}

func NewPopulatedSettings(r randyMerchantService, easy bool) *Settings {
	this := &Settings{}
	this.Id = uint64(uint64(r.Uint32()))
	if r.Intn(5) != 0 {
		this.PaymentDetails = NewPopulatedSettings_PaymentDetails(r, easy)
	}
	if r.Intn(5) != 0 {
		v6 := r.Intn(5)
		this.ShopPolicy = make([]*Policy, v6)
		for i := 0; i < v6; i++ {
			this.ShopPolicy[i] = NewPopulatedPolicy(r, easy)
		}
	}
	if r.Intn(5) != 0 {
		v7 := r.Intn(5)
		this.PrivacyPolicy = make([]*Policy, v7)
		for i := 0; i < v7; i++ {
			this.PrivacyPolicy[i] = NewPopulatedPolicy(r, easy)
		}
	}
	if r.Intn(5) != 0 {
		this.ReturnPolicy = NewPopulatedReturnPolicy(r, easy)
	}
	if r.Intn(5) != 0 {
		this.ShippingPolicy = NewPopulatedShippingPolicy(r, easy)
	}
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedMerchantService(r, 7)
	}
	return this
}

func NewPopulatedSettings_PaymentDetails(r randyMerchantService, easy bool) *Settings_PaymentDetails {
	this := &Settings_PaymentDetails{}
	this.Id = uint64(uint64(r.Uint32()))
	v8 := r.Intn(10)
	this.AcceptableCreditCardTypes = make([]Settings_PaymentDetails_CreditCardBrand, v8)
	for i := 0; i < v8; i++ {
		this.AcceptableCreditCardTypes[i] = Settings_PaymentDetails_CreditCardBrand([]int32{0, 1, 2}[r.Intn(3)])
	}
	this.PrimaryCurrencyCode = Settings_PaymentDetails_CurrencyCode([]int32{0, 1}[r.Intn(2)])
	v9 := r.Intn(10)
	this.EnabledCurrencyCodes = make([]Settings_PaymentDetails_CurrencyCode, v9)
	for i := 0; i < v9; i++ {
		this.EnabledCurrencyCodes[i] = Settings_PaymentDetails_CurrencyCode([]int32{0, 1}[r.Intn(2)])
	}
	v10 := r.Intn(10)
	this.SupportedDigitalWallets = make([]Settings_PaymentDetails_DigitalWallets, v10)
	for i := 0; i < v10; i++ {
		this.SupportedDigitalWallets[i] = Settings_PaymentDetails_DigitalWallets([]int32{0, 1, 2, 3}[r.Intn(4)])
	}
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedMerchantService(r, 6)
	}
	return this
}

func NewPopulatedItemSold(r randyMerchantService, easy bool) *ItemSold {
	this := &ItemSold{}
	this.Id = uint64(uint64(r.Uint32()))
	this.Type = ItemSold_ItemsType([]int32{0, 1, 2, 3, 4, 5}[r.Intn(6)])
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedMerchantService(r, 3)
	}
	return this
}

func NewPopulatedAddress(r randyMerchantService, easy bool) *Address {
	this := &Address{}
	this.Id = uint64(uint64(r.Uint32()))
	this.Address = string(randStringMerchantService(r))
	this.Unit = string(randStringMerchantService(r))
	this.ZipCode = string(randStringMerchantService(r))
	this.City = string(randStringMerchantService(r))
	this.State = string(randStringMerchantService(r))
	this.Longitude = string(randStringMerchantService(r))
	this.Lattitude = string(randStringMerchantService(r))
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedMerchantService(r, 9)
	}
	return this
}

func NewPopulatedOwner(r randyMerchantService, easy bool) *Owner {
	this := &Owner{}
	this.Id = uint64(uint64(r.Uint32()))
	this.FirstName = string(randStringMerchantService(r))
	this.LastName = string(randStringMerchantService(r))
	this.Email = string(randStringMerchantService(r))
	this.Country = string(randStringMerchantService(r))
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedMerchantService(r, 6)
	}
	return this
}

func NewPopulatedTags(r randyMerchantService, easy bool) *Tags {
	this := &Tags{}
	this.Id = uint64(uint64(r.Uint32()))
	this.TagName = string(randStringMerchantService(r))
	this.TagDescription = string(randStringMerchantService(r))
	v11 := r.Intn(10)
	this.Metadata = make([]string, v11)
	for i := 0; i < v11; i++ {
		this.Metadata[i] = string(randStringMerchantService(r))
	}
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedMerchantService(r, 5)
	}
	return this
}

func NewPopulatedPolicy(r randyMerchantService, easy bool) *Policy {
	this := &Policy{}
	this.Id = uint64(uint64(r.Uint32()))
	this.Body = string(randStringMerchantService(r))
	this.Handle = string(randStringMerchantService(r))
	this.Title = string(randStringMerchantService(r))
	if r.Intn(5) != 0 {
		v12 := r.Intn(5)
		this.Tags = make([]*Tags, v12)
		for i := 0; i < v12; i++ {
			this.Tags[i] = NewPopulatedTags(r, easy)
		}
	}
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedMerchantService(r, 6)
	}
	return this
}

func NewPopulatedReturnPolicy(r randyMerchantService, easy bool) *ReturnPolicy {
	this := &ReturnPolicy{}
	this.Id = uint64(uint64(r.Uint32()))
	if r.Intn(5) != 0 {
		this.PolicyMeta = NewPopulatedPolicy(r, easy)
	}
	this.ContactWithinDaysOfDelivery = uint32(r.Uint32())
	this.ShipWithDaysOfDelivery = uint32(r.Uint32())
	this.RequestCancellationWithinDaysOfDelivery = uint32(r.Uint32())
	v13 := r.Intn(10)
	this.ItemsNotToBeReturned = make([]string, v13)
	for i := 0; i < v13; i++ {
		this.ItemsNotToBeReturned[i] = string(randStringMerchantService(r))
	}
	v14 := r.Intn(10)
	this.ConditionsOfReturn = make([]string, v14)
	for i := 0; i < v14; i++ {
		this.ConditionsOfReturn[i] = string(randStringMerchantService(r))
	}
	this.Details = string(randStringMerchantService(r))
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedMerchantService(r, 9)
	}
	return this
}

func NewPopulatedShippingPolicy(r randyMerchantService, easy bool) *ShippingPolicy {
	this := &ShippingPolicy{}
	this.Id = uint64(uint64(r.Uint32()))
	if r.Intn(5) != 0 {
		this.PolicyMeta = NewPopulatedPolicy(r, easy)
	}
	this.PostalService = ShippingPolicy_PostalService([]int32{0, 1, 2, 3, 4}[r.Intn(5)])
	this.DaysOrderShipsIn = uint32(r.Uint32())
	this.Details = string(randStringMerchantService(r))
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedMerchantService(r, 6)
	}
	return this
}

func NewPopulatedCreateAccountRequest(r randyMerchantService, easy bool) *CreateAccountRequest {
	this := &CreateAccountRequest{}
	if r.Intn(5) != 0 {
		this.Account = NewPopulatedMerchantAccount(r, easy)
	}
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedMerchantService(r, 2)
	}
	return this
}

func NewPopulatedCreateAccountResponse(r randyMerchantService, easy bool) *CreateAccountResponse {
	this := &CreateAccountResponse{}
	this.AccountId = uint64(uint64(r.Uint32()))
	this.JwtToken = string(randStringMerchantService(r))
	this.StripeUrl = string(randStringMerchantService(r))
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedMerchantService(r, 4)
	}
	return this
}

func NewPopulatedDeleteAccountRequest(r randyMerchantService, easy bool) *DeleteAccountRequest {
	this := &DeleteAccountRequest{}
	this.AccountId = uint64(uint64(r.Uint32()))
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedMerchantService(r, 2)
	}
	return this
}

func NewPopulatedDeleteAccountResponse(r randyMerchantService, easy bool) *DeleteAccountResponse {
	this := &DeleteAccountResponse{}
	this.IsDeleted = bool(bool(r.Intn(2) == 0))
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedMerchantService(r, 2)
	}
	return this
}

func NewPopulatedUpdateAccountRequest(r randyMerchantService, easy bool) *UpdateAccountRequest {
	this := &UpdateAccountRequest{}
	this.AccountId = uint64(uint64(r.Uint32()))
	if r.Intn(5) != 0 {
		this.Account = NewPopulatedMerchantAccount(r, easy)
	}
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedMerchantService(r, 3)
	}
	return this
}

func NewPopulatedUpdateAccountResponse(r randyMerchantService, easy bool) *UpdateAccountResponse {
	this := &UpdateAccountResponse{}
	if r.Intn(5) != 0 {
		this.Account = NewPopulatedMerchantAccount(r, easy)
	}
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedMerchantService(r, 2)
	}
	return this
}

func NewPopulatedGetAccountRequest(r randyMerchantService, easy bool) *GetAccountRequest {
	this := &GetAccountRequest{}
	this.AccountId = uint64(uint64(r.Uint32()))
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedMerchantService(r, 2)
	}
	return this
}

func NewPopulatedGetAccountResponse(r randyMerchantService, easy bool) *GetAccountResponse {
	this := &GetAccountResponse{}
	if r.Intn(5) != 0 {
		this.Account = NewPopulatedMerchantAccount(r, easy)
	}
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedMerchantService(r, 2)
	}
	return this
}

func NewPopulatedGetAccountsRequest(r randyMerchantService, easy bool) *GetAccountsRequest {
	this := &GetAccountsRequest{}
	v15 := r.Intn(10)
	this.AccountIds = make([]uint64, v15)
	for i := 0; i < v15; i++ {
		this.AccountIds[i] = uint64(uint64(r.Uint32()))
	}
	this.Limit = uint32(r.Uint32())
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedMerchantService(r, 3)
	}
	return this
}

func NewPopulatedGetAccountsResponse(r randyMerchantService, easy bool) *GetAccountsResponse {
	this := &GetAccountsResponse{}
	if r.Intn(5) != 0 {
		v16 := r.Intn(5)
		this.Accounts = make([]*MerchantAccount, v16)
		for i := 0; i < v16; i++ {
			this.Accounts[i] = NewPopulatedMerchantAccount(r, easy)
		}
	}
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedMerchantService(r, 2)
	}
	return this
}

func NewPopulatedSetAccountStatusRequest(r randyMerchantService, easy bool) *SetAccountStatusRequest {
	this := &SetAccountStatusRequest{}
	this.AccountId = uint64(uint64(r.Uint32()))
	this.AccountState = MerchantAccountState([]int32{0, 1, 2}[r.Intn(3)])
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedMerchantService(r, 3)
	}
	return this
}

func NewPopulatedSetAccountStatusResponse(r randyMerchantService, easy bool) *SetAccountStatusResponse {
	this := &SetAccountStatusResponse{}
	if r.Intn(5) != 0 {
		this.Account = NewPopulatedMerchantAccount(r, easy)
	}
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedMerchantService(r, 2)
	}
	return this
}

func NewPopulatedStartAccountOnboardingRequest(r randyMerchantService, easy bool) *StartAccountOnboardingRequest {
	this := &StartAccountOnboardingRequest{}
	this.AccountId = uint64(uint64(r.Uint32()))
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedMerchantService(r, 2)
	}
	return this
}

func NewPopulatedStartAccountOnboardingRespone(r randyMerchantService, easy bool) *StartAccountOnboardingRespone {
	this := &StartAccountOnboardingRespone{}
	this.Url = string(randStringMerchantService(r))
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedMerchantService(r, 2)
	}
	return this
}

type randyMerchantService interface {
	Float32() float32
	Float64() float64
	Int63() int64
	Int31() int32
	Uint32() uint32
	Intn(n int) int
}

func randUTF8RuneMerchantService(r randyMerchantService) rune {
	ru := r.Intn(62)
	if ru < 10 {
		return rune(ru + 48)
	} else if ru < 36 {
		return rune(ru + 55)
	}
	return rune(ru + 61)
}
func randStringMerchantService(r randyMerchantService) string {
	v17 := r.Intn(100)
	tmps := make([]rune, v17)
	for i := 0; i < v17; i++ {
		tmps[i] = randUTF8RuneMerchantService(r)
	}
	return string(tmps)
}
func randUnrecognizedMerchantService(r randyMerchantService, maxFieldNumber int) (dAtA []byte) {
	l := r.Intn(5)
	for i := 0; i < l; i++ {
		wire := r.Intn(4)
		if wire == 3 {
			wire = 5
		}
		fieldNumber := maxFieldNumber + r.Intn(100)
		dAtA = randFieldMerchantService(dAtA, r, fieldNumber, wire)
	}
	return dAtA
}
func randFieldMerchantService(dAtA []byte, r randyMerchantService, fieldNumber int, wire int) []byte {
	key := uint32(fieldNumber)<<3 | uint32(wire)
	switch wire {
	case 0:
		dAtA = encodeVarintPopulateMerchantService(dAtA, uint64(key))
		v18 := r.Int63()
		if r.Intn(2) == 0 {
			v18 *= -1
		}
		dAtA = encodeVarintPopulateMerchantService(dAtA, uint64(v18))
	case 1:
		dAtA = encodeVarintPopulateMerchantService(dAtA, uint64(key))
		dAtA = append(dAtA, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	case 2:
		dAtA = encodeVarintPopulateMerchantService(dAtA, uint64(key))
		ll := r.Intn(100)
		dAtA = encodeVarintPopulateMerchantService(dAtA, uint64(ll))
		for j := 0; j < ll; j++ {
			dAtA = append(dAtA, byte(r.Intn(256)))
		}
	default:
		dAtA = encodeVarintPopulateMerchantService(dAtA, uint64(key))
		dAtA = append(dAtA, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	}
	return dAtA
}
func encodeVarintPopulateMerchantService(dAtA []byte, v uint64) []byte {
	for v >= 1<<7 {
		dAtA = append(dAtA, uint8(uint64(v)&0x7f|0x80))
		v >>= 7
	}
	dAtA = append(dAtA, uint8(v))
	return dAtA
}
func (m *MerchantAccount) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovMerchantService(uint64(m.Id))
	}
	if len(m.Owners) > 0 {
		for _, e := range m.Owners {
			l = e.Size()
			n += 1 + l + sovMerchantService(uint64(l))
		}
	}
	l = len(m.BusinessName)
	if l > 0 {
		n += 1 + l + sovMerchantService(uint64(l))
	}
	l = len(m.BusinessEmail)
	if l > 0 {
		n += 1 + l + sovMerchantService(uint64(l))
	}
	if m.EmployerId != 0 {
		n += 1 + sovMerchantService(uint64(m.EmployerId))
	}
	l = len(m.EstimateAnnualRevenue)
	if l > 0 {
		n += 1 + l + sovMerchantService(uint64(l))
	}
	if m.Address != nil {
		l = m.Address.Size()
		n += 1 + l + sovMerchantService(uint64(l))
	}
	if len(m.ItemsOrServicesSold) > 0 {
		for _, e := range m.ItemsOrServicesSold {
			l = e.Size()
			n += 1 + l + sovMerchantService(uint64(l))
		}
	}
	if len(m.FulfillmentOptions) > 0 {
		l = 0
		for _, e := range m.FulfillmentOptions {
			l += sovMerchantService(uint64(e))
		}
		n += 1 + sovMerchantService(uint64(l)) + l
	}
	if m.ShopSettings != nil {
		l = m.ShopSettings.Size()
		n += 1 + l + sovMerchantService(uint64(l))
	}
	if len(m.SupportedCauses) > 0 {
		l = 0
		for _, e := range m.SupportedCauses {
			l += sovMerchantService(uint64(e))
		}
		n += 1 + sovMerchantService(uint64(l)) + l
	}
	l = len(m.Bio)
	if l > 0 {
		n += 1 + l + sovMerchantService(uint64(l))
	}
	l = len(m.Headline)
	if l > 0 {
		n += 1 + l + sovMerchantService(uint64(l))
	}
	l = len(m.PhoneNumber)
	if l > 0 {
		n += 1 + l + sovMerchantService(uint64(l))
	}
	if len(m.Tags) > 0 {
		for _, e := range m.Tags {
			l = e.Size()
			n += 1 + l + sovMerchantService(uint64(l))
		}
	}
	if m.StripeConnectedAccountId != 0 {
		n += 2 + sovMerchantService(uint64(m.StripeConnectedAccountId))
	}
	if m.PaymentsAccountId != 0 {
		n += 2 + sovMerchantService(uint64(m.PaymentsAccountId))
	}
	if m.AuthnAccountId != 0 {
		n += 2 + sovMerchantService(uint64(m.AuthnAccountId))
	}
	if m.OnboardingState != 0 {
		n += 2 + sovMerchantService(uint64(m.OnboardingState))
	}
	if m.AccountState != 0 {
		n += 2 + sovMerchantService(uint64(m.AccountState))
	}
	if m.AccountType != 0 {
		n += 2 + sovMerchantService(uint64(m.AccountType))
	}
	l = len(m.Password)
	if l > 0 {
		n += 2 + l + sovMerchantService(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Settings) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovMerchantService(uint64(m.Id))
	}
	if m.PaymentDetails != nil {
		l = m.PaymentDetails.Size()
		n += 1 + l + sovMerchantService(uint64(l))
	}
	if len(m.ShopPolicy) > 0 {
		for _, e := range m.ShopPolicy {
			l = e.Size()
			n += 1 + l + sovMerchantService(uint64(l))
		}
	}
	if len(m.PrivacyPolicy) > 0 {
		for _, e := range m.PrivacyPolicy {
			l = e.Size()
			n += 1 + l + sovMerchantService(uint64(l))
		}
	}
	if m.ReturnPolicy != nil {
		l = m.ReturnPolicy.Size()
		n += 1 + l + sovMerchantService(uint64(l))
	}
	if m.ShippingPolicy != nil {
		l = m.ShippingPolicy.Size()
		n += 1 + l + sovMerchantService(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Settings_PaymentDetails) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovMerchantService(uint64(m.Id))
	}
	if len(m.AcceptableCreditCardTypes) > 0 {
		l = 0
		for _, e := range m.AcceptableCreditCardTypes {
			l += sovMerchantService(uint64(e))
		}
		n += 1 + sovMerchantService(uint64(l)) + l
	}
	if m.PrimaryCurrencyCode != 0 {
		n += 1 + sovMerchantService(uint64(m.PrimaryCurrencyCode))
	}
	if len(m.EnabledCurrencyCodes) > 0 {
		l = 0
		for _, e := range m.EnabledCurrencyCodes {
			l += sovMerchantService(uint64(e))
		}
		n += 1 + sovMerchantService(uint64(l)) + l
	}
	if len(m.SupportedDigitalWallets) > 0 {
		l = 0
		for _, e := range m.SupportedDigitalWallets {
			l += sovMerchantService(uint64(e))
		}
		n += 1 + sovMerchantService(uint64(l)) + l
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ItemSold) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovMerchantService(uint64(m.Id))
	}
	if m.Type != 0 {
		n += 1 + sovMerchantService(uint64(m.Type))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Address) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovMerchantService(uint64(m.Id))
	}
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovMerchantService(uint64(l))
	}
	l = len(m.Unit)
	if l > 0 {
		n += 1 + l + sovMerchantService(uint64(l))
	}
	l = len(m.ZipCode)
	if l > 0 {
		n += 1 + l + sovMerchantService(uint64(l))
	}
	l = len(m.City)
	if l > 0 {
		n += 1 + l + sovMerchantService(uint64(l))
	}
	l = len(m.State)
	if l > 0 {
		n += 1 + l + sovMerchantService(uint64(l))
	}
	l = len(m.Longitude)
	if l > 0 {
		n += 1 + l + sovMerchantService(uint64(l))
	}
	l = len(m.Lattitude)
	if l > 0 {
		n += 1 + l + sovMerchantService(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Owner) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovMerchantService(uint64(m.Id))
	}
	l = len(m.FirstName)
	if l > 0 {
		n += 1 + l + sovMerchantService(uint64(l))
	}
	l = len(m.LastName)
	if l > 0 {
		n += 1 + l + sovMerchantService(uint64(l))
	}
	l = len(m.Email)
	if l > 0 {
		n += 1 + l + sovMerchantService(uint64(l))
	}
	l = len(m.Country)
	if l > 0 {
		n += 1 + l + sovMerchantService(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Tags) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovMerchantService(uint64(m.Id))
	}
	l = len(m.TagName)
	if l > 0 {
		n += 1 + l + sovMerchantService(uint64(l))
	}
	l = len(m.TagDescription)
	if l > 0 {
		n += 1 + l + sovMerchantService(uint64(l))
	}
	if len(m.Metadata) > 0 {
		for _, s := range m.Metadata {
			l = len(s)
			n += 1 + l + sovMerchantService(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Policy) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovMerchantService(uint64(m.Id))
	}
	l = len(m.Body)
	if l > 0 {
		n += 1 + l + sovMerchantService(uint64(l))
	}
	l = len(m.Handle)
	if l > 0 {
		n += 1 + l + sovMerchantService(uint64(l))
	}
	l = len(m.Title)
	if l > 0 {
		n += 1 + l + sovMerchantService(uint64(l))
	}
	if len(m.Tags) > 0 {
		for _, e := range m.Tags {
			l = e.Size()
			n += 1 + l + sovMerchantService(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ReturnPolicy) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovMerchantService(uint64(m.Id))
	}
	if m.PolicyMeta != nil {
		l = m.PolicyMeta.Size()
		n += 1 + l + sovMerchantService(uint64(l))
	}
	if m.ContactWithinDaysOfDelivery != 0 {
		n += 1 + sovMerchantService(uint64(m.ContactWithinDaysOfDelivery))
	}
	if m.ShipWithDaysOfDelivery != 0 {
		n += 1 + sovMerchantService(uint64(m.ShipWithDaysOfDelivery))
	}
	if m.RequestCancellationWithinDaysOfDelivery != 0 {
		n += 1 + sovMerchantService(uint64(m.RequestCancellationWithinDaysOfDelivery))
	}
	if len(m.ItemsNotToBeReturned) > 0 {
		for _, s := range m.ItemsNotToBeReturned {
			l = len(s)
			n += 1 + l + sovMerchantService(uint64(l))
		}
	}
	if len(m.ConditionsOfReturn) > 0 {
		for _, s := range m.ConditionsOfReturn {
			l = len(s)
			n += 1 + l + sovMerchantService(uint64(l))
		}
	}
	l = len(m.Details)
	if l > 0 {
		n += 1 + l + sovMerchantService(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ShippingPolicy) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovMerchantService(uint64(m.Id))
	}
	if m.PolicyMeta != nil {
		l = m.PolicyMeta.Size()
		n += 1 + l + sovMerchantService(uint64(l))
	}
	if m.PostalService != 0 {
		n += 1 + sovMerchantService(uint64(m.PostalService))
	}
	if m.DaysOrderShipsIn != 0 {
		n += 1 + sovMerchantService(uint64(m.DaysOrderShipsIn))
	}
	l = len(m.Details)
	if l > 0 {
		n += 1 + l + sovMerchantService(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *CreateAccountRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Account != nil {
		l = m.Account.Size()
		n += 1 + l + sovMerchantService(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *CreateAccountResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AccountId != 0 {
		n += 1 + sovMerchantService(uint64(m.AccountId))
	}
	l = len(m.JwtToken)
	if l > 0 {
		n += 1 + l + sovMerchantService(uint64(l))
	}
	l = len(m.StripeUrl)
	if l > 0 {
		n += 1 + l + sovMerchantService(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *DeleteAccountRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AccountId != 0 {
		n += 1 + sovMerchantService(uint64(m.AccountId))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *DeleteAccountResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.IsDeleted {
		n += 2
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *UpdateAccountRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AccountId != 0 {
		n += 1 + sovMerchantService(uint64(m.AccountId))
	}
	if m.Account != nil {
		l = m.Account.Size()
		n += 1 + l + sovMerchantService(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *UpdateAccountResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Account != nil {
		l = m.Account.Size()
		n += 1 + l + sovMerchantService(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetAccountRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AccountId != 0 {
		n += 1 + sovMerchantService(uint64(m.AccountId))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetAccountResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Account != nil {
		l = m.Account.Size()
		n += 1 + l + sovMerchantService(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetAccountsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.AccountIds) > 0 {
		l = 0
		for _, e := range m.AccountIds {
			l += sovMerchantService(uint64(e))
		}
		n += 1 + sovMerchantService(uint64(l)) + l
	}
	if m.Limit != 0 {
		n += 1 + sovMerchantService(uint64(m.Limit))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetAccountsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Accounts) > 0 {
		for _, e := range m.Accounts {
			l = e.Size()
			n += 1 + l + sovMerchantService(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *SetAccountStatusRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AccountId != 0 {
		n += 1 + sovMerchantService(uint64(m.AccountId))
	}
	if m.AccountState != 0 {
		n += 1 + sovMerchantService(uint64(m.AccountState))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *SetAccountStatusResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Account != nil {
		l = m.Account.Size()
		n += 1 + l + sovMerchantService(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *StartAccountOnboardingRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AccountId != 0 {
		n += 1 + sovMerchantService(uint64(m.AccountId))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *StartAccountOnboardingRespone) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Url)
	if l > 0 {
		n += 1 + l + sovMerchantService(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovMerchantService(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozMerchantService(x uint64) (n int) {
	return sovMerchantService(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *MerchantAccount) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMerchantService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MerchantAccount: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MerchantAccount: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMerchantService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Owners", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMerchantService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMerchantService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMerchantService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Owners = append(m.Owners, &Owner{})
			if err := m.Owners[len(m.Owners)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BusinessName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMerchantService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMerchantService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMerchantService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BusinessName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BusinessEmail", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMerchantService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMerchantService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMerchantService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BusinessEmail = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EmployerId", wireType)
			}
			m.EmployerId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMerchantService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EmployerId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EstimateAnnualRevenue", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMerchantService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMerchantService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMerchantService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EstimateAnnualRevenue = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMerchantService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMerchantService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMerchantService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Address == nil {
				m.Address = &Address{}
			}
			if err := m.Address.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ItemsOrServicesSold", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMerchantService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMerchantService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMerchantService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ItemsOrServicesSold = append(m.ItemsOrServicesSold, &ItemSold{})
			if err := m.ItemsOrServicesSold[len(m.ItemsOrServicesSold)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType == 0 {
				var v FulfillmentOptions
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowMerchantService
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= FulfillmentOptions(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.FulfillmentOptions = append(m.FulfillmentOptions, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowMerchantService
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthMerchantService
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthMerchantService
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				if elementCount != 0 && len(m.FulfillmentOptions) == 0 {
					m.FulfillmentOptions = make([]FulfillmentOptions, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v FulfillmentOptions
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowMerchantService
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= FulfillmentOptions(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.FulfillmentOptions = append(m.FulfillmentOptions, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field FulfillmentOptions", wireType)
			}
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ShopSettings", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMerchantService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMerchantService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMerchantService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ShopSettings == nil {
				m.ShopSettings = &Settings{}
			}
			if err := m.ShopSettings.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 11:
			if wireType == 0 {
				var v Causes
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowMerchantService
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= Causes(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.SupportedCauses = append(m.SupportedCauses, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowMerchantService
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthMerchantService
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthMerchantService
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				if elementCount != 0 && len(m.SupportedCauses) == 0 {
					m.SupportedCauses = make([]Causes, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v Causes
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowMerchantService
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= Causes(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.SupportedCauses = append(m.SupportedCauses, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field SupportedCauses", wireType)
			}
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Bio", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMerchantService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMerchantService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMerchantService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Bio = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Headline", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMerchantService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMerchantService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMerchantService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Headline = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PhoneNumber", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMerchantService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMerchantService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMerchantService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PhoneNumber = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tags", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMerchantService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMerchantService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMerchantService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Tags = append(m.Tags, &Tags{})
			if err := m.Tags[len(m.Tags)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 16:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StripeConnectedAccountId", wireType)
			}
			m.StripeConnectedAccountId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMerchantService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StripeConnectedAccountId |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 17:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PaymentsAccountId", wireType)
			}
			m.PaymentsAccountId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMerchantService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PaymentsAccountId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 18:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AuthnAccountId", wireType)
			}
			m.AuthnAccountId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMerchantService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AuthnAccountId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 19:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OnboardingState", wireType)
			}
			m.OnboardingState = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMerchantService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OnboardingState |= OnboardingStatus(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 20:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccountState", wireType)
			}
			m.AccountState = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMerchantService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AccountState |= MerchantAccountState(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 21:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccountType", wireType)
			}
			m.AccountType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMerchantService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AccountType |= MerchantAccountType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 22:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Password", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMerchantService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMerchantService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMerchantService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Password = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMerchantService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMerchantService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMerchantService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Settings) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMerchantService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Settings: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Settings: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMerchantService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PaymentDetails", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMerchantService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMerchantService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMerchantService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.PaymentDetails == nil {
				m.PaymentDetails = &Settings_PaymentDetails{}
			}
			if err := m.PaymentDetails.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ShopPolicy", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMerchantService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMerchantService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMerchantService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ShopPolicy = append(m.ShopPolicy, &Policy{})
			if err := m.ShopPolicy[len(m.ShopPolicy)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PrivacyPolicy", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMerchantService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMerchantService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMerchantService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PrivacyPolicy = append(m.PrivacyPolicy, &Policy{})
			if err := m.PrivacyPolicy[len(m.PrivacyPolicy)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReturnPolicy", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMerchantService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMerchantService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMerchantService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ReturnPolicy == nil {
				m.ReturnPolicy = &ReturnPolicy{}
			}
			if err := m.ReturnPolicy.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ShippingPolicy", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMerchantService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMerchantService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMerchantService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ShippingPolicy == nil {
				m.ShippingPolicy = &ShippingPolicy{}
			}
			if err := m.ShippingPolicy.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMerchantService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMerchantService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMerchantService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Settings_PaymentDetails) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMerchantService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PaymentDetails: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PaymentDetails: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMerchantService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType == 0 {
				var v Settings_PaymentDetails_CreditCardBrand
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowMerchantService
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= Settings_PaymentDetails_CreditCardBrand(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.AcceptableCreditCardTypes = append(m.AcceptableCreditCardTypes, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowMerchantService
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthMerchantService
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthMerchantService
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				if elementCount != 0 && len(m.AcceptableCreditCardTypes) == 0 {
					m.AcceptableCreditCardTypes = make([]Settings_PaymentDetails_CreditCardBrand, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v Settings_PaymentDetails_CreditCardBrand
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowMerchantService
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= Settings_PaymentDetails_CreditCardBrand(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.AcceptableCreditCardTypes = append(m.AcceptableCreditCardTypes, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field AcceptableCreditCardTypes", wireType)
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PrimaryCurrencyCode", wireType)
			}
			m.PrimaryCurrencyCode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMerchantService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PrimaryCurrencyCode |= Settings_PaymentDetails_CurrencyCode(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType == 0 {
				var v Settings_PaymentDetails_CurrencyCode
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowMerchantService
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= Settings_PaymentDetails_CurrencyCode(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.EnabledCurrencyCodes = append(m.EnabledCurrencyCodes, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowMerchantService
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthMerchantService
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthMerchantService
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				if elementCount != 0 && len(m.EnabledCurrencyCodes) == 0 {
					m.EnabledCurrencyCodes = make([]Settings_PaymentDetails_CurrencyCode, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v Settings_PaymentDetails_CurrencyCode
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowMerchantService
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= Settings_PaymentDetails_CurrencyCode(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.EnabledCurrencyCodes = append(m.EnabledCurrencyCodes, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field EnabledCurrencyCodes", wireType)
			}
		case 5:
			if wireType == 0 {
				var v Settings_PaymentDetails_DigitalWallets
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowMerchantService
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= Settings_PaymentDetails_DigitalWallets(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.SupportedDigitalWallets = append(m.SupportedDigitalWallets, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowMerchantService
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthMerchantService
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthMerchantService
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				if elementCount != 0 && len(m.SupportedDigitalWallets) == 0 {
					m.SupportedDigitalWallets = make([]Settings_PaymentDetails_DigitalWallets, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v Settings_PaymentDetails_DigitalWallets
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowMerchantService
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= Settings_PaymentDetails_DigitalWallets(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.SupportedDigitalWallets = append(m.SupportedDigitalWallets, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field SupportedDigitalWallets", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMerchantService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMerchantService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMerchantService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ItemSold) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMerchantService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ItemSold: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ItemSold: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMerchantService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMerchantService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= ItemSold_ItemsType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMerchantService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMerchantService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMerchantService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Address) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMerchantService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Address: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Address: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMerchantService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMerchantService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMerchantService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMerchantService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Unit", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMerchantService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMerchantService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMerchantService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Unit = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ZipCode", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMerchantService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMerchantService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMerchantService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ZipCode = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field City", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMerchantService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMerchantService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMerchantService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.City = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMerchantService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMerchantService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMerchantService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.State = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Longitude", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMerchantService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMerchantService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMerchantService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Longitude = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Lattitude", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMerchantService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMerchantService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMerchantService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Lattitude = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMerchantService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMerchantService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMerchantService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Owner) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMerchantService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Owner: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Owner: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMerchantService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FirstName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMerchantService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMerchantService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMerchantService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FirstName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMerchantService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMerchantService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMerchantService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LastName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Email", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMerchantService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMerchantService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMerchantService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Email = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Country", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMerchantService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMerchantService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMerchantService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Country = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMerchantService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMerchantService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMerchantService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Tags) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMerchantService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Tags: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Tags: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMerchantService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TagName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMerchantService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMerchantService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMerchantService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TagName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TagDescription", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMerchantService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMerchantService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMerchantService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TagDescription = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Metadata", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMerchantService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMerchantService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMerchantService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Metadata = append(m.Metadata, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMerchantService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMerchantService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMerchantService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Policy) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMerchantService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Policy: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Policy: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMerchantService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Body", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMerchantService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMerchantService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMerchantService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Body = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Handle", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMerchantService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMerchantService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMerchantService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Handle = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMerchantService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMerchantService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMerchantService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Title = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tags", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMerchantService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMerchantService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMerchantService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Tags = append(m.Tags, &Tags{})
			if err := m.Tags[len(m.Tags)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMerchantService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMerchantService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMerchantService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReturnPolicy) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMerchantService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReturnPolicy: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReturnPolicy: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMerchantService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PolicyMeta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMerchantService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMerchantService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMerchantService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.PolicyMeta == nil {
				m.PolicyMeta = &Policy{}
			}
			if err := m.PolicyMeta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContactWithinDaysOfDelivery", wireType)
			}
			m.ContactWithinDaysOfDelivery = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMerchantService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ContactWithinDaysOfDelivery |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ShipWithDaysOfDelivery", wireType)
			}
			m.ShipWithDaysOfDelivery = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMerchantService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ShipWithDaysOfDelivery |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RequestCancellationWithinDaysOfDelivery", wireType)
			}
			m.RequestCancellationWithinDaysOfDelivery = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMerchantService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RequestCancellationWithinDaysOfDelivery |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ItemsNotToBeReturned", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMerchantService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMerchantService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMerchantService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ItemsNotToBeReturned = append(m.ItemsNotToBeReturned, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConditionsOfReturn", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMerchantService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMerchantService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMerchantService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ConditionsOfReturn = append(m.ConditionsOfReturn, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Details", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMerchantService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMerchantService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMerchantService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Details = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMerchantService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMerchantService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMerchantService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ShippingPolicy) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMerchantService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ShippingPolicy: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ShippingPolicy: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMerchantService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PolicyMeta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMerchantService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMerchantService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMerchantService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.PolicyMeta == nil {
				m.PolicyMeta = &Policy{}
			}
			if err := m.PolicyMeta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PostalService", wireType)
			}
			m.PostalService = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMerchantService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PostalService |= ShippingPolicy_PostalService(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DaysOrderShipsIn", wireType)
			}
			m.DaysOrderShipsIn = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMerchantService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DaysOrderShipsIn |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Details", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMerchantService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMerchantService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMerchantService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Details = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMerchantService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMerchantService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMerchantService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CreateAccountRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMerchantService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateAccountRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateAccountRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Account", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMerchantService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMerchantService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMerchantService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Account == nil {
				m.Account = &MerchantAccount{}
			}
			if err := m.Account.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMerchantService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMerchantService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMerchantService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CreateAccountResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMerchantService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateAccountResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateAccountResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccountId", wireType)
			}
			m.AccountId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMerchantService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AccountId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field JwtToken", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMerchantService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMerchantService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMerchantService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.JwtToken = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StripeUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMerchantService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMerchantService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMerchantService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StripeUrl = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMerchantService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMerchantService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMerchantService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DeleteAccountRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMerchantService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DeleteAccountRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DeleteAccountRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccountId", wireType)
			}
			m.AccountId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMerchantService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AccountId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMerchantService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMerchantService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMerchantService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DeleteAccountResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMerchantService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DeleteAccountResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DeleteAccountResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsDeleted", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMerchantService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsDeleted = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipMerchantService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMerchantService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMerchantService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateAccountRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMerchantService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateAccountRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateAccountRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccountId", wireType)
			}
			m.AccountId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMerchantService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AccountId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Account", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMerchantService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMerchantService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMerchantService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Account == nil {
				m.Account = &MerchantAccount{}
			}
			if err := m.Account.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMerchantService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMerchantService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMerchantService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateAccountResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMerchantService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateAccountResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateAccountResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Account", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMerchantService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMerchantService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMerchantService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Account == nil {
				m.Account = &MerchantAccount{}
			}
			if err := m.Account.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMerchantService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMerchantService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMerchantService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetAccountRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMerchantService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetAccountRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetAccountRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccountId", wireType)
			}
			m.AccountId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMerchantService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AccountId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMerchantService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMerchantService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMerchantService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetAccountResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMerchantService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetAccountResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetAccountResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Account", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMerchantService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMerchantService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMerchantService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Account == nil {
				m.Account = &MerchantAccount{}
			}
			if err := m.Account.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMerchantService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMerchantService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMerchantService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetAccountsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMerchantService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetAccountsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetAccountsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType == 0 {
				var v uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowMerchantService
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.AccountIds = append(m.AccountIds, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowMerchantService
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthMerchantService
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthMerchantService
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.AccountIds) == 0 {
					m.AccountIds = make([]uint64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowMerchantService
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.AccountIds = append(m.AccountIds, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field AccountIds", wireType)
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Limit", wireType)
			}
			m.Limit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMerchantService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Limit |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMerchantService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMerchantService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMerchantService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetAccountsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMerchantService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetAccountsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetAccountsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Accounts", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMerchantService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMerchantService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMerchantService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Accounts = append(m.Accounts, &MerchantAccount{})
			if err := m.Accounts[len(m.Accounts)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMerchantService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMerchantService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMerchantService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SetAccountStatusRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMerchantService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SetAccountStatusRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SetAccountStatusRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccountId", wireType)
			}
			m.AccountId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMerchantService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AccountId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccountState", wireType)
			}
			m.AccountState = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMerchantService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AccountState |= MerchantAccountState(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMerchantService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMerchantService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMerchantService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SetAccountStatusResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMerchantService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SetAccountStatusResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SetAccountStatusResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Account", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMerchantService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMerchantService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMerchantService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Account == nil {
				m.Account = &MerchantAccount{}
			}
			if err := m.Account.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMerchantService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMerchantService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMerchantService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StartAccountOnboardingRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMerchantService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StartAccountOnboardingRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StartAccountOnboardingRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccountId", wireType)
			}
			m.AccountId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMerchantService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AccountId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMerchantService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMerchantService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMerchantService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StartAccountOnboardingRespone) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMerchantService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StartAccountOnboardingRespone: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StartAccountOnboardingRespone: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Url", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMerchantService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMerchantService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMerchantService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Url = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMerchantService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMerchantService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMerchantService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipMerchantService(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowMerchantService
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMerchantService
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMerchantService
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthMerchantService
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupMerchantService
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthMerchantService
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthMerchantService        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowMerchantService          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupMerchantService = fmt.Errorf("proto: unexpected end of group")
)
