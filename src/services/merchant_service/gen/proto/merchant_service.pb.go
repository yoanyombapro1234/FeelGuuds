// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: proto/merchant_service.proto

package proto

import (
	bytes "bytes"
	context "context"
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type CreditCardBrand int32

const (
	CreditCardBrand_VISA       CreditCardBrand = 0
	CreditCardBrand_MASTERCARD CreditCardBrand = 1
	CreditCardBrand_DISCOVER   CreditCardBrand = 2
)

var CreditCardBrand_name = map[int32]string{
	0: "VISA",
	1: "MASTERCARD",
	2: "DISCOVER",
}

var CreditCardBrand_value = map[string]int32{
	"VISA":       0,
	"MASTERCARD": 1,
	"DISCOVER":   2,
}

func (x CreditCardBrand) String() string {
	return proto.EnumName(CreditCardBrand_name, int32(x))
}

func (CreditCardBrand) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_5279745a034d8594, []int{0}
}

type Items int32

const (
	Items_PHYSICAL_ITEMS Items = 0
	Items_MENU_ITEMS     Items = 1
	Items_DONATIONS      Items = 2
	Items_TICKETS        Items = 3
	Items_MEMBERSHIPS    Items = 4
	Items_SERVICES       Items = 5
)

var Items_name = map[int32]string{
	0: "PHYSICAL_ITEMS",
	1: "MENU_ITEMS",
	2: "DONATIONS",
	3: "TICKETS",
	4: "MEMBERSHIPS",
	5: "SERVICES",
}

var Items_value = map[string]int32{
	"PHYSICAL_ITEMS": 0,
	"MENU_ITEMS":     1,
	"DONATIONS":      2,
	"TICKETS":        3,
	"MEMBERSHIPS":    4,
	"SERVICES":       5,
}

func (x Items) String() string {
	return proto.EnumName(Items_name, int32(x))
}

func (Items) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_5279745a034d8594, []int{1}
}

type FulfillmentOptions int32

const (
	FulfillmentOptions_SHIP_ITEMS         FulfillmentOptions = 0
	FulfillmentOptions_ALLOW_PICKUP       FulfillmentOptions = 1
	FulfillmentOptions_ALLOW_DELIVERY     FulfillmentOptions = 2
	FulfillmentOptions_ALLOW_SELF_SERVICE FulfillmentOptions = 3
)

var FulfillmentOptions_name = map[int32]string{
	0: "SHIP_ITEMS",
	1: "ALLOW_PICKUP",
	2: "ALLOW_DELIVERY",
	3: "ALLOW_SELF_SERVICE",
}

var FulfillmentOptions_value = map[string]int32{
	"SHIP_ITEMS":         0,
	"ALLOW_PICKUP":       1,
	"ALLOW_DELIVERY":     2,
	"ALLOW_SELF_SERVICE": 3,
}

func (x FulfillmentOptions) String() string {
	return proto.EnumName(FulfillmentOptions_name, int32(x))
}

func (FulfillmentOptions) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_5279745a034d8594, []int{2}
}

type CurrencyCode int32

const (
	CurrencyCode_USD CurrencyCode = 0
	CurrencyCode_GBP CurrencyCode = 1
)

var CurrencyCode_name = map[int32]string{
	0: "USD",
	1: "GBP",
}

var CurrencyCode_value = map[string]int32{
	"USD": 0,
	"GBP": 1,
}

func (x CurrencyCode) String() string {
	return proto.EnumName(CurrencyCode_name, int32(x))
}

func (CurrencyCode) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_5279745a034d8594, []int{3}
}

type DigitalWallets int32

const (
	DigitalWallets_ANDROID_PAY DigitalWallets = 0
	DigitalWallets_APPLE_PAY   DigitalWallets = 1
	DigitalWallets_GOOGLE_PAY  DigitalWallets = 2
	DigitalWallets_SHOPIFY_PAY DigitalWallets = 3
)

var DigitalWallets_name = map[int32]string{
	0: "ANDROID_PAY",
	1: "APPLE_PAY",
	2: "GOOGLE_PAY",
	3: "SHOPIFY_PAY",
}

var DigitalWallets_value = map[string]int32{
	"ANDROID_PAY": 0,
	"APPLE_PAY":   1,
	"GOOGLE_PAY":  2,
	"SHOPIFY_PAY": 3,
}

func (x DigitalWallets) String() string {
	return proto.EnumName(DigitalWallets_name, int32(x))
}

func (DigitalWallets) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_5279745a034d8594, []int{4}
}

type SupportedCauses int32

const (
	SupportedCauses_VOTING_RIGHTS          SupportedCauses = 0
	SupportedCauses_CLIMATE_JUSTICE        SupportedCauses = 1
	SupportedCauses_HEALTHCARE             SupportedCauses = 2
	SupportedCauses_REFUGEE_CRISIS         SupportedCauses = 3
	SupportedCauses_RACIAL_JUSTICE         SupportedCauses = 4
	SupportedCauses_INCOME_GAP             SupportedCauses = 5
	SupportedCauses_GUN_VIOLENCE           SupportedCauses = 6
	SupportedCauses_HUNGER_FOOD_INSECURITY SupportedCauses = 7
	SupportedCauses_EQUALITY               SupportedCauses = 8
	SupportedCauses_LBGTQ                  SupportedCauses = 9
	SupportedCauses_EDUCATION              SupportedCauses = 10
	SupportedCauses_FORCED_CHILD_LABOR     SupportedCauses = 11
	SupportedCauses_CHILD_ABUSE_NEGLECT    SupportedCauses = 12
	SupportedCauses_CIVIL_RIGHTS           SupportedCauses = 13
	SupportedCauses_POVERTY                SupportedCauses = 14
)

var SupportedCauses_name = map[int32]string{
	0:  "VOTING_RIGHTS",
	1:  "CLIMATE_JUSTICE",
	2:  "HEALTHCARE",
	3:  "REFUGEE_CRISIS",
	4:  "RACIAL_JUSTICE",
	5:  "INCOME_GAP",
	6:  "GUN_VIOLENCE",
	7:  "HUNGER_FOOD_INSECURITY",
	8:  "EQUALITY",
	9:  "LBGTQ",
	10: "EDUCATION",
	11: "FORCED_CHILD_LABOR",
	12: "CHILD_ABUSE_NEGLECT",
	13: "CIVIL_RIGHTS",
	14: "POVERTY",
}

var SupportedCauses_value = map[string]int32{
	"VOTING_RIGHTS":          0,
	"CLIMATE_JUSTICE":        1,
	"HEALTHCARE":             2,
	"REFUGEE_CRISIS":         3,
	"RACIAL_JUSTICE":         4,
	"INCOME_GAP":             5,
	"GUN_VIOLENCE":           6,
	"HUNGER_FOOD_INSECURITY": 7,
	"EQUALITY":               8,
	"LBGTQ":                  9,
	"EDUCATION":              10,
	"FORCED_CHILD_LABOR":     11,
	"CHILD_ABUSE_NEGLECT":    12,
	"CIVIL_RIGHTS":           13,
	"POVERTY":                14,
}

func (x SupportedCauses) String() string {
	return proto.EnumName(SupportedCauses_name, int32(x))
}

func (SupportedCauses) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_5279745a034d8594, []int{5}
}

type Merchant struct {
	// set of owners who are responsible for this merchant account
	Owners        []*Owner `protobuf:"bytes,1,rep,name=owners,proto3" json:"owners,omitempty"`
	BusinessName  string   `protobuf:"bytes,2,opt,name=BusinessName,proto3" json:"BusinessName,omitempty"`
	BusinessEmail string   `protobuf:"bytes,3,opt,name=BusinessEmail,proto3" json:"BusinessEmail,omitempty"`
	// employer identification number
	EmployerID            string   `protobuf:"bytes,4,opt,name=EmployerID,proto3" json:"EmployerID,omitempty"`
	EstimateAnnualRevenue string   `protobuf:"bytes,5,opt,name=EstimateAnnualRevenue,proto3" json:"EstimateAnnualRevenue,omitempty"`
	Address               *Address `protobuf:"bytes,6,opt,name=Address,proto3" json:"Address,omitempty"`
	// types of item this merchant is selling
	ItemsBeingSold []Items `protobuf:"varint,7,rep,packed,name=ItemsBeingSold,proto3,enum=proto.Items" json:"ItemsBeingSold,omitempty"`
	// ways in which the merchant aims to fulfill purchases
	FulfillmentOptions []FulfillmentOptions `protobuf:"varint,8,rep,packed,name=FulfillmentOptions,proto3,enum=proto.FulfillmentOptions" json:"FulfillmentOptions,omitempty"`
	// shop settings
	ShopSettings *Settings `protobuf:"bytes,9,opt,name=ShopSettings,proto3" json:"ShopSettings,omitempty"`
	// set of supported causes the merchant adheres to
	SupportedCauses      []SupportedCauses `protobuf:"varint,10,rep,packed,name=SupportedCauses,proto3,enum=proto.SupportedCauses" json:"SupportedCauses,omitempty"`
	Bio                  string            `protobuf:"bytes,11,opt,name=Bio,proto3" json:"Bio,omitempty"`
	Headline             string            `protobuf:"bytes,12,opt,name=Headline,proto3" json:"Headline,omitempty"`
	Phone                string            `protobuf:"bytes,13,opt,name=Phone,proto3" json:"Phone,omitempty"`
	Tags                 []string          `protobuf:"bytes,14,rep,name=Tags,proto3" json:"Tags,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *Merchant) Reset()         { *m = Merchant{} }
func (m *Merchant) String() string { return proto.CompactTextString(m) }
func (*Merchant) ProtoMessage()    {}
func (*Merchant) Descriptor() ([]byte, []int) {
	return fileDescriptor_5279745a034d8594, []int{0}
}
func (m *Merchant) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Merchant) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Merchant.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Merchant) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Merchant.Merge(m, src)
}
func (m *Merchant) XXX_Size() int {
	return m.Size()
}
func (m *Merchant) XXX_DiscardUnknown() {
	xxx_messageInfo_Merchant.DiscardUnknown(m)
}

var xxx_messageInfo_Merchant proto.InternalMessageInfo

func (m *Merchant) GetOwners() []*Owner {
	if m != nil {
		return m.Owners
	}
	return nil
}

func (m *Merchant) GetBusinessName() string {
	if m != nil {
		return m.BusinessName
	}
	return ""
}

func (m *Merchant) GetBusinessEmail() string {
	if m != nil {
		return m.BusinessEmail
	}
	return ""
}

func (m *Merchant) GetEmployerID() string {
	if m != nil {
		return m.EmployerID
	}
	return ""
}

func (m *Merchant) GetEstimateAnnualRevenue() string {
	if m != nil {
		return m.EstimateAnnualRevenue
	}
	return ""
}

func (m *Merchant) GetAddress() *Address {
	if m != nil {
		return m.Address
	}
	return nil
}

func (m *Merchant) GetItemsBeingSold() []Items {
	if m != nil {
		return m.ItemsBeingSold
	}
	return nil
}

func (m *Merchant) GetFulfillmentOptions() []FulfillmentOptions {
	if m != nil {
		return m.FulfillmentOptions
	}
	return nil
}

func (m *Merchant) GetShopSettings() *Settings {
	if m != nil {
		return m.ShopSettings
	}
	return nil
}

func (m *Merchant) GetSupportedCauses() []SupportedCauses {
	if m != nil {
		return m.SupportedCauses
	}
	return nil
}

func (m *Merchant) GetBio() string {
	if m != nil {
		return m.Bio
	}
	return ""
}

func (m *Merchant) GetHeadline() string {
	if m != nil {
		return m.Headline
	}
	return ""
}

func (m *Merchant) GetPhone() string {
	if m != nil {
		return m.Phone
	}
	return ""
}

func (m *Merchant) GetTags() []string {
	if m != nil {
		return m.Tags
	}
	return nil
}

type Owner struct {
	FirstName            string   `protobuf:"bytes,1,opt,name=FirstName,proto3" json:"FirstName,omitempty"`
	LastName             string   `protobuf:"bytes,2,opt,name=LastName,proto3" json:"LastName,omitempty"`
	Email                string   `protobuf:"bytes,3,opt,name=Email,proto3" json:"Email,omitempty"`
	Country              string   `protobuf:"bytes,4,opt,name=Country,proto3" json:"Country,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Owner) Reset()         { *m = Owner{} }
func (m *Owner) String() string { return proto.CompactTextString(m) }
func (*Owner) ProtoMessage()    {}
func (*Owner) Descriptor() ([]byte, []int) {
	return fileDescriptor_5279745a034d8594, []int{1}
}
func (m *Owner) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Owner) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Owner.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Owner) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Owner.Merge(m, src)
}
func (m *Owner) XXX_Size() int {
	return m.Size()
}
func (m *Owner) XXX_DiscardUnknown() {
	xxx_messageInfo_Owner.DiscardUnknown(m)
}

var xxx_messageInfo_Owner proto.InternalMessageInfo

func (m *Owner) GetFirstName() string {
	if m != nil {
		return m.FirstName
	}
	return ""
}

func (m *Owner) GetLastName() string {
	if m != nil {
		return m.LastName
	}
	return ""
}

func (m *Owner) GetEmail() string {
	if m != nil {
		return m.Email
	}
	return ""
}

func (m *Owner) GetCountry() string {
	if m != nil {
		return m.Country
	}
	return ""
}

type Address struct {
	Address              string   `protobuf:"bytes,1,opt,name=Address,proto3" json:"Address,omitempty"`
	Unit                 string   `protobuf:"bytes,2,opt,name=Unit,proto3" json:"Unit,omitempty"`
	ZipCode              string   `protobuf:"bytes,3,opt,name=ZipCode,proto3" json:"ZipCode,omitempty"`
	City                 string   `protobuf:"bytes,4,opt,name=City,proto3" json:"City,omitempty"`
	State                string   `protobuf:"bytes,5,opt,name=State,proto3" json:"State,omitempty"`
	Longitude            string   `protobuf:"bytes,6,opt,name=longitude,proto3" json:"longitude,omitempty"`
	Lattitude            string   `protobuf:"bytes,7,opt,name=lattitude,proto3" json:"lattitude,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Address) Reset()         { *m = Address{} }
func (m *Address) String() string { return proto.CompactTextString(m) }
func (*Address) ProtoMessage()    {}
func (*Address) Descriptor() ([]byte, []int) {
	return fileDescriptor_5279745a034d8594, []int{2}
}
func (m *Address) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Address) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Address.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Address) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Address.Merge(m, src)
}
func (m *Address) XXX_Size() int {
	return m.Size()
}
func (m *Address) XXX_DiscardUnknown() {
	xxx_messageInfo_Address.DiscardUnknown(m)
}

var xxx_messageInfo_Address proto.InternalMessageInfo

func (m *Address) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *Address) GetUnit() string {
	if m != nil {
		return m.Unit
	}
	return ""
}

func (m *Address) GetZipCode() string {
	if m != nil {
		return m.ZipCode
	}
	return ""
}

func (m *Address) GetCity() string {
	if m != nil {
		return m.City
	}
	return ""
}

func (m *Address) GetState() string {
	if m != nil {
		return m.State
	}
	return ""
}

func (m *Address) GetLongitude() string {
	if m != nil {
		return m.Longitude
	}
	return ""
}

func (m *Address) GetLattitude() string {
	if m != nil {
		return m.Lattitude
	}
	return ""
}

type Settings struct {
	PaymentDetails       *PaymentDetails `protobuf:"bytes,9,opt,name=PaymentDetails,proto3" json:"PaymentDetails,omitempty"`
	ShopPolicy           *Policy         `protobuf:"bytes,10,opt,name=ShopPolicy,proto3" json:"ShopPolicy,omitempty"`
	PrivacyPolicy        *Policy         `protobuf:"bytes,11,opt,name=PrivacyPolicy,proto3" json:"PrivacyPolicy,omitempty"`
	RefundPolicy         *Policy         `protobuf:"bytes,12,opt,name=RefundPolicy,proto3" json:"RefundPolicy,omitempty"`
	ShippingPolicy       *Policy         `protobuf:"bytes,13,opt,name=ShippingPolicy,proto3" json:"ShippingPolicy,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *Settings) Reset()         { *m = Settings{} }
func (m *Settings) String() string { return proto.CompactTextString(m) }
func (*Settings) ProtoMessage()    {}
func (*Settings) Descriptor() ([]byte, []int) {
	return fileDescriptor_5279745a034d8594, []int{3}
}
func (m *Settings) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Settings) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Settings.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Settings) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Settings.Merge(m, src)
}
func (m *Settings) XXX_Size() int {
	return m.Size()
}
func (m *Settings) XXX_DiscardUnknown() {
	xxx_messageInfo_Settings.DiscardUnknown(m)
}

var xxx_messageInfo_Settings proto.InternalMessageInfo

func (m *Settings) GetPaymentDetails() *PaymentDetails {
	if m != nil {
		return m.PaymentDetails
	}
	return nil
}

func (m *Settings) GetShopPolicy() *Policy {
	if m != nil {
		return m.ShopPolicy
	}
	return nil
}

func (m *Settings) GetPrivacyPolicy() *Policy {
	if m != nil {
		return m.PrivacyPolicy
	}
	return nil
}

func (m *Settings) GetRefundPolicy() *Policy {
	if m != nil {
		return m.RefundPolicy
	}
	return nil
}

func (m *Settings) GetShippingPolicy() *Policy {
	if m != nil {
		return m.ShippingPolicy
	}
	return nil
}

type PaymentDetails struct {
	AcceptedCreditCardBrands []CreditCardBrand `protobuf:"varint,1,rep,packed,name=AcceptedCreditCardBrands,proto3,enum=proto.CreditCardBrand" json:"AcceptedCreditCardBrands,omitempty"`
	PrimaryCurrencyCode      CurrencyCode      `protobuf:"varint,2,opt,name=PrimaryCurrencyCode,proto3,enum=proto.CurrencyCode" json:"PrimaryCurrencyCode,omitempty"`
	// set of currencies the merchant can support
	EnabledCurrencyCodes   []CurrencyCode   `protobuf:"varint,3,rep,packed,name=EnabledCurrencyCodes,proto3,enum=proto.CurrencyCode" json:"EnabledCurrencyCodes,omitempty"`
	PaymentsAccountID      uint32           `protobuf:"varint,4,opt,name=PaymentsAccountID,proto3" json:"PaymentsAccountID,omitempty"`
	AcceptedDigitalWallets []DigitalWallets `protobuf:"varint,5,rep,packed,name=AcceptedDigitalWallets,proto3,enum=proto.DigitalWallets" json:"AcceptedDigitalWallets,omitempty"`
	XXX_NoUnkeyedLiteral   struct{}         `json:"-"`
	XXX_unrecognized       []byte           `json:"-"`
	XXX_sizecache          int32            `json:"-"`
}

func (m *PaymentDetails) Reset()         { *m = PaymentDetails{} }
func (m *PaymentDetails) String() string { return proto.CompactTextString(m) }
func (*PaymentDetails) ProtoMessage()    {}
func (*PaymentDetails) Descriptor() ([]byte, []int) {
	return fileDescriptor_5279745a034d8594, []int{4}
}
func (m *PaymentDetails) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PaymentDetails) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PaymentDetails.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PaymentDetails) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PaymentDetails.Merge(m, src)
}
func (m *PaymentDetails) XXX_Size() int {
	return m.Size()
}
func (m *PaymentDetails) XXX_DiscardUnknown() {
	xxx_messageInfo_PaymentDetails.DiscardUnknown(m)
}

var xxx_messageInfo_PaymentDetails proto.InternalMessageInfo

func (m *PaymentDetails) GetAcceptedCreditCardBrands() []CreditCardBrand {
	if m != nil {
		return m.AcceptedCreditCardBrands
	}
	return nil
}

func (m *PaymentDetails) GetPrimaryCurrencyCode() CurrencyCode {
	if m != nil {
		return m.PrimaryCurrencyCode
	}
	return CurrencyCode_USD
}

func (m *PaymentDetails) GetEnabledCurrencyCodes() []CurrencyCode {
	if m != nil {
		return m.EnabledCurrencyCodes
	}
	return nil
}

func (m *PaymentDetails) GetPaymentsAccountID() uint32 {
	if m != nil {
		return m.PaymentsAccountID
	}
	return 0
}

func (m *PaymentDetails) GetAcceptedDigitalWallets() []DigitalWallets {
	if m != nil {
		return m.AcceptedDigitalWallets
	}
	return nil
}

type Policy struct {
	Body                 string   `protobuf:"bytes,1,opt,name=Body,proto3" json:"Body,omitempty"`
	Handle               string   `protobuf:"bytes,2,opt,name=Handle,proto3" json:"Handle,omitempty"`
	Title                string   `protobuf:"bytes,3,opt,name=Title,proto3" json:"Title,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Policy) Reset()         { *m = Policy{} }
func (m *Policy) String() string { return proto.CompactTextString(m) }
func (*Policy) ProtoMessage()    {}
func (*Policy) Descriptor() ([]byte, []int) {
	return fileDescriptor_5279745a034d8594, []int{5}
}
func (m *Policy) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Policy) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Policy.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Policy) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Policy.Merge(m, src)
}
func (m *Policy) XXX_Size() int {
	return m.Size()
}
func (m *Policy) XXX_DiscardUnknown() {
	xxx_messageInfo_Policy.DiscardUnknown(m)
}

var xxx_messageInfo_Policy proto.InternalMessageInfo

func (m *Policy) GetBody() string {
	if m != nil {
		return m.Body
	}
	return ""
}

func (m *Policy) GetHandle() string {
	if m != nil {
		return m.Handle
	}
	return ""
}

func (m *Policy) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

type CreateAccountRequest struct {
	Account              *Merchant `protobuf:"bytes,1,opt,name=Account,proto3" json:"Account,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *CreateAccountRequest) Reset()         { *m = CreateAccountRequest{} }
func (m *CreateAccountRequest) String() string { return proto.CompactTextString(m) }
func (*CreateAccountRequest) ProtoMessage()    {}
func (*CreateAccountRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_5279745a034d8594, []int{6}
}
func (m *CreateAccountRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CreateAccountRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CreateAccountRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CreateAccountRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateAccountRequest.Merge(m, src)
}
func (m *CreateAccountRequest) XXX_Size() int {
	return m.Size()
}
func (m *CreateAccountRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateAccountRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CreateAccountRequest proto.InternalMessageInfo

func (m *CreateAccountRequest) GetAccount() *Merchant {
	if m != nil {
		return m.Account
	}
	return nil
}

type CreateAccountResponse struct {
	ID                   uint32   `protobuf:"varint,1,opt,name=ID,proto3" json:"ID,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CreateAccountResponse) Reset()         { *m = CreateAccountResponse{} }
func (m *CreateAccountResponse) String() string { return proto.CompactTextString(m) }
func (*CreateAccountResponse) ProtoMessage()    {}
func (*CreateAccountResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_5279745a034d8594, []int{7}
}
func (m *CreateAccountResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CreateAccountResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CreateAccountResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CreateAccountResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateAccountResponse.Merge(m, src)
}
func (m *CreateAccountResponse) XXX_Size() int {
	return m.Size()
}
func (m *CreateAccountResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateAccountResponse.DiscardUnknown(m)
}

var xxx_messageInfo_CreateAccountResponse proto.InternalMessageInfo

func (m *CreateAccountResponse) GetID() uint32 {
	if m != nil {
		return m.ID
	}
	return 0
}

type DeleteAccountRequest struct {
	ID                   uint32   `protobuf:"varint,1,opt,name=ID,proto3" json:"ID,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DeleteAccountRequest) Reset()         { *m = DeleteAccountRequest{} }
func (m *DeleteAccountRequest) String() string { return proto.CompactTextString(m) }
func (*DeleteAccountRequest) ProtoMessage()    {}
func (*DeleteAccountRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_5279745a034d8594, []int{8}
}
func (m *DeleteAccountRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DeleteAccountRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DeleteAccountRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DeleteAccountRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeleteAccountRequest.Merge(m, src)
}
func (m *DeleteAccountRequest) XXX_Size() int {
	return m.Size()
}
func (m *DeleteAccountRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_DeleteAccountRequest.DiscardUnknown(m)
}

var xxx_messageInfo_DeleteAccountRequest proto.InternalMessageInfo

func (m *DeleteAccountRequest) GetID() uint32 {
	if m != nil {
		return m.ID
	}
	return 0
}

type DeleteAccountResponse struct {
	IsDeleted            bool     `protobuf:"varint,1,opt,name=IsDeleted,proto3" json:"IsDeleted,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DeleteAccountResponse) Reset()         { *m = DeleteAccountResponse{} }
func (m *DeleteAccountResponse) String() string { return proto.CompactTextString(m) }
func (*DeleteAccountResponse) ProtoMessage()    {}
func (*DeleteAccountResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_5279745a034d8594, []int{9}
}
func (m *DeleteAccountResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DeleteAccountResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DeleteAccountResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DeleteAccountResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeleteAccountResponse.Merge(m, src)
}
func (m *DeleteAccountResponse) XXX_Size() int {
	return m.Size()
}
func (m *DeleteAccountResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_DeleteAccountResponse.DiscardUnknown(m)
}

var xxx_messageInfo_DeleteAccountResponse proto.InternalMessageInfo

func (m *DeleteAccountResponse) GetIsDeleted() bool {
	if m != nil {
		return m.IsDeleted
	}
	return false
}

type UpdateAccountRequest struct {
	ID                   uint32    `protobuf:"varint,1,opt,name=ID,proto3" json:"ID,omitempty"`
	Account              *Merchant `protobuf:"bytes,2,opt,name=Account,proto3" json:"Account,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *UpdateAccountRequest) Reset()         { *m = UpdateAccountRequest{} }
func (m *UpdateAccountRequest) String() string { return proto.CompactTextString(m) }
func (*UpdateAccountRequest) ProtoMessage()    {}
func (*UpdateAccountRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_5279745a034d8594, []int{10}
}
func (m *UpdateAccountRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpdateAccountRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpdateAccountRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpdateAccountRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateAccountRequest.Merge(m, src)
}
func (m *UpdateAccountRequest) XXX_Size() int {
	return m.Size()
}
func (m *UpdateAccountRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateAccountRequest.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateAccountRequest proto.InternalMessageInfo

func (m *UpdateAccountRequest) GetID() uint32 {
	if m != nil {
		return m.ID
	}
	return 0
}

func (m *UpdateAccountRequest) GetAccount() *Merchant {
	if m != nil {
		return m.Account
	}
	return nil
}

type UpdateAccountResponse struct {
	Account              *Merchant `protobuf:"bytes,1,opt,name=Account,proto3" json:"Account,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *UpdateAccountResponse) Reset()         { *m = UpdateAccountResponse{} }
func (m *UpdateAccountResponse) String() string { return proto.CompactTextString(m) }
func (*UpdateAccountResponse) ProtoMessage()    {}
func (*UpdateAccountResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_5279745a034d8594, []int{11}
}
func (m *UpdateAccountResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpdateAccountResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpdateAccountResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpdateAccountResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateAccountResponse.Merge(m, src)
}
func (m *UpdateAccountResponse) XXX_Size() int {
	return m.Size()
}
func (m *UpdateAccountResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateAccountResponse.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateAccountResponse proto.InternalMessageInfo

func (m *UpdateAccountResponse) GetAccount() *Merchant {
	if m != nil {
		return m.Account
	}
	return nil
}

type GetAccountRequest struct {
	ID                   uint32   `protobuf:"varint,1,opt,name=ID,proto3" json:"ID,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetAccountRequest) Reset()         { *m = GetAccountRequest{} }
func (m *GetAccountRequest) String() string { return proto.CompactTextString(m) }
func (*GetAccountRequest) ProtoMessage()    {}
func (*GetAccountRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_5279745a034d8594, []int{12}
}
func (m *GetAccountRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetAccountRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetAccountRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetAccountRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetAccountRequest.Merge(m, src)
}
func (m *GetAccountRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetAccountRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetAccountRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetAccountRequest proto.InternalMessageInfo

func (m *GetAccountRequest) GetID() uint32 {
	if m != nil {
		return m.ID
	}
	return 0
}

type GetAccountResponse struct {
	Account              *Merchant `protobuf:"bytes,1,opt,name=Account,proto3" json:"Account,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *GetAccountResponse) Reset()         { *m = GetAccountResponse{} }
func (m *GetAccountResponse) String() string { return proto.CompactTextString(m) }
func (*GetAccountResponse) ProtoMessage()    {}
func (*GetAccountResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_5279745a034d8594, []int{13}
}
func (m *GetAccountResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetAccountResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetAccountResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetAccountResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetAccountResponse.Merge(m, src)
}
func (m *GetAccountResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetAccountResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetAccountResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetAccountResponse proto.InternalMessageInfo

func (m *GetAccountResponse) GetAccount() *Merchant {
	if m != nil {
		return m.Account
	}
	return nil
}

type GetAccountsRequest struct {
	IDs                  []uint32 `protobuf:"varint,1,rep,packed,name=IDs,proto3" json:"IDs,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetAccountsRequest) Reset()         { *m = GetAccountsRequest{} }
func (m *GetAccountsRequest) String() string { return proto.CompactTextString(m) }
func (*GetAccountsRequest) ProtoMessage()    {}
func (*GetAccountsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_5279745a034d8594, []int{14}
}
func (m *GetAccountsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetAccountsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetAccountsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetAccountsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetAccountsRequest.Merge(m, src)
}
func (m *GetAccountsRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetAccountsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetAccountsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetAccountsRequest proto.InternalMessageInfo

func (m *GetAccountsRequest) GetIDs() []uint32 {
	if m != nil {
		return m.IDs
	}
	return nil
}

type GetAccountsResponse struct {
	Accounts             []*Merchant `protobuf:"bytes,1,rep,name=Accounts,proto3" json:"Accounts,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *GetAccountsResponse) Reset()         { *m = GetAccountsResponse{} }
func (m *GetAccountsResponse) String() string { return proto.CompactTextString(m) }
func (*GetAccountsResponse) ProtoMessage()    {}
func (*GetAccountsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_5279745a034d8594, []int{15}
}
func (m *GetAccountsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetAccountsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetAccountsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetAccountsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetAccountsResponse.Merge(m, src)
}
func (m *GetAccountsResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetAccountsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetAccountsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetAccountsResponse proto.InternalMessageInfo

func (m *GetAccountsResponse) GetAccounts() []*Merchant {
	if m != nil {
		return m.Accounts
	}
	return nil
}

func init() {
	proto.RegisterEnum("proto.CreditCardBrand", CreditCardBrand_name, CreditCardBrand_value)
	proto.RegisterEnum("proto.Items", Items_name, Items_value)
	proto.RegisterEnum("proto.FulfillmentOptions", FulfillmentOptions_name, FulfillmentOptions_value)
	proto.RegisterEnum("proto.CurrencyCode", CurrencyCode_name, CurrencyCode_value)
	proto.RegisterEnum("proto.DigitalWallets", DigitalWallets_name, DigitalWallets_value)
	proto.RegisterEnum("proto.SupportedCauses", SupportedCauses_name, SupportedCauses_value)
	proto.RegisterType((*Merchant)(nil), "proto.Merchant")
	proto.RegisterType((*Owner)(nil), "proto.Owner")
	proto.RegisterType((*Address)(nil), "proto.Address")
	proto.RegisterType((*Settings)(nil), "proto.Settings")
	proto.RegisterType((*PaymentDetails)(nil), "proto.PaymentDetails")
	proto.RegisterType((*Policy)(nil), "proto.Policy")
	proto.RegisterType((*CreateAccountRequest)(nil), "proto.CreateAccountRequest")
	proto.RegisterType((*CreateAccountResponse)(nil), "proto.CreateAccountResponse")
	proto.RegisterType((*DeleteAccountRequest)(nil), "proto.DeleteAccountRequest")
	proto.RegisterType((*DeleteAccountResponse)(nil), "proto.DeleteAccountResponse")
	proto.RegisterType((*UpdateAccountRequest)(nil), "proto.UpdateAccountRequest")
	proto.RegisterType((*UpdateAccountResponse)(nil), "proto.UpdateAccountResponse")
	proto.RegisterType((*GetAccountRequest)(nil), "proto.GetAccountRequest")
	proto.RegisterType((*GetAccountResponse)(nil), "proto.GetAccountResponse")
	proto.RegisterType((*GetAccountsRequest)(nil), "proto.GetAccountsRequest")
	proto.RegisterType((*GetAccountsResponse)(nil), "proto.GetAccountsResponse")
}

func init() { proto.RegisterFile("proto/merchant_service.proto", fileDescriptor_5279745a034d8594) }

var fileDescriptor_5279745a034d8594 = []byte{
	// 1462 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x57, 0xdd, 0x72, 0xe3, 0x48,
	0x15, 0x1e, 0xd9, 0x71, 0x62, 0x9f, 0xd8, 0x8e, 0xa6, 0xf3, 0x83, 0x36, 0x4c, 0x85, 0x94, 0xd9,
	0x5a, 0x42, 0x80, 0xa5, 0x98, 0xd9, 0xbd, 0xe0, 0x82, 0x02, 0x59, 0xea, 0xd8, 0x9d, 0x55, 0x2c,
	0x4d, 0x4b, 0xce, 0x56, 0xf6, 0xc6, 0xa5, 0xb1, 0x7a, 0x12, 0x55, 0x29, 0x92, 0x57, 0x92, 0x87,
	0xf2, 0x93, 0xf0, 0x08, 0xf0, 0x06, 0xf0, 0x08, 0x14, 0x57, 0x3c, 0x02, 0xe4, 0x0d, 0xb8, 0xe3,
	0x8a, 0xa2, 0xba, 0xd5, 0x72, 0xfc, 0xa3, 0xad, 0xa9, 0xb9, 0x4a, 0x9f, 0xef, 0xfb, 0xce, 0x39,
	0x7d, 0xba, 0x4f, 0x1f, 0x39, 0xf0, 0x6a, 0x96, 0x26, 0x79, 0xf2, 0xeb, 0x47, 0x96, 0x4e, 0x1f,
	0xfc, 0x38, 0x9f, 0x64, 0x2c, 0xfd, 0x10, 0x4e, 0xd9, 0x97, 0x02, 0x46, 0x0d, 0xf1, 0xa7, 0xf7,
	0x8f, 0x1d, 0x68, 0xde, 0x48, 0x05, 0xfa, 0x1c, 0x76, 0x93, 0x3f, 0xc6, 0x2c, 0xcd, 0x34, 0xe5,
	0xbc, 0x7e, 0xb1, 0xff, 0xba, 0x5d, 0x68, 0xbf, 0xb4, 0x39, 0x48, 0x25, 0x87, 0x7a, 0xd0, 0xee,
	0xcf, 0xb3, 0x30, 0x66, 0x59, 0x36, 0xf2, 0x1f, 0x99, 0x56, 0x3b, 0x57, 0x2e, 0x5a, 0x74, 0x0d,
	0x43, 0x9f, 0x43, 0xa7, 0xb4, 0xf1, 0xa3, 0x1f, 0x46, 0x5a, 0x5d, 0x88, 0xd6, 0x41, 0x74, 0x06,
	0x80, 0x1f, 0x67, 0x51, 0xb2, 0x60, 0x29, 0x31, 0xb5, 0x1d, 0x21, 0x59, 0x41, 0xd0, 0x57, 0x70,
	0x8c, 0xb3, 0x3c, 0x7c, 0xf4, 0x73, 0xa6, 0xc7, 0xf1, 0xdc, 0x8f, 0x28, 0xfb, 0xc0, 0xe2, 0x39,
	0xd3, 0x1a, 0x42, 0x5a, 0x4d, 0xa2, 0x0b, 0xd8, 0xd3, 0x83, 0x20, 0x65, 0x59, 0xa6, 0xed, 0x9e,
	0x2b, 0x17, 0xfb, 0xaf, 0xbb, 0xb2, 0x0c, 0x89, 0xd2, 0x92, 0x46, 0x5f, 0x41, 0x97, 0xe4, 0xec,
	0x31, 0xeb, 0xb3, 0x30, 0xbe, 0x77, 0x93, 0x28, 0xd0, 0xf6, 0xce, 0xeb, 0x17, 0xdd, 0x65, 0xdd,
	0x82, 0xa4, 0x1b, 0x1a, 0x44, 0x00, 0x5d, 0xcd, 0xa3, 0xf7, 0x61, 0x14, 0x3d, 0xb2, 0x38, 0xb7,
	0x67, 0x79, 0x98, 0xc4, 0x99, 0xd6, 0x14, 0x9e, 0x9f, 0x49, 0xcf, 0x6d, 0x01, 0xad, 0x70, 0x42,
	0x6f, 0xa0, 0xed, 0x3e, 0x24, 0x33, 0x97, 0xe5, 0x79, 0x18, 0xdf, 0x67, 0x5a, 0x4b, 0xec, 0xf7,
	0x40, 0x06, 0x29, 0x61, 0xba, 0x26, 0x42, 0x7f, 0x80, 0x03, 0x77, 0x3e, 0x9b, 0x25, 0x69, 0xce,
	0x02, 0xc3, 0x9f, 0x67, 0x2c, 0xd3, 0x40, 0x24, 0x3f, 0x29, 0xfd, 0xd6, 0x59, 0xba, 0x29, 0x47,
	0x2a, 0xd4, 0xfb, 0x61, 0xa2, 0xed, 0x8b, 0x53, 0xe4, 0x4b, 0x74, 0x0a, 0xcd, 0x21, 0xf3, 0x83,
	0x28, 0x8c, 0x99, 0xd6, 0x16, 0xf0, 0xd2, 0x46, 0x47, 0xd0, 0x70, 0x1e, 0x92, 0x98, 0x69, 0x1d,
	0x41, 0x14, 0x06, 0x42, 0xb0, 0xe3, 0xf9, 0xf7, 0x99, 0xd6, 0x3d, 0xaf, 0x5f, 0xb4, 0xa8, 0x58,
	0xf7, 0xbe, 0x87, 0x86, 0x68, 0x15, 0xf4, 0x0a, 0x5a, 0x57, 0x61, 0x9a, 0xe5, 0xa2, 0x3f, 0x14,
	0xe1, 0xf6, 0x0c, 0xf0, 0x64, 0x96, 0x2f, 0xc9, 0xa2, 0x79, 0x96, 0x36, 0x4f, 0xb6, 0xda, 0x30,
	0x85, 0x81, 0x34, 0xd8, 0x33, 0x92, 0x79, 0x9c, 0xa7, 0x0b, 0xd9, 0x25, 0xa5, 0xd9, 0xfb, 0xab,
	0xb2, 0xbc, 0x6d, 0xae, 0x2a, 0x2f, 0xbe, 0xc8, 0xb9, 0x64, 0x10, 0xec, 0x8c, 0xe3, 0x30, 0x97,
	0xd9, 0xc4, 0x9a, 0xab, 0xbf, 0x0b, 0x67, 0x46, 0x12, 0x30, 0x99, 0xab, 0x34, 0xb9, 0xda, 0x08,
	0xf3, 0x32, 0x95, 0x58, 0xf3, 0x7d, 0xb9, 0xb9, 0x9f, 0x97, 0xad, 0x57, 0x18, 0xbc, 0xce, 0x28,
	0x89, 0xef, 0xc3, 0x7c, 0x1e, 0x30, 0xd1, 0x6c, 0x2d, 0xfa, 0x0c, 0x08, 0xd6, 0xcf, 0xf3, 0x82,
	0xdd, 0x93, 0x6c, 0x09, 0xf4, 0xfe, 0x54, 0x83, 0xe6, 0xf2, 0x4e, 0x7f, 0x07, 0x5d, 0xc7, 0x5f,
	0xf0, 0xd6, 0x30, 0x59, 0xee, 0x87, 0x51, 0xd9, 0x0a, 0xc7, 0xf2, 0x4a, 0xd7, 0x49, 0xba, 0x21,
	0x46, 0xbf, 0x02, 0xe0, 0x2d, 0xe2, 0x24, 0x51, 0x38, 0x5d, 0x68, 0x20, 0x5c, 0x3b, 0xa5, 0xab,
	0x00, 0xe9, 0x8a, 0x00, 0xbd, 0x81, 0x8e, 0x93, 0x86, 0x1f, 0xfc, 0xe9, 0x42, 0x7a, 0xec, 0x57,
	0x79, 0xac, 0x6b, 0xd0, 0x6f, 0xa0, 0x4d, 0xd9, 0xfb, 0x79, 0x1c, 0x48, 0x9f, 0x76, 0x95, 0xcf,
	0x9a, 0x04, 0x7d, 0x0d, 0x5d, 0xf7, 0x21, 0x9c, 0xcd, 0xc2, 0xf8, 0x5e, 0x3a, 0x75, 0xaa, 0x9c,
	0x36, 0x44, 0xbd, 0xff, 0xd4, 0x36, 0x4f, 0x03, 0x51, 0xd0, 0xf4, 0xe9, 0x94, 0xcd, 0x78, 0x0f,
	0xa7, 0x2c, 0x08, 0x73, 0xc3, 0x4f, 0x83, 0x7e, 0xea, 0xc7, 0x41, 0x31, 0xab, 0x9e, 0x9b, 0x7f,
	0x83, 0xa6, 0x3f, 0xe8, 0x87, 0x30, 0x1c, 0x3a, 0x69, 0xf8, 0xe8, 0xa7, 0x0b, 0x63, 0x9e, 0xa6,
	0x2c, 0x9e, 0x2e, 0x44, 0x33, 0xf0, 0x1e, 0xe9, 0xbe, 0x3e, 0x2c, 0xc3, 0xad, 0x50, 0xb4, 0x4a,
	0x8f, 0x06, 0x70, 0x84, 0x63, 0xff, 0x5d, 0xc4, 0x82, 0x55, 0x38, 0xd3, 0xea, 0x62, 0x5b, 0x95,
	0x71, 0x2a, 0x1d, 0xd0, 0x2f, 0xe1, 0xa5, 0xac, 0x3a, 0xd3, 0xa7, 0x53, 0xde, 0xdf, 0x72, 0x28,
	0x76, 0xe8, 0x36, 0x81, 0x6e, 0xe0, 0xa4, 0xac, 0xcc, 0x0c, 0xef, 0xc3, 0xdc, 0x8f, 0xbe, 0xf5,
	0xa3, 0x88, 0xe5, 0x99, 0xd6, 0x10, 0x89, 0xcb, 0xce, 0x59, 0x27, 0xe9, 0x0f, 0x38, 0xf5, 0xae,
	0x61, 0x57, 0x5e, 0x1a, 0x82, 0x9d, 0x7e, 0x12, 0x2c, 0xe4, 0x13, 0x12, 0x6b, 0x74, 0x02, 0xbb,
	0x43, 0x3f, 0x0e, 0xa2, 0xf2, 0xbd, 0x4a, 0x8b, 0xbf, 0x0a, 0x2f, 0xcc, 0xa3, 0xf2, 0x05, 0x15,
	0x46, 0x4f, 0x87, 0x23, 0x23, 0x65, 0x7c, 0x2e, 0x17, 0xbb, 0xa5, 0xec, 0xfb, 0x39, 0xcb, 0x72,
	0xf4, 0x73, 0xd8, 0x93, 0x88, 0x08, 0xfe, 0x3c, 0xe8, 0xca, 0x0f, 0x10, 0x2d, 0xf9, 0xde, 0xcf,
	0xe0, 0x78, 0x23, 0x44, 0x36, 0x4b, 0xe2, 0x8c, 0xa1, 0x2e, 0xd4, 0x88, 0x29, 0xdc, 0x3b, 0xb4,
	0x46, 0xcc, 0xde, 0x17, 0x70, 0x64, 0xb2, 0x88, 0x6d, 0xe5, 0xda, 0xd4, 0x7d, 0x0d, 0xc7, 0x1b,
	0x3a, 0x19, 0xf0, 0x15, 0xb4, 0x48, 0x56, 0x50, 0x81, 0xd0, 0x37, 0xe9, 0x33, 0xd0, 0x7b, 0x0b,
	0x47, 0xe3, 0x59, 0xe0, 0x7f, 0x2c, 0xfc, 0x6a, 0x69, 0xb5, 0x8f, 0x94, 0xd6, 0x87, 0xe3, 0x8d,
	0x90, 0x72, 0x27, 0x9f, 0x70, 0x3c, 0x3f, 0x85, 0x97, 0x03, 0x96, 0x7f, 0xa4, 0xe4, 0xdf, 0x03,
	0x5a, 0x15, 0x7d, 0x7a, 0x96, 0x2f, 0x56, 0x03, 0x64, 0x65, 0x1a, 0x15, 0xea, 0xc4, 0x2c, 0x5e,
	0x5d, 0x87, 0xf2, 0x65, 0xaf, 0x0f, 0x87, 0x6b, 0x3a, 0x99, 0xe9, 0x17, 0xd0, 0x2c, 0x31, 0xf9,
	0x7b, 0x62, 0x2b, 0xd5, 0x52, 0x70, 0xf9, 0x5b, 0x38, 0xd8, 0x78, 0xa0, 0xa8, 0x09, 0x3b, 0xb7,
	0xc4, 0xd5, 0xd5, 0x17, 0xa8, 0x0b, 0x70, 0xa3, 0xbb, 0x1e, 0xa6, 0x86, 0x4e, 0x4d, 0x55, 0x41,
	0x6d, 0x68, 0x9a, 0xc4, 0x35, 0xec, 0x5b, 0x4c, 0xd5, 0xda, 0xe5, 0x7b, 0x68, 0x88, 0x2f, 0x34,
	0x42, 0xd0, 0x75, 0x86, 0x77, 0x2e, 0x31, 0x74, 0x6b, 0x42, 0x3c, 0x7c, 0xe3, 0x4a, 0x57, 0x3c,
	0x1a, 0x4b, 0x5b, 0x41, 0x1d, 0x68, 0x99, 0xf6, 0x48, 0xf7, 0x88, 0x3d, 0x72, 0xd5, 0x1a, 0xda,
	0x87, 0x3d, 0x8f, 0x18, 0xdf, 0x60, 0xcf, 0x55, 0xeb, 0xe8, 0x00, 0xf6, 0x6f, 0xf0, 0x4d, 0x1f,
	0x53, 0x77, 0x48, 0x1c, 0x57, 0xdd, 0xe1, 0x79, 0x5c, 0x4c, 0x6f, 0x89, 0x81, 0x5d, 0xb5, 0x71,
	0xf9, 0xae, 0xea, 0xbb, 0xcf, 0x13, 0x70, 0xf9, 0x32, 0xa1, 0x0a, 0x6d, 0xdd, 0xb2, 0xec, 0x6f,
	0x27, 0x0e, 0x31, 0xbe, 0x19, 0x3b, 0xaa, 0xc2, 0xb7, 0x55, 0x20, 0x26, 0xb6, 0xc8, 0x2d, 0xa6,
	0x77, 0x6a, 0x0d, 0x9d, 0x00, 0x2a, 0x30, 0x17, 0x5b, 0x57, 0x13, 0x99, 0x44, 0xad, 0x5f, 0x9e,
	0x43, 0x7b, 0x6d, 0xb8, 0xec, 0x41, 0x7d, 0xec, 0x9a, 0xea, 0x0b, 0xbe, 0x18, 0xf4, 0x1d, 0x55,
	0xb9, 0x7c, 0x0b, 0xdd, 0xf5, 0xa7, 0xcb, 0xb7, 0xad, 0x8f, 0x4c, 0x6a, 0x13, 0x73, 0xe2, 0xe8,
	0x77, 0xea, 0x0b, 0x5e, 0xa3, 0xee, 0x38, 0x16, 0x16, 0xa6, 0xc2, 0x77, 0x38, 0xb0, 0xed, 0x81,
	0xb4, 0x6b, 0x5c, 0xef, 0x0e, 0x6d, 0x87, 0x5c, 0xdd, 0x09, 0xa0, 0x7e, 0xf9, 0xe7, 0xda, 0xd6,
	0x2f, 0x0a, 0xf4, 0x12, 0x3a, 0xb7, 0xb6, 0x47, 0x46, 0x83, 0x09, 0x25, 0x83, 0xa1, 0xc7, 0x2b,
	0x3b, 0x84, 0x03, 0xc3, 0x22, 0x37, 0xba, 0x87, 0x27, 0xd7, 0x63, 0xd7, 0xe3, 0x1b, 0x16, 0xc1,
	0x87, 0x58, 0xb7, 0xbc, 0xa1, 0xa1, 0x53, 0xac, 0xd6, 0x78, 0xb1, 0x14, 0x5f, 0x8d, 0x07, 0x18,
	0x4f, 0x0c, 0x4a, 0x5c, 0xc2, 0xcf, 0x95, 0x63, 0xba, 0x41, 0x74, 0x6b, 0xe9, 0xb7, 0xc3, 0xfd,
	0xc8, 0xc8, 0xb0, 0x6f, 0xf0, 0x64, 0xa0, 0x3b, 0x6a, 0x83, 0x1f, 0xdb, 0x60, 0x3c, 0x9a, 0xdc,
	0x12, 0xdb, 0xc2, 0x23, 0x03, 0xab, 0xbb, 0xe8, 0x14, 0x4e, 0x86, 0xe3, 0xd1, 0x00, 0xd3, 0xc9,
	0x95, 0x6d, 0x9b, 0x13, 0x32, 0x72, 0xb1, 0x31, 0xa6, 0xc4, 0xbb, 0x53, 0xf7, 0xf8, 0xc5, 0xe0,
	0xb7, 0x63, 0xdd, 0xe2, 0x56, 0x13, 0xb5, 0xa0, 0x61, 0xf5, 0x07, 0xde, 0x5b, 0xb5, 0xc5, 0x4b,
	0xc7, 0xe6, 0xd8, 0x10, 0xf7, 0xab, 0x02, 0x3f, 0xe6, 0x2b, 0x9b, 0x1a, 0xd8, 0x9c, 0x18, 0x43,
	0x62, 0x99, 0x13, 0x4b, 0xef, 0xdb, 0x54, 0xdd, 0x47, 0x3f, 0x82, 0xc3, 0x02, 0xd0, 0xfb, 0x63,
	0x17, 0x4f, 0x46, 0x78, 0x60, 0x61, 0xc3, 0x53, 0xdb, 0x7c, 0x1b, 0x06, 0xb9, 0x25, 0x56, 0x59,
	0x75, 0x87, 0x77, 0x88, 0xc3, 0x1b, 0xcd, 0xbb, 0x53, 0xbb, 0xaf, 0xff, 0x57, 0x83, 0x83, 0xb2,
	0x79, 0xdd, 0xe2, 0xe7, 0x34, 0xba, 0x86, 0xce, 0xda, 0xa8, 0x42, 0x3f, 0x7e, 0xfe, 0x12, 0x6d,
	0x0d, 0x8e, 0xd3, 0x57, 0xd5, 0xa4, 0x7c, 0x32, 0xd7, 0xd0, 0x59, 0x9b, 0x0d, 0xcb, 0x58, 0x55,
	0x43, 0x68, 0x19, 0xab, 0x7a, 0x9c, 0x5c, 0x43, 0x67, 0x6d, 0xe2, 0x2d, 0x63, 0x55, 0xcd, 0xcb,
	0x65, 0xac, 0xea, 0x21, 0xa9, 0x03, 0x3c, 0xbf, 0x70, 0xa4, 0x49, 0xed, 0xd6, 0x08, 0x3a, 0xfd,
	0xac, 0x82, 0x91, 0x21, 0x4c, 0xd8, 0x5f, 0x19, 0x12, 0x68, 0x5b, 0x59, 0x0e, 0x98, 0xd3, 0xd3,
	0x2a, 0xaa, 0x88, 0xd2, 0xff, 0xc9, 0x7f, 0xff, 0x7d, 0xa6, 0xfc, 0xe5, 0xe9, 0x4c, 0xf9, 0xdb,
	0xd3, 0x99, 0xf2, 0xf7, 0xa7, 0x33, 0xe5, 0x9f, 0x4f, 0x67, 0xca, 0xbf, 0x9e, 0xce, 0x94, 0xef,
	0x8a, 0xff, 0x67, 0xde, 0xed, 0x8a, 0x3f, 0x6f, 0xfe, 0x1f, 0x00, 0x00, 0xff, 0xff, 0x34, 0x1a,
	0x9f, 0x04, 0xfd, 0x0c, 0x00, 0x00,
}

func (this *Merchant) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Merchant)
	if !ok {
		that2, ok := that.(Merchant)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Owners) != len(that1.Owners) {
		return false
	}
	for i := range this.Owners {
		if !this.Owners[i].Equal(that1.Owners[i]) {
			return false
		}
	}
	if this.BusinessName != that1.BusinessName {
		return false
	}
	if this.BusinessEmail != that1.BusinessEmail {
		return false
	}
	if this.EmployerID != that1.EmployerID {
		return false
	}
	if this.EstimateAnnualRevenue != that1.EstimateAnnualRevenue {
		return false
	}
	if !this.Address.Equal(that1.Address) {
		return false
	}
	if len(this.ItemsBeingSold) != len(that1.ItemsBeingSold) {
		return false
	}
	for i := range this.ItemsBeingSold {
		if this.ItemsBeingSold[i] != that1.ItemsBeingSold[i] {
			return false
		}
	}
	if len(this.FulfillmentOptions) != len(that1.FulfillmentOptions) {
		return false
	}
	for i := range this.FulfillmentOptions {
		if this.FulfillmentOptions[i] != that1.FulfillmentOptions[i] {
			return false
		}
	}
	if !this.ShopSettings.Equal(that1.ShopSettings) {
		return false
	}
	if len(this.SupportedCauses) != len(that1.SupportedCauses) {
		return false
	}
	for i := range this.SupportedCauses {
		if this.SupportedCauses[i] != that1.SupportedCauses[i] {
			return false
		}
	}
	if this.Bio != that1.Bio {
		return false
	}
	if this.Headline != that1.Headline {
		return false
	}
	if this.Phone != that1.Phone {
		return false
	}
	if len(this.Tags) != len(that1.Tags) {
		return false
	}
	for i := range this.Tags {
		if this.Tags[i] != that1.Tags[i] {
			return false
		}
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *Owner) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Owner)
	if !ok {
		that2, ok := that.(Owner)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.FirstName != that1.FirstName {
		return false
	}
	if this.LastName != that1.LastName {
		return false
	}
	if this.Email != that1.Email {
		return false
	}
	if this.Country != that1.Country {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *Address) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Address)
	if !ok {
		that2, ok := that.(Address)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Address != that1.Address {
		return false
	}
	if this.Unit != that1.Unit {
		return false
	}
	if this.ZipCode != that1.ZipCode {
		return false
	}
	if this.City != that1.City {
		return false
	}
	if this.State != that1.State {
		return false
	}
	if this.Longitude != that1.Longitude {
		return false
	}
	if this.Lattitude != that1.Lattitude {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *Settings) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Settings)
	if !ok {
		that2, ok := that.(Settings)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.PaymentDetails.Equal(that1.PaymentDetails) {
		return false
	}
	if !this.ShopPolicy.Equal(that1.ShopPolicy) {
		return false
	}
	if !this.PrivacyPolicy.Equal(that1.PrivacyPolicy) {
		return false
	}
	if !this.RefundPolicy.Equal(that1.RefundPolicy) {
		return false
	}
	if !this.ShippingPolicy.Equal(that1.ShippingPolicy) {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *PaymentDetails) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*PaymentDetails)
	if !ok {
		that2, ok := that.(PaymentDetails)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.AcceptedCreditCardBrands) != len(that1.AcceptedCreditCardBrands) {
		return false
	}
	for i := range this.AcceptedCreditCardBrands {
		if this.AcceptedCreditCardBrands[i] != that1.AcceptedCreditCardBrands[i] {
			return false
		}
	}
	if this.PrimaryCurrencyCode != that1.PrimaryCurrencyCode {
		return false
	}
	if len(this.EnabledCurrencyCodes) != len(that1.EnabledCurrencyCodes) {
		return false
	}
	for i := range this.EnabledCurrencyCodes {
		if this.EnabledCurrencyCodes[i] != that1.EnabledCurrencyCodes[i] {
			return false
		}
	}
	if this.PaymentsAccountID != that1.PaymentsAccountID {
		return false
	}
	if len(this.AcceptedDigitalWallets) != len(that1.AcceptedDigitalWallets) {
		return false
	}
	for i := range this.AcceptedDigitalWallets {
		if this.AcceptedDigitalWallets[i] != that1.AcceptedDigitalWallets[i] {
			return false
		}
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *Policy) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Policy)
	if !ok {
		that2, ok := that.(Policy)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Body != that1.Body {
		return false
	}
	if this.Handle != that1.Handle {
		return false
	}
	if this.Title != that1.Title {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *CreateAccountRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateAccountRequest)
	if !ok {
		that2, ok := that.(CreateAccountRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Account.Equal(that1.Account) {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *CreateAccountResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateAccountResponse)
	if !ok {
		that2, ok := that.(CreateAccountResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.ID != that1.ID {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *DeleteAccountRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*DeleteAccountRequest)
	if !ok {
		that2, ok := that.(DeleteAccountRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.ID != that1.ID {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *DeleteAccountResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*DeleteAccountResponse)
	if !ok {
		that2, ok := that.(DeleteAccountResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.IsDeleted != that1.IsDeleted {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *UpdateAccountRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*UpdateAccountRequest)
	if !ok {
		that2, ok := that.(UpdateAccountRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.ID != that1.ID {
		return false
	}
	if !this.Account.Equal(that1.Account) {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *UpdateAccountResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*UpdateAccountResponse)
	if !ok {
		that2, ok := that.(UpdateAccountResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Account.Equal(that1.Account) {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *GetAccountRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetAccountRequest)
	if !ok {
		that2, ok := that.(GetAccountRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.ID != that1.ID {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *GetAccountResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetAccountResponse)
	if !ok {
		that2, ok := that.(GetAccountResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Account.Equal(that1.Account) {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *GetAccountsRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetAccountsRequest)
	if !ok {
		that2, ok := that.(GetAccountsRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.IDs) != len(that1.IDs) {
		return false
	}
	for i := range this.IDs {
		if this.IDs[i] != that1.IDs[i] {
			return false
		}
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *GetAccountsResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetAccountsResponse)
	if !ok {
		that2, ok := that.(GetAccountsResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Accounts) != len(that1.Accounts) {
		return false
	}
	for i := range this.Accounts {
		if !this.Accounts[i].Equal(that1.Accounts[i]) {
			return false
		}
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// MerchantServiceClient is the client API for MerchantService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MerchantServiceClient interface {
	// creates a merchant account
	CreateAccount(ctx context.Context, in *CreateAccountRequest, opts ...grpc.CallOption) (*CreateAccountResponse, error)
	// updates a merchant account
	UpdateAccount(ctx context.Context, in *UpdateAccountRequest, opts ...grpc.CallOption) (*UpdateAccountResponse, error)
	// delete a merchant account
	DeleteAccount(ctx context.Context, in *DeleteAccountRequest, opts ...grpc.CallOption) (*DeleteAccountResponse, error)
	// get a merchant account
	GetAccount(ctx context.Context, in *GetAccountRequest, opts ...grpc.CallOption) (*GetAccountResponse, error)
	// get a set of merchant accounts
	GetAccounts(ctx context.Context, in *GetAccountsRequest, opts ...grpc.CallOption) (*GetAccountsResponse, error)
}

type merchantServiceClient struct {
	cc *grpc.ClientConn
}

func NewMerchantServiceClient(cc *grpc.ClientConn) MerchantServiceClient {
	return &merchantServiceClient{cc}
}

func (c *merchantServiceClient) CreateAccount(ctx context.Context, in *CreateAccountRequest, opts ...grpc.CallOption) (*CreateAccountResponse, error) {
	out := new(CreateAccountResponse)
	err := c.cc.Invoke(ctx, "/proto.MerchantService/CreateAccount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *merchantServiceClient) UpdateAccount(ctx context.Context, in *UpdateAccountRequest, opts ...grpc.CallOption) (*UpdateAccountResponse, error) {
	out := new(UpdateAccountResponse)
	err := c.cc.Invoke(ctx, "/proto.MerchantService/UpdateAccount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *merchantServiceClient) DeleteAccount(ctx context.Context, in *DeleteAccountRequest, opts ...grpc.CallOption) (*DeleteAccountResponse, error) {
	out := new(DeleteAccountResponse)
	err := c.cc.Invoke(ctx, "/proto.MerchantService/DeleteAccount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *merchantServiceClient) GetAccount(ctx context.Context, in *GetAccountRequest, opts ...grpc.CallOption) (*GetAccountResponse, error) {
	out := new(GetAccountResponse)
	err := c.cc.Invoke(ctx, "/proto.MerchantService/GetAccount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *merchantServiceClient) GetAccounts(ctx context.Context, in *GetAccountsRequest, opts ...grpc.CallOption) (*GetAccountsResponse, error) {
	out := new(GetAccountsResponse)
	err := c.cc.Invoke(ctx, "/proto.MerchantService/GetAccounts", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MerchantServiceServer is the server API for MerchantService service.
type MerchantServiceServer interface {
	// creates a merchant account
	CreateAccount(context.Context, *CreateAccountRequest) (*CreateAccountResponse, error)
	// updates a merchant account
	UpdateAccount(context.Context, *UpdateAccountRequest) (*UpdateAccountResponse, error)
	// delete a merchant account
	DeleteAccount(context.Context, *DeleteAccountRequest) (*DeleteAccountResponse, error)
	// get a merchant account
	GetAccount(context.Context, *GetAccountRequest) (*GetAccountResponse, error)
	// get a set of merchant accounts
	GetAccounts(context.Context, *GetAccountsRequest) (*GetAccountsResponse, error)
}

// UnimplementedMerchantServiceServer can be embedded to have forward compatible implementations.
type UnimplementedMerchantServiceServer struct {
}

func (*UnimplementedMerchantServiceServer) CreateAccount(ctx context.Context, req *CreateAccountRequest) (*CreateAccountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAccount not implemented")
}
func (*UnimplementedMerchantServiceServer) UpdateAccount(ctx context.Context, req *UpdateAccountRequest) (*UpdateAccountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateAccount not implemented")
}
func (*UnimplementedMerchantServiceServer) DeleteAccount(ctx context.Context, req *DeleteAccountRequest) (*DeleteAccountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteAccount not implemented")
}
func (*UnimplementedMerchantServiceServer) GetAccount(ctx context.Context, req *GetAccountRequest) (*GetAccountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAccount not implemented")
}
func (*UnimplementedMerchantServiceServer) GetAccounts(ctx context.Context, req *GetAccountsRequest) (*GetAccountsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAccounts not implemented")
}

func RegisterMerchantServiceServer(s *grpc.Server, srv MerchantServiceServer) {
	s.RegisterService(&_MerchantService_serviceDesc, srv)
}

func _MerchantService_CreateAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MerchantServiceServer).CreateAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.MerchantService/CreateAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MerchantServiceServer).CreateAccount(ctx, req.(*CreateAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MerchantService_UpdateAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MerchantServiceServer).UpdateAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.MerchantService/UpdateAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MerchantServiceServer).UpdateAccount(ctx, req.(*UpdateAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MerchantService_DeleteAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MerchantServiceServer).DeleteAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.MerchantService/DeleteAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MerchantServiceServer).DeleteAccount(ctx, req.(*DeleteAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MerchantService_GetAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MerchantServiceServer).GetAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.MerchantService/GetAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MerchantServiceServer).GetAccount(ctx, req.(*GetAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MerchantService_GetAccounts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAccountsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MerchantServiceServer).GetAccounts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.MerchantService/GetAccounts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MerchantServiceServer).GetAccounts(ctx, req.(*GetAccountsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _MerchantService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "proto.MerchantService",
	HandlerType: (*MerchantServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateAccount",
			Handler:    _MerchantService_CreateAccount_Handler,
		},
		{
			MethodName: "UpdateAccount",
			Handler:    _MerchantService_UpdateAccount_Handler,
		},
		{
			MethodName: "DeleteAccount",
			Handler:    _MerchantService_DeleteAccount_Handler,
		},
		{
			MethodName: "GetAccount",
			Handler:    _MerchantService_GetAccount_Handler,
		},
		{
			MethodName: "GetAccounts",
			Handler:    _MerchantService_GetAccounts_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/merchant_service.proto",
}

func (m *Merchant) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Merchant) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Merchant) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Tags) > 0 {
		for iNdEx := len(m.Tags) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Tags[iNdEx])
			copy(dAtA[i:], m.Tags[iNdEx])
			i = encodeVarintMerchantService(dAtA, i, uint64(len(m.Tags[iNdEx])))
			i--
			dAtA[i] = 0x72
		}
	}
	if len(m.Phone) > 0 {
		i -= len(m.Phone)
		copy(dAtA[i:], m.Phone)
		i = encodeVarintMerchantService(dAtA, i, uint64(len(m.Phone)))
		i--
		dAtA[i] = 0x6a
	}
	if len(m.Headline) > 0 {
		i -= len(m.Headline)
		copy(dAtA[i:], m.Headline)
		i = encodeVarintMerchantService(dAtA, i, uint64(len(m.Headline)))
		i--
		dAtA[i] = 0x62
	}
	if len(m.Bio) > 0 {
		i -= len(m.Bio)
		copy(dAtA[i:], m.Bio)
		i = encodeVarintMerchantService(dAtA, i, uint64(len(m.Bio)))
		i--
		dAtA[i] = 0x5a
	}
	if len(m.SupportedCauses) > 0 {
		dAtA2 := make([]byte, len(m.SupportedCauses)*10)
		var j1 int
		for _, num := range m.SupportedCauses {
			for num >= 1<<7 {
				dAtA2[j1] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j1++
			}
			dAtA2[j1] = uint8(num)
			j1++
		}
		i -= j1
		copy(dAtA[i:], dAtA2[:j1])
		i = encodeVarintMerchantService(dAtA, i, uint64(j1))
		i--
		dAtA[i] = 0x52
	}
	if m.ShopSettings != nil {
		{
			size, err := m.ShopSettings.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMerchantService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x4a
	}
	if len(m.FulfillmentOptions) > 0 {
		dAtA5 := make([]byte, len(m.FulfillmentOptions)*10)
		var j4 int
		for _, num := range m.FulfillmentOptions {
			for num >= 1<<7 {
				dAtA5[j4] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j4++
			}
			dAtA5[j4] = uint8(num)
			j4++
		}
		i -= j4
		copy(dAtA[i:], dAtA5[:j4])
		i = encodeVarintMerchantService(dAtA, i, uint64(j4))
		i--
		dAtA[i] = 0x42
	}
	if len(m.ItemsBeingSold) > 0 {
		dAtA7 := make([]byte, len(m.ItemsBeingSold)*10)
		var j6 int
		for _, num := range m.ItemsBeingSold {
			for num >= 1<<7 {
				dAtA7[j6] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j6++
			}
			dAtA7[j6] = uint8(num)
			j6++
		}
		i -= j6
		copy(dAtA[i:], dAtA7[:j6])
		i = encodeVarintMerchantService(dAtA, i, uint64(j6))
		i--
		dAtA[i] = 0x3a
	}
	if m.Address != nil {
		{
			size, err := m.Address.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMerchantService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	if len(m.EstimateAnnualRevenue) > 0 {
		i -= len(m.EstimateAnnualRevenue)
		copy(dAtA[i:], m.EstimateAnnualRevenue)
		i = encodeVarintMerchantService(dAtA, i, uint64(len(m.EstimateAnnualRevenue)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.EmployerID) > 0 {
		i -= len(m.EmployerID)
		copy(dAtA[i:], m.EmployerID)
		i = encodeVarintMerchantService(dAtA, i, uint64(len(m.EmployerID)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.BusinessEmail) > 0 {
		i -= len(m.BusinessEmail)
		copy(dAtA[i:], m.BusinessEmail)
		i = encodeVarintMerchantService(dAtA, i, uint64(len(m.BusinessEmail)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.BusinessName) > 0 {
		i -= len(m.BusinessName)
		copy(dAtA[i:], m.BusinessName)
		i = encodeVarintMerchantService(dAtA, i, uint64(len(m.BusinessName)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Owners) > 0 {
		for iNdEx := len(m.Owners) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Owners[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintMerchantService(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *Owner) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Owner) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Owner) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Country) > 0 {
		i -= len(m.Country)
		copy(dAtA[i:], m.Country)
		i = encodeVarintMerchantService(dAtA, i, uint64(len(m.Country)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Email) > 0 {
		i -= len(m.Email)
		copy(dAtA[i:], m.Email)
		i = encodeVarintMerchantService(dAtA, i, uint64(len(m.Email)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.LastName) > 0 {
		i -= len(m.LastName)
		copy(dAtA[i:], m.LastName)
		i = encodeVarintMerchantService(dAtA, i, uint64(len(m.LastName)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.FirstName) > 0 {
		i -= len(m.FirstName)
		copy(dAtA[i:], m.FirstName)
		i = encodeVarintMerchantService(dAtA, i, uint64(len(m.FirstName)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Address) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Address) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Address) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Lattitude) > 0 {
		i -= len(m.Lattitude)
		copy(dAtA[i:], m.Lattitude)
		i = encodeVarintMerchantService(dAtA, i, uint64(len(m.Lattitude)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.Longitude) > 0 {
		i -= len(m.Longitude)
		copy(dAtA[i:], m.Longitude)
		i = encodeVarintMerchantService(dAtA, i, uint64(len(m.Longitude)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.State) > 0 {
		i -= len(m.State)
		copy(dAtA[i:], m.State)
		i = encodeVarintMerchantService(dAtA, i, uint64(len(m.State)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.City) > 0 {
		i -= len(m.City)
		copy(dAtA[i:], m.City)
		i = encodeVarintMerchantService(dAtA, i, uint64(len(m.City)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.ZipCode) > 0 {
		i -= len(m.ZipCode)
		copy(dAtA[i:], m.ZipCode)
		i = encodeVarintMerchantService(dAtA, i, uint64(len(m.ZipCode)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Unit) > 0 {
		i -= len(m.Unit)
		copy(dAtA[i:], m.Unit)
		i = encodeVarintMerchantService(dAtA, i, uint64(len(m.Unit)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintMerchantService(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Settings) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Settings) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Settings) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.ShippingPolicy != nil {
		{
			size, err := m.ShippingPolicy.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMerchantService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x6a
	}
	if m.RefundPolicy != nil {
		{
			size, err := m.RefundPolicy.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMerchantService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x62
	}
	if m.PrivacyPolicy != nil {
		{
			size, err := m.PrivacyPolicy.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMerchantService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x5a
	}
	if m.ShopPolicy != nil {
		{
			size, err := m.ShopPolicy.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMerchantService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x52
	}
	if m.PaymentDetails != nil {
		{
			size, err := m.PaymentDetails.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMerchantService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x4a
	}
	return len(dAtA) - i, nil
}

func (m *PaymentDetails) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PaymentDetails) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PaymentDetails) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.AcceptedDigitalWallets) > 0 {
		dAtA15 := make([]byte, len(m.AcceptedDigitalWallets)*10)
		var j14 int
		for _, num := range m.AcceptedDigitalWallets {
			for num >= 1<<7 {
				dAtA15[j14] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j14++
			}
			dAtA15[j14] = uint8(num)
			j14++
		}
		i -= j14
		copy(dAtA[i:], dAtA15[:j14])
		i = encodeVarintMerchantService(dAtA, i, uint64(j14))
		i--
		dAtA[i] = 0x2a
	}
	if m.PaymentsAccountID != 0 {
		i = encodeVarintMerchantService(dAtA, i, uint64(m.PaymentsAccountID))
		i--
		dAtA[i] = 0x20
	}
	if len(m.EnabledCurrencyCodes) > 0 {
		dAtA17 := make([]byte, len(m.EnabledCurrencyCodes)*10)
		var j16 int
		for _, num := range m.EnabledCurrencyCodes {
			for num >= 1<<7 {
				dAtA17[j16] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j16++
			}
			dAtA17[j16] = uint8(num)
			j16++
		}
		i -= j16
		copy(dAtA[i:], dAtA17[:j16])
		i = encodeVarintMerchantService(dAtA, i, uint64(j16))
		i--
		dAtA[i] = 0x1a
	}
	if m.PrimaryCurrencyCode != 0 {
		i = encodeVarintMerchantService(dAtA, i, uint64(m.PrimaryCurrencyCode))
		i--
		dAtA[i] = 0x10
	}
	if len(m.AcceptedCreditCardBrands) > 0 {
		dAtA19 := make([]byte, len(m.AcceptedCreditCardBrands)*10)
		var j18 int
		for _, num := range m.AcceptedCreditCardBrands {
			for num >= 1<<7 {
				dAtA19[j18] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j18++
			}
			dAtA19[j18] = uint8(num)
			j18++
		}
		i -= j18
		copy(dAtA[i:], dAtA19[:j18])
		i = encodeVarintMerchantService(dAtA, i, uint64(j18))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Policy) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Policy) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Policy) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Title) > 0 {
		i -= len(m.Title)
		copy(dAtA[i:], m.Title)
		i = encodeVarintMerchantService(dAtA, i, uint64(len(m.Title)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Handle) > 0 {
		i -= len(m.Handle)
		copy(dAtA[i:], m.Handle)
		i = encodeVarintMerchantService(dAtA, i, uint64(len(m.Handle)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Body) > 0 {
		i -= len(m.Body)
		copy(dAtA[i:], m.Body)
		i = encodeVarintMerchantService(dAtA, i, uint64(len(m.Body)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *CreateAccountRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreateAccountRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateAccountRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Account != nil {
		{
			size, err := m.Account.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMerchantService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *CreateAccountResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreateAccountResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateAccountResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.ID != 0 {
		i = encodeVarintMerchantService(dAtA, i, uint64(m.ID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *DeleteAccountRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DeleteAccountRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DeleteAccountRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.ID != 0 {
		i = encodeVarintMerchantService(dAtA, i, uint64(m.ID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *DeleteAccountResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DeleteAccountResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DeleteAccountResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.IsDeleted {
		i--
		if m.IsDeleted {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *UpdateAccountRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateAccountRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpdateAccountRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Account != nil {
		{
			size, err := m.Account.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMerchantService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.ID != 0 {
		i = encodeVarintMerchantService(dAtA, i, uint64(m.ID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *UpdateAccountResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateAccountResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpdateAccountResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Account != nil {
		{
			size, err := m.Account.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMerchantService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GetAccountRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetAccountRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetAccountRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.ID != 0 {
		i = encodeVarintMerchantService(dAtA, i, uint64(m.ID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GetAccountResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetAccountResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetAccountResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Account != nil {
		{
			size, err := m.Account.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMerchantService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GetAccountsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetAccountsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetAccountsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.IDs) > 0 {
		dAtA25 := make([]byte, len(m.IDs)*10)
		var j24 int
		for _, num := range m.IDs {
			for num >= 1<<7 {
				dAtA25[j24] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j24++
			}
			dAtA25[j24] = uint8(num)
			j24++
		}
		i -= j24
		copy(dAtA[i:], dAtA25[:j24])
		i = encodeVarintMerchantService(dAtA, i, uint64(j24))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GetAccountsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetAccountsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetAccountsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Accounts) > 0 {
		for iNdEx := len(m.Accounts) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Accounts[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintMerchantService(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintMerchantService(dAtA []byte, offset int, v uint64) int {
	offset -= sovMerchantService(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func NewPopulatedMerchant(r randyMerchantService, easy bool) *Merchant {
	this := &Merchant{}
	if r.Intn(5) != 0 {
		v1 := r.Intn(5)
		this.Owners = make([]*Owner, v1)
		for i := 0; i < v1; i++ {
			this.Owners[i] = NewPopulatedOwner(r, easy)
		}
	}
	this.BusinessName = string(randStringMerchantService(r))
	this.BusinessEmail = string(randStringMerchantService(r))
	this.EmployerID = string(randStringMerchantService(r))
	this.EstimateAnnualRevenue = string(randStringMerchantService(r))
	if r.Intn(5) != 0 {
		this.Address = NewPopulatedAddress(r, easy)
	}
	v2 := r.Intn(10)
	this.ItemsBeingSold = make([]Items, v2)
	for i := 0; i < v2; i++ {
		this.ItemsBeingSold[i] = Items([]int32{0, 1, 2, 3, 4, 5}[r.Intn(6)])
	}
	v3 := r.Intn(10)
	this.FulfillmentOptions = make([]FulfillmentOptions, v3)
	for i := 0; i < v3; i++ {
		this.FulfillmentOptions[i] = FulfillmentOptions([]int32{0, 1, 2, 3}[r.Intn(4)])
	}
	if r.Intn(5) != 0 {
		this.ShopSettings = NewPopulatedSettings(r, easy)
	}
	v4 := r.Intn(10)
	this.SupportedCauses = make([]SupportedCauses, v4)
	for i := 0; i < v4; i++ {
		this.SupportedCauses[i] = SupportedCauses([]int32{0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14}[r.Intn(15)])
	}
	this.Bio = string(randStringMerchantService(r))
	this.Headline = string(randStringMerchantService(r))
	this.Phone = string(randStringMerchantService(r))
	v5 := r.Intn(10)
	this.Tags = make([]string, v5)
	for i := 0; i < v5; i++ {
		this.Tags[i] = string(randStringMerchantService(r))
	}
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedMerchantService(r, 15)
	}
	return this
}

func NewPopulatedOwner(r randyMerchantService, easy bool) *Owner {
	this := &Owner{}
	this.FirstName = string(randStringMerchantService(r))
	this.LastName = string(randStringMerchantService(r))
	this.Email = string(randStringMerchantService(r))
	this.Country = string(randStringMerchantService(r))
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedMerchantService(r, 5)
	}
	return this
}

func NewPopulatedAddress(r randyMerchantService, easy bool) *Address {
	this := &Address{}
	this.Address = string(randStringMerchantService(r))
	this.Unit = string(randStringMerchantService(r))
	this.ZipCode = string(randStringMerchantService(r))
	this.City = string(randStringMerchantService(r))
	this.State = string(randStringMerchantService(r))
	this.Longitude = string(randStringMerchantService(r))
	this.Lattitude = string(randStringMerchantService(r))
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedMerchantService(r, 8)
	}
	return this
}

func NewPopulatedSettings(r randyMerchantService, easy bool) *Settings {
	this := &Settings{}
	if r.Intn(5) != 0 {
		this.PaymentDetails = NewPopulatedPaymentDetails(r, easy)
	}
	if r.Intn(5) != 0 {
		this.ShopPolicy = NewPopulatedPolicy(r, easy)
	}
	if r.Intn(5) != 0 {
		this.PrivacyPolicy = NewPopulatedPolicy(r, easy)
	}
	if r.Intn(5) != 0 {
		this.RefundPolicy = NewPopulatedPolicy(r, easy)
	}
	if r.Intn(5) != 0 {
		this.ShippingPolicy = NewPopulatedPolicy(r, easy)
	}
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedMerchantService(r, 14)
	}
	return this
}

func NewPopulatedPaymentDetails(r randyMerchantService, easy bool) *PaymentDetails {
	this := &PaymentDetails{}
	v6 := r.Intn(10)
	this.AcceptedCreditCardBrands = make([]CreditCardBrand, v6)
	for i := 0; i < v6; i++ {
		this.AcceptedCreditCardBrands[i] = CreditCardBrand([]int32{0, 1, 2}[r.Intn(3)])
	}
	this.PrimaryCurrencyCode = CurrencyCode([]int32{0, 1}[r.Intn(2)])
	v7 := r.Intn(10)
	this.EnabledCurrencyCodes = make([]CurrencyCode, v7)
	for i := 0; i < v7; i++ {
		this.EnabledCurrencyCodes[i] = CurrencyCode([]int32{0, 1}[r.Intn(2)])
	}
	this.PaymentsAccountID = uint32(r.Uint32())
	v8 := r.Intn(10)
	this.AcceptedDigitalWallets = make([]DigitalWallets, v8)
	for i := 0; i < v8; i++ {
		this.AcceptedDigitalWallets[i] = DigitalWallets([]int32{0, 1, 2, 3}[r.Intn(4)])
	}
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedMerchantService(r, 6)
	}
	return this
}

func NewPopulatedPolicy(r randyMerchantService, easy bool) *Policy {
	this := &Policy{}
	this.Body = string(randStringMerchantService(r))
	this.Handle = string(randStringMerchantService(r))
	this.Title = string(randStringMerchantService(r))
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedMerchantService(r, 4)
	}
	return this
}

func NewPopulatedCreateAccountRequest(r randyMerchantService, easy bool) *CreateAccountRequest {
	this := &CreateAccountRequest{}
	if r.Intn(5) != 0 {
		this.Account = NewPopulatedMerchant(r, easy)
	}
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedMerchantService(r, 2)
	}
	return this
}

func NewPopulatedCreateAccountResponse(r randyMerchantService, easy bool) *CreateAccountResponse {
	this := &CreateAccountResponse{}
	this.ID = uint32(r.Uint32())
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedMerchantService(r, 2)
	}
	return this
}

func NewPopulatedDeleteAccountRequest(r randyMerchantService, easy bool) *DeleteAccountRequest {
	this := &DeleteAccountRequest{}
	this.ID = uint32(r.Uint32())
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedMerchantService(r, 2)
	}
	return this
}

func NewPopulatedDeleteAccountResponse(r randyMerchantService, easy bool) *DeleteAccountResponse {
	this := &DeleteAccountResponse{}
	this.IsDeleted = bool(bool(r.Intn(2) == 0))
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedMerchantService(r, 2)
	}
	return this
}

func NewPopulatedUpdateAccountRequest(r randyMerchantService, easy bool) *UpdateAccountRequest {
	this := &UpdateAccountRequest{}
	this.ID = uint32(r.Uint32())
	if r.Intn(5) != 0 {
		this.Account = NewPopulatedMerchant(r, easy)
	}
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedMerchantService(r, 3)
	}
	return this
}

func NewPopulatedUpdateAccountResponse(r randyMerchantService, easy bool) *UpdateAccountResponse {
	this := &UpdateAccountResponse{}
	if r.Intn(5) != 0 {
		this.Account = NewPopulatedMerchant(r, easy)
	}
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedMerchantService(r, 2)
	}
	return this
}

func NewPopulatedGetAccountRequest(r randyMerchantService, easy bool) *GetAccountRequest {
	this := &GetAccountRequest{}
	this.ID = uint32(r.Uint32())
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedMerchantService(r, 2)
	}
	return this
}

func NewPopulatedGetAccountResponse(r randyMerchantService, easy bool) *GetAccountResponse {
	this := &GetAccountResponse{}
	if r.Intn(5) != 0 {
		this.Account = NewPopulatedMerchant(r, easy)
	}
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedMerchantService(r, 2)
	}
	return this
}

func NewPopulatedGetAccountsRequest(r randyMerchantService, easy bool) *GetAccountsRequest {
	this := &GetAccountsRequest{}
	v9 := r.Intn(10)
	this.IDs = make([]uint32, v9)
	for i := 0; i < v9; i++ {
		this.IDs[i] = uint32(r.Uint32())
	}
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedMerchantService(r, 2)
	}
	return this
}

func NewPopulatedGetAccountsResponse(r randyMerchantService, easy bool) *GetAccountsResponse {
	this := &GetAccountsResponse{}
	if r.Intn(5) != 0 {
		v10 := r.Intn(5)
		this.Accounts = make([]*Merchant, v10)
		for i := 0; i < v10; i++ {
			this.Accounts[i] = NewPopulatedMerchant(r, easy)
		}
	}
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedMerchantService(r, 2)
	}
	return this
}

type randyMerchantService interface {
	Float32() float32
	Float64() float64
	Int63() int64
	Int31() int32
	Uint32() uint32
	Intn(n int) int
}

func randUTF8RuneMerchantService(r randyMerchantService) rune {
	ru := r.Intn(62)
	if ru < 10 {
		return rune(ru + 48)
	} else if ru < 36 {
		return rune(ru + 55)
	}
	return rune(ru + 61)
}
func randStringMerchantService(r randyMerchantService) string {
	v11 := r.Intn(100)
	tmps := make([]rune, v11)
	for i := 0; i < v11; i++ {
		tmps[i] = randUTF8RuneMerchantService(r)
	}
	return string(tmps)
}
func randUnrecognizedMerchantService(r randyMerchantService, maxFieldNumber int) (dAtA []byte) {
	l := r.Intn(5)
	for i := 0; i < l; i++ {
		wire := r.Intn(4)
		if wire == 3 {
			wire = 5
		}
		fieldNumber := maxFieldNumber + r.Intn(100)
		dAtA = randFieldMerchantService(dAtA, r, fieldNumber, wire)
	}
	return dAtA
}
func randFieldMerchantService(dAtA []byte, r randyMerchantService, fieldNumber int, wire int) []byte {
	key := uint32(fieldNumber)<<3 | uint32(wire)
	switch wire {
	case 0:
		dAtA = encodeVarintPopulateMerchantService(dAtA, uint64(key))
		v12 := r.Int63()
		if r.Intn(2) == 0 {
			v12 *= -1
		}
		dAtA = encodeVarintPopulateMerchantService(dAtA, uint64(v12))
	case 1:
		dAtA = encodeVarintPopulateMerchantService(dAtA, uint64(key))
		dAtA = append(dAtA, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	case 2:
		dAtA = encodeVarintPopulateMerchantService(dAtA, uint64(key))
		ll := r.Intn(100)
		dAtA = encodeVarintPopulateMerchantService(dAtA, uint64(ll))
		for j := 0; j < ll; j++ {
			dAtA = append(dAtA, byte(r.Intn(256)))
		}
	default:
		dAtA = encodeVarintPopulateMerchantService(dAtA, uint64(key))
		dAtA = append(dAtA, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	}
	return dAtA
}
func encodeVarintPopulateMerchantService(dAtA []byte, v uint64) []byte {
	for v >= 1<<7 {
		dAtA = append(dAtA, uint8(uint64(v)&0x7f|0x80))
		v >>= 7
	}
	dAtA = append(dAtA, uint8(v))
	return dAtA
}
func (m *Merchant) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Owners) > 0 {
		for _, e := range m.Owners {
			l = e.Size()
			n += 1 + l + sovMerchantService(uint64(l))
		}
	}
	l = len(m.BusinessName)
	if l > 0 {
		n += 1 + l + sovMerchantService(uint64(l))
	}
	l = len(m.BusinessEmail)
	if l > 0 {
		n += 1 + l + sovMerchantService(uint64(l))
	}
	l = len(m.EmployerID)
	if l > 0 {
		n += 1 + l + sovMerchantService(uint64(l))
	}
	l = len(m.EstimateAnnualRevenue)
	if l > 0 {
		n += 1 + l + sovMerchantService(uint64(l))
	}
	if m.Address != nil {
		l = m.Address.Size()
		n += 1 + l + sovMerchantService(uint64(l))
	}
	if len(m.ItemsBeingSold) > 0 {
		l = 0
		for _, e := range m.ItemsBeingSold {
			l += sovMerchantService(uint64(e))
		}
		n += 1 + sovMerchantService(uint64(l)) + l
	}
	if len(m.FulfillmentOptions) > 0 {
		l = 0
		for _, e := range m.FulfillmentOptions {
			l += sovMerchantService(uint64(e))
		}
		n += 1 + sovMerchantService(uint64(l)) + l
	}
	if m.ShopSettings != nil {
		l = m.ShopSettings.Size()
		n += 1 + l + sovMerchantService(uint64(l))
	}
	if len(m.SupportedCauses) > 0 {
		l = 0
		for _, e := range m.SupportedCauses {
			l += sovMerchantService(uint64(e))
		}
		n += 1 + sovMerchantService(uint64(l)) + l
	}
	l = len(m.Bio)
	if l > 0 {
		n += 1 + l + sovMerchantService(uint64(l))
	}
	l = len(m.Headline)
	if l > 0 {
		n += 1 + l + sovMerchantService(uint64(l))
	}
	l = len(m.Phone)
	if l > 0 {
		n += 1 + l + sovMerchantService(uint64(l))
	}
	if len(m.Tags) > 0 {
		for _, s := range m.Tags {
			l = len(s)
			n += 1 + l + sovMerchantService(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Owner) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.FirstName)
	if l > 0 {
		n += 1 + l + sovMerchantService(uint64(l))
	}
	l = len(m.LastName)
	if l > 0 {
		n += 1 + l + sovMerchantService(uint64(l))
	}
	l = len(m.Email)
	if l > 0 {
		n += 1 + l + sovMerchantService(uint64(l))
	}
	l = len(m.Country)
	if l > 0 {
		n += 1 + l + sovMerchantService(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Address) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovMerchantService(uint64(l))
	}
	l = len(m.Unit)
	if l > 0 {
		n += 1 + l + sovMerchantService(uint64(l))
	}
	l = len(m.ZipCode)
	if l > 0 {
		n += 1 + l + sovMerchantService(uint64(l))
	}
	l = len(m.City)
	if l > 0 {
		n += 1 + l + sovMerchantService(uint64(l))
	}
	l = len(m.State)
	if l > 0 {
		n += 1 + l + sovMerchantService(uint64(l))
	}
	l = len(m.Longitude)
	if l > 0 {
		n += 1 + l + sovMerchantService(uint64(l))
	}
	l = len(m.Lattitude)
	if l > 0 {
		n += 1 + l + sovMerchantService(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Settings) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PaymentDetails != nil {
		l = m.PaymentDetails.Size()
		n += 1 + l + sovMerchantService(uint64(l))
	}
	if m.ShopPolicy != nil {
		l = m.ShopPolicy.Size()
		n += 1 + l + sovMerchantService(uint64(l))
	}
	if m.PrivacyPolicy != nil {
		l = m.PrivacyPolicy.Size()
		n += 1 + l + sovMerchantService(uint64(l))
	}
	if m.RefundPolicy != nil {
		l = m.RefundPolicy.Size()
		n += 1 + l + sovMerchantService(uint64(l))
	}
	if m.ShippingPolicy != nil {
		l = m.ShippingPolicy.Size()
		n += 1 + l + sovMerchantService(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *PaymentDetails) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.AcceptedCreditCardBrands) > 0 {
		l = 0
		for _, e := range m.AcceptedCreditCardBrands {
			l += sovMerchantService(uint64(e))
		}
		n += 1 + sovMerchantService(uint64(l)) + l
	}
	if m.PrimaryCurrencyCode != 0 {
		n += 1 + sovMerchantService(uint64(m.PrimaryCurrencyCode))
	}
	if len(m.EnabledCurrencyCodes) > 0 {
		l = 0
		for _, e := range m.EnabledCurrencyCodes {
			l += sovMerchantService(uint64(e))
		}
		n += 1 + sovMerchantService(uint64(l)) + l
	}
	if m.PaymentsAccountID != 0 {
		n += 1 + sovMerchantService(uint64(m.PaymentsAccountID))
	}
	if len(m.AcceptedDigitalWallets) > 0 {
		l = 0
		for _, e := range m.AcceptedDigitalWallets {
			l += sovMerchantService(uint64(e))
		}
		n += 1 + sovMerchantService(uint64(l)) + l
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Policy) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Body)
	if l > 0 {
		n += 1 + l + sovMerchantService(uint64(l))
	}
	l = len(m.Handle)
	if l > 0 {
		n += 1 + l + sovMerchantService(uint64(l))
	}
	l = len(m.Title)
	if l > 0 {
		n += 1 + l + sovMerchantService(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *CreateAccountRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Account != nil {
		l = m.Account.Size()
		n += 1 + l + sovMerchantService(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *CreateAccountResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ID != 0 {
		n += 1 + sovMerchantService(uint64(m.ID))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *DeleteAccountRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ID != 0 {
		n += 1 + sovMerchantService(uint64(m.ID))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *DeleteAccountResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.IsDeleted {
		n += 2
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *UpdateAccountRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ID != 0 {
		n += 1 + sovMerchantService(uint64(m.ID))
	}
	if m.Account != nil {
		l = m.Account.Size()
		n += 1 + l + sovMerchantService(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *UpdateAccountResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Account != nil {
		l = m.Account.Size()
		n += 1 + l + sovMerchantService(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetAccountRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ID != 0 {
		n += 1 + sovMerchantService(uint64(m.ID))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetAccountResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Account != nil {
		l = m.Account.Size()
		n += 1 + l + sovMerchantService(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetAccountsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.IDs) > 0 {
		l = 0
		for _, e := range m.IDs {
			l += sovMerchantService(uint64(e))
		}
		n += 1 + sovMerchantService(uint64(l)) + l
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetAccountsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Accounts) > 0 {
		for _, e := range m.Accounts {
			l = e.Size()
			n += 1 + l + sovMerchantService(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovMerchantService(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozMerchantService(x uint64) (n int) {
	return sovMerchantService(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Merchant) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMerchantService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Merchant: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Merchant: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Owners", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMerchantService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMerchantService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMerchantService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Owners = append(m.Owners, &Owner{})
			if err := m.Owners[len(m.Owners)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BusinessName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMerchantService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMerchantService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMerchantService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BusinessName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BusinessEmail", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMerchantService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMerchantService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMerchantService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BusinessEmail = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EmployerID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMerchantService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMerchantService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMerchantService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EmployerID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EstimateAnnualRevenue", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMerchantService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMerchantService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMerchantService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EstimateAnnualRevenue = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMerchantService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMerchantService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMerchantService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Address == nil {
				m.Address = &Address{}
			}
			if err := m.Address.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType == 0 {
				var v Items
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowMerchantService
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= Items(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.ItemsBeingSold = append(m.ItemsBeingSold, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowMerchantService
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthMerchantService
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthMerchantService
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				if elementCount != 0 && len(m.ItemsBeingSold) == 0 {
					m.ItemsBeingSold = make([]Items, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v Items
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowMerchantService
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= Items(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.ItemsBeingSold = append(m.ItemsBeingSold, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field ItemsBeingSold", wireType)
			}
		case 8:
			if wireType == 0 {
				var v FulfillmentOptions
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowMerchantService
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= FulfillmentOptions(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.FulfillmentOptions = append(m.FulfillmentOptions, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowMerchantService
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthMerchantService
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthMerchantService
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				if elementCount != 0 && len(m.FulfillmentOptions) == 0 {
					m.FulfillmentOptions = make([]FulfillmentOptions, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v FulfillmentOptions
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowMerchantService
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= FulfillmentOptions(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.FulfillmentOptions = append(m.FulfillmentOptions, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field FulfillmentOptions", wireType)
			}
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ShopSettings", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMerchantService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMerchantService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMerchantService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ShopSettings == nil {
				m.ShopSettings = &Settings{}
			}
			if err := m.ShopSettings.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType == 0 {
				var v SupportedCauses
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowMerchantService
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= SupportedCauses(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.SupportedCauses = append(m.SupportedCauses, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowMerchantService
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthMerchantService
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthMerchantService
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				if elementCount != 0 && len(m.SupportedCauses) == 0 {
					m.SupportedCauses = make([]SupportedCauses, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v SupportedCauses
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowMerchantService
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= SupportedCauses(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.SupportedCauses = append(m.SupportedCauses, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field SupportedCauses", wireType)
			}
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Bio", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMerchantService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMerchantService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMerchantService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Bio = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Headline", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMerchantService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMerchantService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMerchantService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Headline = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Phone", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMerchantService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMerchantService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMerchantService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Phone = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tags", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMerchantService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMerchantService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMerchantService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Tags = append(m.Tags, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMerchantService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMerchantService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMerchantService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Owner) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMerchantService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Owner: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Owner: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FirstName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMerchantService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMerchantService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMerchantService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FirstName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMerchantService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMerchantService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMerchantService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LastName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Email", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMerchantService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMerchantService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMerchantService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Email = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Country", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMerchantService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMerchantService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMerchantService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Country = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMerchantService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMerchantService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMerchantService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Address) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMerchantService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Address: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Address: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMerchantService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMerchantService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMerchantService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Unit", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMerchantService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMerchantService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMerchantService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Unit = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ZipCode", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMerchantService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMerchantService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMerchantService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ZipCode = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field City", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMerchantService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMerchantService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMerchantService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.City = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMerchantService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMerchantService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMerchantService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.State = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Longitude", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMerchantService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMerchantService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMerchantService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Longitude = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Lattitude", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMerchantService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMerchantService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMerchantService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Lattitude = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMerchantService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMerchantService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMerchantService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Settings) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMerchantService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Settings: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Settings: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PaymentDetails", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMerchantService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMerchantService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMerchantService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.PaymentDetails == nil {
				m.PaymentDetails = &PaymentDetails{}
			}
			if err := m.PaymentDetails.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ShopPolicy", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMerchantService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMerchantService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMerchantService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ShopPolicy == nil {
				m.ShopPolicy = &Policy{}
			}
			if err := m.ShopPolicy.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PrivacyPolicy", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMerchantService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMerchantService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMerchantService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.PrivacyPolicy == nil {
				m.PrivacyPolicy = &Policy{}
			}
			if err := m.PrivacyPolicy.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RefundPolicy", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMerchantService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMerchantService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMerchantService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.RefundPolicy == nil {
				m.RefundPolicy = &Policy{}
			}
			if err := m.RefundPolicy.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ShippingPolicy", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMerchantService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMerchantService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMerchantService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ShippingPolicy == nil {
				m.ShippingPolicy = &Policy{}
			}
			if err := m.ShippingPolicy.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMerchantService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMerchantService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMerchantService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PaymentDetails) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMerchantService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PaymentDetails: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PaymentDetails: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType == 0 {
				var v CreditCardBrand
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowMerchantService
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= CreditCardBrand(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.AcceptedCreditCardBrands = append(m.AcceptedCreditCardBrands, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowMerchantService
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthMerchantService
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthMerchantService
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				if elementCount != 0 && len(m.AcceptedCreditCardBrands) == 0 {
					m.AcceptedCreditCardBrands = make([]CreditCardBrand, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v CreditCardBrand
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowMerchantService
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= CreditCardBrand(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.AcceptedCreditCardBrands = append(m.AcceptedCreditCardBrands, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field AcceptedCreditCardBrands", wireType)
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PrimaryCurrencyCode", wireType)
			}
			m.PrimaryCurrencyCode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMerchantService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PrimaryCurrencyCode |= CurrencyCode(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType == 0 {
				var v CurrencyCode
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowMerchantService
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= CurrencyCode(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.EnabledCurrencyCodes = append(m.EnabledCurrencyCodes, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowMerchantService
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthMerchantService
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthMerchantService
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				if elementCount != 0 && len(m.EnabledCurrencyCodes) == 0 {
					m.EnabledCurrencyCodes = make([]CurrencyCode, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v CurrencyCode
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowMerchantService
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= CurrencyCode(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.EnabledCurrencyCodes = append(m.EnabledCurrencyCodes, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field EnabledCurrencyCodes", wireType)
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PaymentsAccountID", wireType)
			}
			m.PaymentsAccountID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMerchantService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PaymentsAccountID |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType == 0 {
				var v DigitalWallets
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowMerchantService
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= DigitalWallets(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.AcceptedDigitalWallets = append(m.AcceptedDigitalWallets, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowMerchantService
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthMerchantService
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthMerchantService
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				if elementCount != 0 && len(m.AcceptedDigitalWallets) == 0 {
					m.AcceptedDigitalWallets = make([]DigitalWallets, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v DigitalWallets
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowMerchantService
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= DigitalWallets(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.AcceptedDigitalWallets = append(m.AcceptedDigitalWallets, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field AcceptedDigitalWallets", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMerchantService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMerchantService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMerchantService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Policy) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMerchantService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Policy: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Policy: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Body", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMerchantService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMerchantService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMerchantService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Body = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Handle", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMerchantService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMerchantService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMerchantService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Handle = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMerchantService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMerchantService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMerchantService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Title = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMerchantService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMerchantService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMerchantService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CreateAccountRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMerchantService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateAccountRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateAccountRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Account", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMerchantService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMerchantService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMerchantService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Account == nil {
				m.Account = &Merchant{}
			}
			if err := m.Account.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMerchantService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMerchantService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMerchantService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CreateAccountResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMerchantService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateAccountResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateAccountResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			m.ID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMerchantService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ID |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMerchantService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMerchantService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMerchantService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DeleteAccountRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMerchantService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DeleteAccountRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DeleteAccountRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			m.ID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMerchantService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ID |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMerchantService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMerchantService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMerchantService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DeleteAccountResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMerchantService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DeleteAccountResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DeleteAccountResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsDeleted", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMerchantService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsDeleted = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipMerchantService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMerchantService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMerchantService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateAccountRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMerchantService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateAccountRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateAccountRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			m.ID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMerchantService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ID |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Account", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMerchantService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMerchantService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMerchantService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Account == nil {
				m.Account = &Merchant{}
			}
			if err := m.Account.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMerchantService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMerchantService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMerchantService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateAccountResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMerchantService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateAccountResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateAccountResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Account", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMerchantService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMerchantService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMerchantService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Account == nil {
				m.Account = &Merchant{}
			}
			if err := m.Account.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMerchantService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMerchantService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMerchantService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetAccountRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMerchantService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetAccountRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetAccountRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			m.ID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMerchantService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ID |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMerchantService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMerchantService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMerchantService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetAccountResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMerchantService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetAccountResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetAccountResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Account", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMerchantService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMerchantService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMerchantService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Account == nil {
				m.Account = &Merchant{}
			}
			if err := m.Account.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMerchantService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMerchantService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMerchantService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetAccountsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMerchantService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetAccountsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetAccountsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType == 0 {
				var v uint32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowMerchantService
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= uint32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.IDs = append(m.IDs, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowMerchantService
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthMerchantService
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthMerchantService
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.IDs) == 0 {
					m.IDs = make([]uint32, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowMerchantService
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= uint32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.IDs = append(m.IDs, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field IDs", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMerchantService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMerchantService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMerchantService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetAccountsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMerchantService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetAccountsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetAccountsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Accounts", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMerchantService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMerchantService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMerchantService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Accounts = append(m.Accounts, &Merchant{})
			if err := m.Accounts[len(m.Accounts)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMerchantService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMerchantService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMerchantService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipMerchantService(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowMerchantService
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMerchantService
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMerchantService
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthMerchantService
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupMerchantService
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthMerchantService
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthMerchantService        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowMerchantService          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupMerchantService = fmt.Errorf("proto: unexpected end of group")
)
