apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ template "service.fullname" . }}
  labels:
    {{- include "service.labels" . | nindent 4 }}
spec:
  {{- if not .Values.hpa.enabled }}
  replicas: {{ .Values.replicaCount }}
  {{- end }}
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: 1
  selector:
    matchLabels:
      {{- include "service.selectorLabels" . | nindent 6 }}
  template:
    metadata:
      labels:
        {{- include "service.selectorLabels" . | nindent 8 }}
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "{{ .Values.service.httpPort }}"
        {{- range $key, $value := .Values.podAnnotations }}
        {{ $key }}: {{ $value | quote }}
        {{- end }}
    spec:
      terminationGracePeriodSeconds: 30
      {{- if .Values.serviceAccount.enabled }}
      serviceAccountName: {{ template "service.serviceAccountName" . }}
      {{- end }}
      containers:
        - name: {{ .Chart.Name }}
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          {{- if .Values.securityContext }}
          securityContext:
            {{- toYaml .Values.securityContext | nindent 12 }}
          {{- else if (or .Values.service.hostPort .Values.tls.hostPort) }}
          securityContext:
            allowPrivilegeEscalation: true
            capabilities:
              drop:
                - ALL
              add:
                - NET_BIND_SERVICE
          {{- end }}
          command:
		  	- sh -c "./authn migrate && ./authn server"
          env:
			- name: AUTHN_URL
			  value: "http://backend:3000"
			- name: APP_DOMAINS
			  value: "localhost"
			- name: SECRET_KEY_BASE
			  value: "secret"
			- name: DATABASE_URL
			  value: "sqlite3://:memory:?mode=memory\\&cache=shared"
			- name: REDIS_URL
			  value: "cache:6379" # TODO change this to actual redis cluster in the cloud
			- name: HTTP_AUTH_USERNAME
			  value: "test"
			- name: HTTP_AUTH_PASSWORD
			  value: "test"
			- name: ENABLE_SIGNUP
			  value: "false"
			- name: ACCESS_TOKEN_TTL
			  value: "86400"
			- name: REFRESH_TOKEN_TTL
			  value: "2592000"
			- name: SESSION_KEY_SALT
			  value: "test"
			- name: DB_ENCRYPTION_KEY_SALT
			  value: "test"
			- name: USERNAME_IS_EMAIL
			  value: "true"
			- name: PASSWORD_POLICY_SCORE
			  value: "2"
			- name: PASSWORD_CHANGE_LOGOUT
			  value: "true"
			- name: APP_PASSWORD_RESET_URL
			  value: ""
			- name: PASSWORD_RESET_TOKEN_TTL
			  value: "1800"
			- name: APP_PASSWORD_CHANGED_URL
			  value: ""
          ports:
            - name: http
              containerPort: {{ .Values.service.httpPort | default 3000 }}
              protocol: TCP
              {{- if .Values.service.hostPort }}
              hostPort: {{ .Values.service.hostPort }}
              {{- end }}
            {{- if .Values.tls.enabled }}
            - name: https
              containerPort: {{ .Values.tls.port | default 9899 }}
              protocol: TCP
              {{- if .Values.tls.hostPort }}
              hostPort: {{ .Values.tls.hostPort }}
              {{- end }}
            {{- end }}
            {{- if .Values.service.metricsPort }}
            - name: http-metrics
              containerPort: {{ .Values.service.metricsPort }}
              protocol: TCP
            {{- end }}
            {{- if .Values.service.grpcPort }}
            - name: grpc
              containerPort: {{ .Values.service.grpcPort }}
              protocol: TCP
            {{- end }}
          livenessProbe:
            exec:
              command:
              - curl
              - -f
              - authentication-service:3000/health
            initialDelaySeconds: 1
            timeoutSeconds: 5
          readinessProbe:
            exec:
              command:
              - curl
              - -f
              - authentication-service:3000/health
            initialDelaySeconds: 1
            timeoutSeconds: 5
          volumeMounts:
          - name: data
            mountPath: /data
          {{- if .Values.tls.enabled }}
          - name: tls
            mountPath: {{ .Values.tls.certPath | default "/data/cert" }}
            readOnly: true
          {{- end }}
          resources:
{{ toYaml .Values.resources | indent 12 }}
    {{- with .Values.nodeSelector }}
      nodeSelector:
{{ toYaml . | indent 8 }}
    {{- end }}
    {{- with .Values.affinity }}
      affinity:
{{ toYaml . | indent 8 }}
    {{- end }}
    {{- with .Values.tolerations }}
      tolerations:
{{ toYaml . | indent 8 }}
    {{- end }}
      volumes:
      - name: data
        emptyDir: {}
      {{- if .Values.tls.enabled }}
      - name: tls
        secret:
          secretName: {{ template "service.tlsSecretName" . }}
      {{- end }}
